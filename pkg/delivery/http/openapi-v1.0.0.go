// Package http provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package http

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// AssetDetail defines model for AssetDetail.
type AssetDetail struct {
	Asset       *Asset  `json:"asset,omitempty"`
	DateCreated *int64  `json:"dateCreated,omitempty"`
	PriceRune   *string `json:"priceRune,omitempty"`
}

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward *string `json:"blockReward,omitempty"`
	BondReward  *string `json:"bondReward,omitempty"`
	StakeReward *string `json:"stakeReward,omitempty"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {

	// Average bond of active nodes
	AverageActiveBond *string `json:"averageActiveBond,omitempty"`

	// Average bond of standby nodes
	AverageStandbyBond *string `json:"averageStandbyBond,omitempty"`

	// Maxinum bond of active nodes
	MaximumActiveBond *string `json:"maximumActiveBond,omitempty"`

	// Maximum bond of standby nodes
	MaximumStandbyBond *string `json:"maximumStandbyBond,omitempty"`

	// Median bond of active nodes
	MedianActiveBond *string `json:"medianActiveBond,omitempty"`

	// Median bond of standby nodes
	MedianStandbyBond *string `json:"medianStandbyBond,omitempty"`

	// Minumum bond of active nodes
	MinimumActiveBond *string `json:"minimumActiveBond,omitempty"`

	// Minumum bond of standby nodes
	MinimumStandbyBond *string `json:"minimumStandbyBond,omitempty"`

	// Total bond of active nodes
	TotalActiveBond *string `json:"totalActiveBond,omitempty"`

	// Total bond of standby nodes
	TotalStandbyBond *string `json:"totalStandbyBond,omitempty"`
}

// Error defines model for Error.
type Error struct {
	Error string `json:"error"`
}

// NetworkInfo defines model for NetworkInfo.
type NetworkInfo struct {

	// Array of Active Bonds
	ActiveBonds *[]string `json:"activeBonds,omitempty"`

	// Number of Active Nodes
	ActiveNodeCount *int          `json:"activeNodeCount,omitempty"`
	BlockRewards    *BlockRewards `json:"blockRewards,omitempty"`
	BondMetrics     *BondMetrics  `json:"bondMetrics,omitempty"`
	BondingROI      *string       `json:"bondingROI,omitempty"`
	NextChurnHeight *string       `json:"nextChurnHeight,omitempty"`

	// The remaining time of pool activation (in blocks)
	PoolActivationCountdown *int64  `json:"poolActivationCountdown,omitempty"`
	PoolShareFactor         *string `json:"poolShareFactor,omitempty"`
	StakingROI              *string `json:"stakingROI,omitempty"`

	// Array of Standby Bonds
	StandbyBonds *[]string `json:"standbyBonds,omitempty"`

	// Number of Standby Nodes
	StandbyNodeCount *int `json:"standbyNodeCount,omitempty"`

	// Total left in Reserve
	TotalReserve *string `json:"totalReserve,omitempty"`

	// Total Rune Staked in Pools
	TotalStaked *string `json:"totalStaked,omitempty"`
}

// NodeKey defines model for NodeKey.
type NodeKey struct {

	// ed25519 public key
	Ed25519 *string `json:"ed25519,omitempty"`

	// secp256k1 public key
	Secp256k1 *string `json:"secp256k1,omitempty"`
}

// PoolAggChanges defines model for PoolAggChanges.
type PoolAggChanges struct {
	AssetChanges    *string `json:"assetChanges,omitempty"`
	AssetDepth      *string `json:"assetDepth,omitempty"`
	AssetROI        *string `json:"assetROI,omitempty"`
	AssetStaked     *string `json:"assetStaked,omitempty"`
	AssetWithdrawn  *string `json:"assetWithdrawn,omitempty"`
	BuyCount        *int64  `json:"buyCount,omitempty"`
	BuyVolume       *string `json:"buyVolume,omitempty"`
	PoolROI         *string `json:"poolROI,omitempty"`
	PoolSwapAverage *string `json:"poolSwapAverage,omitempty"`
	PoolVolume      *string `json:"poolVolume,omitempty"`
	Price           *string `json:"price,omitempty"`
	RuneChanges     *string `json:"runeChanges,omitempty"`
	RuneDepth       *string `json:"runeDepth,omitempty"`
	RuneROI         *string `json:"runeROI,omitempty"`
	RuneStaked      *string `json:"runeStaked,omitempty"`
	RuneWithdrawn   *string `json:"runeWithdrawn,omitempty"`
	SellCount       *int64  `json:"sellCount,omitempty"`
	SellVolume      *string `json:"sellVolume,omitempty"`
	StakeCount      *int64  `json:"stakeCount,omitempty"`
	SwapCount       *int64  `json:"swapCount,omitempty"`
	Time            *int64  `json:"time,omitempty"`
	UnitsChanges    *string `json:"unitsChanges,omitempty"`
	WithdrawCount   *int64  `json:"withdrawCount,omitempty"`
}

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	Asset *Asset `json:"asset,omitempty"`

	// Total current Asset balance
	AssetDepth *string `json:"assetDepth,omitempty"`

	// Asset return on investment
	AssetROI *string `json:"assetROI,omitempty"`

	// Total Asset staked
	AssetStakedTotal *string `json:"assetStakedTotal,omitempty"`

	// Number of RUNE->ASSET transactions
	BuyAssetCount *string `json:"buyAssetCount,omitempty"`

	// Average sell Asset fee size for RUNE->ASSET (in ASSET)
	BuyFeeAverage *string `json:"buyFeeAverage,omitempty"`

	// Total fees (in Asset)
	BuyFeesTotal *string `json:"buyFeesTotal,omitempty"`

	// Average trade slip for RUNE->ASSET in %
	BuySlipAverage *string `json:"buySlipAverage,omitempty"`

	// Average Asset buy transaction size for (RUNE->ASSET) (in ASSET)
	BuyTxAverage *string `json:"buyTxAverage,omitempty"`

	// Total Asset buy volume (RUNE->ASSET) (in Asset)
	BuyVolume *string `json:"buyVolume,omitempty"`

	// Total depth of both sides (in RUNE)
	PoolDepth *string `json:"poolDepth,omitempty"`

	// Average pool fee
	PoolFeeAverage *string `json:"poolFeeAverage,omitempty"`

	// Total fees
	PoolFeesTotal *string `json:"poolFeesTotal,omitempty"`

	// Pool ROI (average of RUNE and Asset ROI)
	PoolROI *string `json:"poolROI,omitempty"`

	// Pool ROI over 12 months
	PoolROI12 *string `json:"poolROI12,omitempty"`

	// Average pool slip
	PoolSlipAverage *string `json:"poolSlipAverage,omitempty"`

	// Rune value staked Total
	PoolStakedTotal *string `json:"poolStakedTotal,omitempty"`

	// Average pool transaction
	PoolTxAverage *string `json:"poolTxAverage,omitempty"`

	// Total pool units outstanding
	PoolUnits *string `json:"poolUnits,omitempty"`

	// Two-way volume of all-time (in RUNE)
	PoolVolume *string `json:"poolVolume,omitempty"`

	// Two-way volume in 24hrs (in RUNE)
	PoolVolume24hr *string `json:"poolVolume24hr,omitempty"`

	// Price of Asset (in RUNE).
	Price *string `json:"price,omitempty"`

	// Total current Rune balance
	RuneDepth *string `json:"runeDepth,omitempty"`

	// RUNE return on investment
	RuneROI *string `json:"runeROI,omitempty"`

	// Total RUNE staked
	RuneStakedTotal *string `json:"runeStakedTotal,omitempty"`

	// Number of ASSET->RUNE transactions
	SellAssetCount *string `json:"sellAssetCount,omitempty"`

	// Average buy Asset fee size for ASSET->RUNE (in RUNE)
	SellFeeAverage *string `json:"sellFeeAverage,omitempty"`

	// Total fees (in RUNE)
	SellFeesTotal *string `json:"sellFeesTotal,omitempty"`

	// Average trade slip for ASSET->RUNE in %
	SellSlipAverage *string `json:"sellSlipAverage,omitempty"`

	// Average Asset sell transaction size (ASSET>RUNE) (in RUNE)
	SellTxAverage *string `json:"sellTxAverage,omitempty"`

	// Total Asset sell volume (ASSET>RUNE) (in RUNE).
	SellVolume *string `json:"sellVolume,omitempty"`

	// Number of stake transactions
	StakeTxCount *string `json:"stakeTxCount,omitempty"`

	// Number of unique stakers
	StakersCount *string `json:"stakersCount,omitempty"`

	// Number of stake & withdraw transactions
	StakingTxCount *string `json:"stakingTxCount,omitempty"`
	Status         *string `json:"status,omitempty"`

	// Number of unique swappers interacting with pool
	SwappersCount *string `json:"swappersCount,omitempty"`

	// Number of swapping transactions in the pool (buys and sells)
	SwappingTxCount *string `json:"swappingTxCount,omitempty"`

	// Number of withdraw transactions
	WithdrawTxCount *string `json:"withdrawTxCount,omitempty"`
}

// Stakers defines model for Stakers.
type Stakers string

// StakersAddressData defines model for StakersAddressData.
type StakersAddressData struct {
	PoolsArray *[]Asset `json:"poolsArray,omitempty"`

	// Total value of earnings (in RUNE) across all pools.
	TotalEarned *string `json:"totalEarned,omitempty"`

	// Average of all pool ROIs.
	TotalROI *string `json:"totalROI,omitempty"`

	// Total staked (in RUNE) across all pools.
	TotalStaked *string `json:"totalStaked,omitempty"`
}

// StakersAssetData defines model for StakersAssetData.
type StakersAssetData struct {
	Asset            *Asset `json:"asset,omitempty"`
	DateFirstStaked  *int64 `json:"dateFirstStaked,omitempty"`
	HeightLastStaked *int64 `json:"heightLastStaked,omitempty"`

	// Represents ownership of a pool.
	StakeUnits *string `json:"stakeUnits,omitempty"`
}

// StatsData defines model for StatsData.
type StatsData struct {

	// Daily active users (unique addresses interacting)
	DailyActiveUsers *string `json:"dailyActiveUsers,omitempty"`

	// Daily transactions
	DailyTx *string `json:"dailyTx,omitempty"`

	// Monthly active users
	MonthlyActiveUsers *string `json:"monthlyActiveUsers,omitempty"`

	// Monthly transactions
	MonthlyTx *string `json:"monthlyTx,omitempty"`

	// Number of active pools
	PoolCount *string `json:"poolCount,omitempty"`

	// Total buying transactions
	TotalAssetBuys *string `json:"totalAssetBuys,omitempty"`

	// Total selling transactions
	TotalAssetSells *string `json:"totalAssetSells,omitempty"`

	// Total RUNE balances
	TotalDepth *string `json:"totalDepth,omitempty"`

	// Total earned (in RUNE Value).
	TotalEarned *string `json:"totalEarned,omitempty"`

	// Total staking transactions
	TotalStakeTx *string `json:"totalStakeTx,omitempty"`

	// Total staked (in RUNE Value).
	TotalStaked *string `json:"totalStaked,omitempty"`

	// Total transactions
	TotalTx *string `json:"totalTx,omitempty"`

	// Total unique swappers & stakers
	TotalUsers *string `json:"totalUsers,omitempty"`

	// Total (in RUNE Value) of all assets swapped since start.
	TotalVolume *string `json:"totalVolume,omitempty"`

	// Total (in RUNE Value) of all assets swapped in 24hrs
	TotalVolume24hr *string `json:"totalVolume24hr,omitempty"`

	// Total withdrawing transactions
	TotalWithdrawTx *string `json:"totalWithdrawTx,omitempty"`
}

// ThorchainBooleanConstants defines model for ThorchainBooleanConstants.
type ThorchainBooleanConstants struct {
	StrictBondStakeRatio *bool `json:"StrictBondStakeRatio,omitempty"`
}

// ThorchainConstants defines model for ThorchainConstants.
type ThorchainConstants struct {
	BoolValues   *ThorchainBooleanConstants `json:"bool_values,omitempty"`
	Int64Values  *ThorchainInt64Constants   `json:"int_64_values,omitempty"`
	StringValues *ThorchainStringConstants  `json:"string_values,omitempty"`
}

// ThorchainEndpoint defines model for ThorchainEndpoint.
type ThorchainEndpoint struct {
	Address *string `json:"address,omitempty"`
	Chain   *string `json:"chain,omitempty"`
	PubKey  *string `json:"pub_key,omitempty"`
}

// ThorchainEndpoints defines model for ThorchainEndpoints.
type ThorchainEndpoints struct {
	Current *[]ThorchainEndpoint `json:"current,omitempty"`
}

// ThorchainInt64Constants defines model for ThorchainInt64Constants.
type ThorchainInt64Constants struct {
	BadValidatorRate                *int64 `json:"BadValidatorRate,omitempty"`
	BlocksPerYear                   *int64 `json:"BlocksPerYear,omitempty"`
	DesireValidatorSet              *int64 `json:"DesireValidatorSet,omitempty"`
	DoubleSignMaxAge                *int64 `json:"DoubleSignMaxAge,omitempty"`
	EmissionCurve                   *int64 `json:"EmissionCurve,omitempty"`
	FailKeySignSlashPoints          *int64 `json:"FailKeySignSlashPoints,omitempty"`
	FailKeygenSlashPoints           *int64 `json:"FailKeygenSlashPoints,omitempty"`
	FundMigrationInterval           *int64 `json:"FundMigrationInterval,omitempty"`
	JailTimeKeygen                  *int64 `json:"JailTimeKeygen,omitempty"`
	JailTimeKeysign                 *int64 `json:"JailTimeKeysign,omitempty"`
	LackOfObservationPenalty        *int64 `json:"LackOfObservationPenalty,omitempty"`
	MinimumBondInRune               *int64 `json:"MinimumBondInRune,omitempty"`
	MinimumNodesForBFT              *int64 `json:"MinimumNodesForBFT,omitempty"`
	MinimumNodesForYggdrasil        *int64 `json:"MinimumNodesForYggdrasil,omitempty"`
	NewPoolCycle                    *int64 `json:"NewPoolCycle,omitempty"`
	ObserveSlashPoints              *int64 `json:"ObserveSlashPoints,omitempty"`
	OldValidatorRate                *int64 `json:"OldValidatorRate,omitempty"`
	RotatePerBlockHeight            *int64 `json:"RotatePerBlockHeight,omitempty"`
	RotateRetryBlocks               *int64 `json:"RotateRetryBlocks,omitempty"`
	SigningTransactionPeriod        *int64 `json:"SigningTransactionPeriod,omitempty"`
	StakeLockUpBlocks               *int64 `json:"StakeLockUpBlocks,omitempty"`
	TransactionFee                  *int64 `json:"TransactionFee,omitempty"`
	ValidatorRotateInNumBeforeFull  *int64 `json:"ValidatorRotateInNumBeforeFull,omitempty"`
	ValidatorRotateNumAfterFull     *int64 `json:"ValidatorRotateNumAfterFull,omitempty"`
	ValidatorRotateOutNumBeforeFull *int64 `json:"ValidatorRotateOutNumBeforeFull,omitempty"`
	WhiteListGasAsset               *int64 `json:"WhiteListGasAsset,omitempty"`
	YggFundLimit                    *int64 `json:"YggFundLimit,omitempty"`
}

// ThorchainLastblock defines model for ThorchainLastblock.
type ThorchainLastblock struct {
	Chain          *string `json:"chain,omitempty"`
	Lastobservedin *int64  `json:"lastobservedin,omitempty"`
	Lastsignedout  *int64  `json:"lastsignedout,omitempty"`
	Thorchain      *int64  `json:"thorchain,omitempty"`
}

// ThorchainStringConstants defines model for ThorchainStringConstants.
type ThorchainStringConstants struct {
	DefaultPoolStatus *string `json:"DefaultPoolStatus,omitempty"`
}

// TotalVolChanges defines model for TotalVolChanges.
type TotalVolChanges struct {
	BuyVolume   *string `json:"buyVolume,omitempty"`
	SellVolume  *string `json:"sellVolume,omitempty"`
	Time        *int64  `json:"time,omitempty"`
	TotalVolume *string `json:"totalVolume,omitempty"`
}

// TxDetails defines model for TxDetails.
type TxDetails struct {
	Date    *int64  `json:"date,omitempty"`
	Events  *Event  `json:"events,omitempty"`
	Gas     *Gas    `json:"gas,omitempty"`
	Height  *string `json:"height,omitempty"`
	In      *Tx     `json:"in,omitempty"`
	Options *Option `json:"options,omitempty"`
	Out     *[]Tx   `json:"out,omitempty"`
	Pool    *Asset  `json:"pool,omitempty"`
	Status  *string `json:"status,omitempty"`
	Type    *string `json:"type,omitempty"`
}

// Asset defines model for asset.
type Asset string

// Coin defines model for coin.
type Coin struct {
	Amount *string `json:"amount,omitempty"`
	Asset  *Asset  `json:"asset,omitempty"`
}

// Coins defines model for coins.
type Coins []Coin

// Event defines model for event.
type Event struct {
	Fee        *string `json:"fee,omitempty"`
	Slip       *string `json:"slip,omitempty"`
	StakeUnits *string `json:"stakeUnits,omitempty"`
}

// Gas defines model for gas.
type Gas struct {
	Amount *string `json:"amount,omitempty"`
	Asset  *Asset  `json:"asset,omitempty"`
}

// Option defines model for option.
type Option struct {
	Asymmetry           *string `json:"asymmetry,omitempty"`
	PriceTarget         *string `json:"priceTarget,omitempty"`
	WithdrawBasisPoints *string `json:"withdrawBasisPoints,omitempty"`
}

// Tx defines model for tx.
type Tx struct {
	Address *string `json:"address,omitempty"`
	Coins   *Coins  `json:"coins,omitempty"`
	Memo    *string `json:"memo,omitempty"`
	TxID    *string `json:"txID,omitempty"`
}

// AssetsDetailedResponse defines model for AssetsDetailedResponse.
type AssetsDetailedResponse []AssetDetail

// GeneralErrorResponse defines model for GeneralErrorResponse.
type GeneralErrorResponse Error

// GetPoolAggChangesResponse defines model for GetPoolAggChangesResponse.
type GetPoolAggChangesResponse []PoolAggChanges

// HealthResponse defines model for HealthResponse.
type HealthResponse struct {
	CatchingUp    *bool  `json:"catching_up,omitempty"`
	Database      *bool  `json:"database,omitempty"`
	ScannerHeight *int64 `json:"scannerHeight,omitempty"`
}

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse NetworkInfo

// NodeKeyResponse defines model for NodeKeyResponse.
type NodeKeyResponse []NodeKey

// PoolsDetailedResponse defines model for PoolsDetailedResponse.
type PoolsDetailedResponse []PoolDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse []Asset

// StakersAddressDataResponse defines model for StakersAddressDataResponse.
type StakersAddressDataResponse StakersAddressData

// StakersAssetDataResponse defines model for StakersAssetDataResponse.
type StakersAssetDataResponse []StakersAssetData

// StakersResponse defines model for StakersResponse.
type StakersResponse []Stakers

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// ThorchainConstantsResponse defines model for ThorchainConstantsResponse.
type ThorchainConstantsResponse ThorchainConstants

// ThorchainEndpointsResponse defines model for ThorchainEndpointsResponse.
type ThorchainEndpointsResponse ThorchainEndpoints

// ThorchainLastblockResponse defines model for ThorchainLastblockResponse.
type ThorchainLastblockResponse ThorchainLastblock

// TotalVolChangesResponse defines model for TotalVolChangesResponse.
type TotalVolChangesResponse []TotalVolChanges

// TxsResponse defines model for TxsResponse.
type TxsResponse struct {
	Count *int64       `json:"count,omitempty"`
	Txs   *[]TxDetails `json:"txs,omitempty"`
}

// GetAssetInfoParams defines parameters for GetAssetInfo.
type GetAssetInfoParams struct {

	// One or more comma separated unique asset (CHAIN.SYMBOL)
	Asset string `json:"asset"`
}

// GetPoolAggChangesParams defines parameters for GetPoolAggChanges.
type GetPoolAggChangesParams struct {

	// Pool asset name
	Pool string `json:"pool"`

	// Interval of calculations
	Interval string `json:"interval"`

	// Start time of the query as unix timestamp
	From int64 `json:"from"`

	// End time of the query as unix timestamp
	To int64 `json:"to"`
}

// GetTotalVolChangesParams defines parameters for GetTotalVolChanges.
type GetTotalVolChangesParams struct {

	// Interval of calculations
	Interval string `json:"interval"`

	// Start time of the query as unix timestamp
	From int64 `json:"from"`

	// End time of the query as unix timestamp
	To int64 `json:"to"`
}

// GetPoolsDetailsParams defines parameters for GetPoolsDetails.
type GetPoolsDetailsParams struct {

	// Specifies the returning view
	View *string `json:"view,omitempty"`

	// One or more comma separated unique asset (CHAIN.SYMBOL)
	Asset string `json:"asset"`
}

// GetStakersAddressAndAssetDataParams defines parameters for GetStakersAddressAndAssetData.
type GetStakersAddressAndAssetDataParams struct {

	// One or more comma separated unique asset (CHAIN.SYMBOL)
	Asset string `json:"asset"`
}

// GetTxDetailsParams defines parameters for GetTxDetails.
type GetTxDetailsParams struct {

	// Address of sender or recipient of any in/out tx in event
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx in event
	Txid *string `json:"txid,omitempty"`

	// Any asset used in event (CHAIN.SYMBOL)
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of event
	Type *string `json:"type,omitempty"`

	// pagination offset
	Offset int64 `json:"offset"`

	// pagination limit
	Limit int64 `json:"limit"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get Asset Information
	// (GET /v1/assets)
	GetAssetInfo(ctx echo.Context, params GetAssetInfoParams) error
	// Get Documents
	// (GET /v1/doc)
	GetDocs(ctx echo.Context) error
	// Get Health
	// (GET /v1/health)
	GetHealth(ctx echo.Context) error
	// Get Pool Aggregated Changes
	// (GET /v1/history/pools)
	GetPoolAggChanges(ctx echo.Context, params GetPoolAggChangesParams) error
	// Get Total Volume Changes
	// (GET /v1/history/total_volume)
	GetTotalVolChanges(ctx echo.Context, params GetTotalVolChangesParams) error
	// Get Network Data
	// (GET /v1/network)
	GetNetworkData(ctx echo.Context) error
	// Get Node public keys
	// (GET /v1/nodes)
	GetNodes(ctx echo.Context) error
	// Get Asset Pools
	// (GET /v1/pools)
	GetPools(ctx echo.Context) error
	// Get Pools Details
	// (GET /v1/pools/detail)
	GetPoolsDetails(ctx echo.Context, params GetPoolsDetailsParams) error
	// Get Stakers
	// (GET /v1/stakers)
	GetStakersData(ctx echo.Context) error
	// Get Staker Data
	// (GET /v1/stakers/{address})
	GetStakersAddressData(ctx echo.Context, address string) error
	// Get Staker Pool Data
	// (GET /v1/stakers/{address}/pools)
	GetStakersAddressAndAssetData(ctx echo.Context, address string, params GetStakersAddressAndAssetDataParams) error
	// Get Global Stats
	// (GET /v1/stats)
	GetStats(ctx echo.Context) error
	// Get Swagger
	// (GET /v1/swagger.json)
	GetSwagger(ctx echo.Context) error
	// Get the Proxied THORChain Constants
	// (GET /v1/thorchain/constants)
	GetThorchainProxiedConstants(ctx echo.Context) error
	// Get the Proxied THORChain Lastblock
	// (GET /v1/thorchain/lastblock)
	GetThorchainProxiedLastblock(ctx echo.Context) error
	// Get the Proxied Pool Addresses
	// (GET /v1/thorchain/pool_addresses)
	GetThorchainProxiedEndpoints(ctx echo.Context) error
	// Get details of a tx by address, asset or tx-id
	// (GET /v1/txs)
	GetTxDetails(ctx echo.Context, params GetTxDetailsParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetAssetInfo converts echo context to params.
func (w *ServerInterfaceWrapper) GetAssetInfo(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAssetInfoParams
	// ------------- Required query parameter "asset" -------------

	err = runtime.BindQueryParameter("form", true, true, "asset", ctx.QueryParams(), &params.Asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAssetInfo(ctx, params)
	return err
}

// GetDocs converts echo context to params.
func (w *ServerInterfaceWrapper) GetDocs(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDocs(ctx)
	return err
}

// GetHealth converts echo context to params.
func (w *ServerInterfaceWrapper) GetHealth(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetHealth(ctx)
	return err
}

// GetPoolAggChanges converts echo context to params.
func (w *ServerInterfaceWrapper) GetPoolAggChanges(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPoolAggChangesParams
	// ------------- Required query parameter "pool" -------------

	err = runtime.BindQueryParameter("form", true, true, "pool", ctx.QueryParams(), &params.Pool)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pool: %s", err))
	}

	// ------------- Required query parameter "interval" -------------

	err = runtime.BindQueryParameter("form", true, true, "interval", ctx.QueryParams(), &params.Interval)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter interval: %s", err))
	}

	// ------------- Required query parameter "from" -------------

	err = runtime.BindQueryParameter("form", true, true, "from", ctx.QueryParams(), &params.From)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter from: %s", err))
	}

	// ------------- Required query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, true, "to", ctx.QueryParams(), &params.To)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter to: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPoolAggChanges(ctx, params)
	return err
}

// GetTotalVolChanges converts echo context to params.
func (w *ServerInterfaceWrapper) GetTotalVolChanges(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTotalVolChangesParams
	// ------------- Required query parameter "interval" -------------

	err = runtime.BindQueryParameter("form", true, true, "interval", ctx.QueryParams(), &params.Interval)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter interval: %s", err))
	}

	// ------------- Required query parameter "from" -------------

	err = runtime.BindQueryParameter("form", true, true, "from", ctx.QueryParams(), &params.From)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter from: %s", err))
	}

	// ------------- Required query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, true, "to", ctx.QueryParams(), &params.To)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter to: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTotalVolChanges(ctx, params)
	return err
}

// GetNetworkData converts echo context to params.
func (w *ServerInterfaceWrapper) GetNetworkData(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNetworkData(ctx)
	return err
}

// GetNodes converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodes(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodes(ctx)
	return err
}

// GetPools converts echo context to params.
func (w *ServerInterfaceWrapper) GetPools(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPools(ctx)
	return err
}

// GetPoolsDetails converts echo context to params.
func (w *ServerInterfaceWrapper) GetPoolsDetails(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPoolsDetailsParams
	// ------------- Optional query parameter "view" -------------

	err = runtime.BindQueryParameter("form", true, false, "view", ctx.QueryParams(), &params.View)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter view: %s", err))
	}

	// ------------- Required query parameter "asset" -------------

	err = runtime.BindQueryParameter("form", true, true, "asset", ctx.QueryParams(), &params.Asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPoolsDetails(ctx, params)
	return err
}

// GetStakersData converts echo context to params.
func (w *ServerInterfaceWrapper) GetStakersData(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStakersData(ctx)
	return err
}

// GetStakersAddressData converts echo context to params.
func (w *ServerInterfaceWrapper) GetStakersAddressData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStakersAddressData(ctx, address)
	return err
}

// GetStakersAddressAndAssetData converts echo context to params.
func (w *ServerInterfaceWrapper) GetStakersAddressAndAssetData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetStakersAddressAndAssetDataParams
	// ------------- Required query parameter "asset" -------------

	err = runtime.BindQueryParameter("form", true, true, "asset", ctx.QueryParams(), &params.Asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStakersAddressAndAssetData(ctx, address, params)
	return err
}

// GetStats converts echo context to params.
func (w *ServerInterfaceWrapper) GetStats(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStats(ctx)
	return err
}

// GetSwagger converts echo context to params.
func (w *ServerInterfaceWrapper) GetSwagger(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSwagger(ctx)
	return err
}

// GetThorchainProxiedConstants converts echo context to params.
func (w *ServerInterfaceWrapper) GetThorchainProxiedConstants(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetThorchainProxiedConstants(ctx)
	return err
}

// GetThorchainProxiedLastblock converts echo context to params.
func (w *ServerInterfaceWrapper) GetThorchainProxiedLastblock(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetThorchainProxiedLastblock(ctx)
	return err
}

// GetThorchainProxiedEndpoints converts echo context to params.
func (w *ServerInterfaceWrapper) GetThorchainProxiedEndpoints(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetThorchainProxiedEndpoints(ctx)
	return err
}

// GetTxDetails converts echo context to params.
func (w *ServerInterfaceWrapper) GetTxDetails(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTxDetailsParams
	// ------------- Optional query parameter "address" -------------

	err = runtime.BindQueryParameter("form", true, false, "address", ctx.QueryParams(), &params.Address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Optional query parameter "txid" -------------

	err = runtime.BindQueryParameter("form", true, false, "txid", ctx.QueryParams(), &params.Txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	// ------------- Optional query parameter "asset" -------------

	err = runtime.BindQueryParameter("form", true, false, "asset", ctx.QueryParams(), &params.Asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// ------------- Optional query parameter "type" -------------

	err = runtime.BindQueryParameter("form", true, false, "type", ctx.QueryParams(), &params.Type)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter type: %s", err))
	}

	// ------------- Required query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, true, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Required query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, true, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTxDetails(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/v1/assets", wrapper.GetAssetInfo)
	router.GET("/v1/doc", wrapper.GetDocs)
	router.GET("/v1/health", wrapper.GetHealth)
	router.GET("/v1/history/pools", wrapper.GetPoolAggChanges)
	router.GET("/v1/history/total_volume", wrapper.GetTotalVolChanges)
	router.GET("/v1/network", wrapper.GetNetworkData)
	router.GET("/v1/nodes", wrapper.GetNodes)
	router.GET("/v1/pools", wrapper.GetPools)
	router.GET("/v1/pools/detail", wrapper.GetPoolsDetails)
	router.GET("/v1/stakers", wrapper.GetStakersData)
	router.GET("/v1/stakers/:address", wrapper.GetStakersAddressData)
	router.GET("/v1/stakers/:address/pools", wrapper.GetStakersAddressAndAssetData)
	router.GET("/v1/stats", wrapper.GetStats)
	router.GET("/v1/swagger.json", wrapper.GetSwagger)
	router.GET("/v1/thorchain/constants", wrapper.GetThorchainProxiedConstants)
	router.GET("/v1/thorchain/lastblock", wrapper.GetThorchainProxiedLastblock)
	router.GET("/v1/thorchain/pool_addresses", wrapper.GetThorchainProxiedEndpoints)
	router.GET("/v1/txs", wrapper.GetTxDetails)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}

