// Package http provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package http

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// AssetDetail defines model for AssetDetail.
type AssetDetail struct {
	Asset       *Asset  `json:"asset,omitempty"`
	DateCreated *int64  `json:"dateCreated,omitempty"`
	PriceRune   *string `json:"priceRune,omitempty"`
}

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward *string `json:"blockReward,omitempty"`
	BondReward  *string `json:"bondReward,omitempty"`
	StakeReward *string `json:"stakeReward,omitempty"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {

	// Average bond of active nodes
	AverageActiveBond *string `json:"averageActiveBond,omitempty"`

	// Average bond of standby nodes
	AverageStandbyBond *string `json:"averageStandbyBond,omitempty"`

	// Maxinum bond of active nodes
	MaximumActiveBond *string `json:"maximumActiveBond,omitempty"`

	// Maximum bond of standby nodes
	MaximumStandbyBond *string `json:"maximumStandbyBond,omitempty"`

	// Median bond of active nodes
	MedianActiveBond *string `json:"medianActiveBond,omitempty"`

	// Median bond of standby nodes
	MedianStandbyBond *string `json:"medianStandbyBond,omitempty"`

	// Minumum bond of active nodes
	MinimumActiveBond *string `json:"minimumActiveBond,omitempty"`

	// Minumum bond of standby nodes
	MinimumStandbyBond *string `json:"minimumStandbyBond,omitempty"`

	// Total bond of active nodes
	TotalActiveBond *string `json:"totalActiveBond,omitempty"`

	// Total bond of standby nodes
	TotalStandbyBond *string `json:"totalStandbyBond,omitempty"`
}

// Error defines model for Error.
type Error struct {
	Error string `json:"error"`
}

// NetworkInfo defines model for NetworkInfo.
type NetworkInfo struct {

	// Array of Active Bonds
	ActiveBonds *[]string `json:"activeBonds,omitempty"`

	// Number of Active Nodes
	ActiveNodeCount *int          `json:"activeNodeCount,omitempty"`
	BlockRewards    *BlockRewards `json:"blockRewards,omitempty"`
	BondMetrics     *BondMetrics  `json:"bondMetrics,omitempty"`

	// (1 + (bondReward * blocksPerMonth/totalActiveBond)) ^ 12 -1
	BondingAPY *string `json:"bondingAPY,omitempty"`
	BondingROI *string `json:"bondingROI,omitempty"`

	// (1 + (stakeReward * blocksPerMonth/totalDepth of active pools)) ^ 12 -1
	LiquidityAPY    *string `json:"liquidityAPY,omitempty"`
	NextChurnHeight *string `json:"nextChurnHeight,omitempty"`

	// The remaining time of pool activation (in blocks)
	PoolActivationCountdown *int64  `json:"poolActivationCountdown,omitempty"`
	PoolShareFactor         *string `json:"poolShareFactor,omitempty"`
	StakingROI              *string `json:"stakingROI,omitempty"`

	// Array of Standby Bonds
	StandbyBonds *[]string `json:"standbyBonds,omitempty"`

	// Number of Standby Nodes
	StandbyNodeCount *int `json:"standbyNodeCount,omitempty"`

	// Total left in Reserve
	TotalReserve *string `json:"totalReserve,omitempty"`

	// Total Rune Staked in Pools
	TotalStaked *string `json:"totalStaked,omitempty"`
}

// NodeKey defines model for NodeKey.
type NodeKey struct {

	// ed25519 public key
	Ed25519 *string `json:"ed25519,omitempty"`

	// secp256k1 public key
	Secp256k1 *string `json:"secp256k1,omitempty"`
}

// PoolAggChanges defines model for PoolAggChanges.
type PoolAggChanges struct {

	// Total changes in asset depth at this time bucket
	AssetChanges *string `json:"assetChanges,omitempty"`

	// Depth of asset at the end of current time bucket
	AssetDepth *string `json:"assetDepth,omitempty"`

	// Total asset staked
	AssetStaked *string `json:"assetStaked,omitempty"`

	// Total asset withdrawn
	AssetWithdrawn *string `json:"assetWithdrawn,omitempty"`

	// Count of buy swaps
	BuyCount *int64 `json:"buyCount,omitempty"`

	// Sum of "rune_amount" of buy swap events
	BuyVolume *string `json:"buyVolume,omitempty"`

	// Total amount of rune, paid by the network to neutralize "gasUsed" changes
	GasReplenished *string `json:"gasReplenished,omitempty"`

	// Total amount of asset used as gas for network transactions (e.g. BNB.BNB, ETH.ETH)
	GasUsed *string `json:"gasUsed,omitempty"`

	// buyVolume + sellVolume
	PoolVolume *string `json:"poolVolume,omitempty"`

	// Asset price in rune at the end of current time bucket
	Price *string `json:"price,omitempty"`

	// Sum of "rewards" events in rune
	Reward *string `json:"reward,omitempty"`

	// Total changes in rune depth at this time bucket
	RuneChanges *string `json:"runeChanges,omitempty"`

	// Depth of rune at the end of current time bucket
	RuneDepth *string `json:"runeDepth,omitempty"`

	// Total rune staked
	RuneStaked *string `json:"runeStaked,omitempty"`

	// Total rune withdrawn
	RuneWithdrawn *string `json:"runeWithdrawn,omitempty"`

	// Count of sell swaps
	SellCount *int64 `json:"sellCount,omitempty"`

	// Sum of "rune_amount" of sell swap events
	SellVolume *string `json:"sellVolume,omitempty"`

	// Count of stake events
	StakeCount *int64 `json:"stakeCount,omitempty"`

	// Determining end of current time bucket in unix timestamp
	Time *int64 `json:"time,omitempty"`

	// Total changes in pool units (stakes/withdraws)
	UnitsChanges *string `json:"unitsChanges,omitempty"`

	// Count of withdraw events
	WithdrawCount *int64 `json:"withdrawCount,omitempty"`
}

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	Asset *Asset `json:"asset,omitempty"`

	// Total current Asset balance
	AssetDepth *string `json:"assetDepth,omitempty"`

	// Amount of pool asset changed by fee and gas
	AssetEarned *string `json:"assetEarned,omitempty"`

	// Asset return on investment
	AssetROI *string `json:"assetROI,omitempty"`

	// Total Asset staked
	AssetStakedTotal *string `json:"assetStakedTotal,omitempty"`

	// Number of RUNE->ASSET transactions
	BuyAssetCount *string `json:"buyAssetCount,omitempty"`

	// Average sell Asset fee size for RUNE->ASSET (in ASSET)
	BuyFeeAverage *string `json:"buyFeeAverage,omitempty"`

	// Total fees (in Asset)
	BuyFeesTotal *string `json:"buyFeesTotal,omitempty"`

	// Average trade slip for RUNE->ASSET in %
	BuySlipAverage *string `json:"buySlipAverage,omitempty"`

	// Average Asset buy transaction size for (RUNE->ASSET) (in ASSET)
	BuyTxAverage *string `json:"buyTxAverage,omitempty"`

	// Total Asset buy volume (RUNE->ASSET) (in RUNE)
	BuyVolume *string `json:"buyVolume,omitempty"`

	// (1 + (poolEarned/poolDepth)) ^ 12 -1
	PoolAPY *string `json:"poolAPY,omitempty"`

	// Total depth of both sides (in RUNE)
	PoolDepth *string `json:"poolDepth,omitempty"`

	// (assetChanges * price) + runeEarned
	PoolEarned *string `json:"poolEarned,omitempty"`

	// Average pool fee
	PoolFeeAverage *string `json:"poolFeeAverage,omitempty"`

	// Total fees
	PoolFeesTotal *string `json:"poolFeesTotal,omitempty"`

	// Pool ROI (average of RUNE and Asset ROI)
	PoolROI *string `json:"poolROI,omitempty"`

	// Pool ROI over 12 months
	PoolROI12 *string `json:"poolROI12,omitempty"`

	// Average pool slip
	PoolSlipAverage *string `json:"poolSlipAverage,omitempty"`

	// Rune value staked Total
	PoolStakedTotal *string `json:"poolStakedTotal,omitempty"`

	// Average pool transaction
	PoolTxAverage *string `json:"poolTxAverage,omitempty"`

	// Total pool units outstanding
	PoolUnits *string `json:"poolUnits,omitempty"`

	// Two-way volume of all-time (in RUNE)
	PoolVolume *string `json:"poolVolume,omitempty"`

	// Two-way volume in 24hrs (in RUNE)
	PoolVolume24hr *string `json:"poolVolume24hr,omitempty"`

	// Price of Asset (in RUNE).
	Price *string `json:"price,omitempty"`

	// Total current Rune balance
	RuneDepth *string `json:"runeDepth,omitempty"`

	// Amount of pool rune changed by fee,reward and gas
	RuneEarned *string `json:"runeEarned,omitempty"`

	// RUNE return on investment
	RuneROI *string `json:"runeROI,omitempty"`

	// Total RUNE staked
	RuneStakedTotal *string `json:"runeStakedTotal,omitempty"`

	// Number of ASSET->RUNE transactions
	SellAssetCount *string `json:"sellAssetCount,omitempty"`

	// Average buy Asset fee size for ASSET->RUNE (in RUNE)
	SellFeeAverage *string `json:"sellFeeAverage,omitempty"`

	// Total fees (in RUNE)
	SellFeesTotal *string `json:"sellFeesTotal,omitempty"`

	// Average trade slip for ASSET->RUNE in %
	SellSlipAverage *string `json:"sellSlipAverage,omitempty"`

	// Average Asset sell transaction size (ASSET>RUNE) (in RUNE)
	SellTxAverage *string `json:"sellTxAverage,omitempty"`

	// Total Asset sell volume (ASSET>RUNE) (in RUNE).
	SellVolume *string `json:"sellVolume,omitempty"`

	// Number of stake transactions
	StakeTxCount *string `json:"stakeTxCount,omitempty"`

	// Number of unique stakers
	StakersCount *string `json:"stakersCount,omitempty"`

	// Number of stake & withdraw transactions
	StakingTxCount *string `json:"stakingTxCount,omitempty"`
	Status         *string `json:"status,omitempty"`

	// Number of unique swappers interacting with pool
	SwappersCount *string `json:"swappersCount,omitempty"`

	// Number of swapping transactions in the pool (buys and sells)
	SwappingTxCount *string `json:"swappingTxCount,omitempty"`

	// Number of withdraw transactions
	WithdrawTxCount *string `json:"withdrawTxCount,omitempty"`
}

// PoolEarningDetail defines model for PoolEarningDetail.
type PoolEarningDetail struct {

	// number of days that pool was enabled in past 30 days
	LastMonthActiveDays *string `json:"lastMonthActiveDays,omitempty"`

	// sum of asset donated to the pool by add event in past 30 days
	LastMonthAssetDonation *string `json:"lastMonthAssetDonation,omitempty"`

	// sum of buy fee in rune in past 30 days
	LastMonthBuyFee *string `json:"lastMonthBuyFee,omitempty"`

	// sum of gas paid from asset of this pool in past 30 days
	LastMonthGasPaid *string `json:"lastMonthGasPaid,omitempty"`

	// sum of gas reimbursed to rune of this pool in past 30 days
	LastMonthGasReimbursed *string `json:"lastMonthGasReimbursed,omitempty"`

	// sum of pool deficit in reward event in past 30 days
	LastMonthPoolDeficit *string `json:"lastMonthPoolDeficit,omitempty"`

	// sum of donation to this pool in past 30 days (lastMonthAssetDonation*price + lastMonthRuneDonation)
	LastMonthPoolDonation *string `json:"lastMonthPoolDonation,omitempty"`

	// sum of pool Earning in past 30 days (lastMonthPoolDonation + lastMonthPoolFee + lastMonthReward + lastMonthPoolDeficit + lastMonthGasReimbursed - (lastMonthGasPaid * price))
	LastMonthPoolEarning *string `json:"lastMonthPoolEarning,omitempty"`

	// sum of pool sell fee in rune in past 30 days (lastMonthBuyFee+lastMonthSellFee)
	LastMonthPoolFee *string `json:"lastMonthPoolFee,omitempty"`

	// sum of rewards in reward event in past 30 days
	LastMonthReward *string `json:"lastMonthReward,omitempty"`

	// sum of rune donated to the pool by add event in past 30 days
	LastMonthRuneDonation *string `json:"lastMonthRuneDonation,omitempty"`

	// sum of sell fee in rune in past 30 days
	LastMonthSellFee *string `json:"lastMonthSellFee,omitempty"`

	// lastMonthPoolEarning/poolDepth (lastMonthPoolEarning may extrapolate if pool was active less than 30 days)
	PeriodicRate *string `json:"periodicRate,omitempty"`

	// pool name
	Pool *string `json:"pool,omitempty"`

	// (1 + periodicRate ) ^ 12 -1
	PoolAPY *string `json:"poolAPY,omitempty"`

	// pool depth (2 * rune depth)
	PoolDepth *string `json:"poolDepth,omitempty"`

	// pool price in rune
	Price *string `json:"price,omitempty"`

	// sum of asset donated to the pool by add event
	TotalAssetDonation *string `json:"totalAssetDonation,omitempty"`

	// sum of buy fee in rune
	TotalBuyFee *string `json:"totalBuyFee,omitempty"`

	// sum of gas paid from asset of this pool
	TotalGasPaid *string `json:"totalGasPaid,omitempty"`

	// sum of gas reimbursed to rune of this pool
	TotalGasReimbursed *string `json:"totalGasReimbursed,omitempty"`

	// sum of pool deficit in reward event
	TotalPoolDeficit *string `json:"totalPoolDeficit,omitempty"`

	// sum of donation to this pool (totalAssetDonation*price + totalRuneDonation)
	TotalPoolDonation *string `json:"totalPoolDonation,omitempty"`

	// sum of pool Earning (totalPoolDonation+totalPoolFee + totalReward + totalPoolDeficit + totalGasReimbursed - (totalGasPaid * price))
	TotalPoolEarning *string `json:"totalPoolEarning,omitempty"`

	// sum of pool sell fee in rune (sellFee+buyFee)
	TotalPoolFee *string `json:"totalPoolFee,omitempty"`

	// sum of rewards in reward event
	TotalReward *string `json:"totalReward,omitempty"`

	// sum of rune donated to the pool by add event
	TotalRuneDonation *string `json:"totalRuneDonation,omitempty"`

	// sum of sell fee in rune
	TotalSellFee *string `json:"totalSellFee,omitempty"`
}

// Stakers defines model for Stakers.
type Stakers string

// StakersAddressData defines model for StakersAddressData.
type StakersAddressData struct {
	PoolsArray *[]Asset `json:"poolsArray,omitempty"`

	// Total value of earnings (in RUNE) across all pools.
	TotalEarned *string `json:"totalEarned,omitempty"`

	// Average of all pool ROIs.
	TotalROI *string `json:"totalROI,omitempty"`

	// Total staked (in RUNE) across all pools.
	TotalStaked *string `json:"totalStaked,omitempty"`
}

// StakersAssetData defines model for StakersAssetData.
type StakersAssetData struct {
	Asset *Asset `json:"asset,omitempty"`

	// Total of assets staked
	AssetStaked *string `json:"assetStaked,omitempty"`

	// Total of assets withdrawn
	AssetWithdrawn   *string `json:"assetWithdrawn,omitempty"`
	DateFirstStaked  *int64  `json:"dateFirstStaked,omitempty"`
	HeightLastStaked *int64  `json:"heightLastStaked,omitempty"`

	// Total of rune staked
	RuneStaked *string `json:"runeStaked,omitempty"`

	// Total of rune withdrawn
	RuneWithdrawn *string `json:"runeWithdrawn,omitempty"`

	// Represents ownership of a pool.
	Units *string `json:"units,omitempty"`
}

// StatsData defines model for StatsData.
type StatsData struct {

	// Daily active users (unique addresses interacting)
	DailyActiveUsers *string `json:"dailyActiveUsers,omitempty"`

	// Daily transactions
	DailyTx *string `json:"dailyTx,omitempty"`

	// Monthly active users
	MonthlyActiveUsers *string `json:"monthlyActiveUsers,omitempty"`

	// Monthly transactions
	MonthlyTx *string `json:"monthlyTx,omitempty"`

	// Number of active pools
	PoolCount *string `json:"poolCount,omitempty"`

	// Total buying transactions
	TotalAssetBuys *string `json:"totalAssetBuys,omitempty"`

	// Total selling transactions
	TotalAssetSells *string `json:"totalAssetSells,omitempty"`

	// Total RUNE balances
	TotalDepth *string `json:"totalDepth,omitempty"`

	// Total earned (in RUNE Value).
	TotalEarned *string `json:"totalEarned,omitempty"`

	// Total staking transactions
	TotalStakeTx *string `json:"totalStakeTx,omitempty"`

	// Total staked (in RUNE Value).
	TotalStaked *string `json:"totalStaked,omitempty"`

	// Total transactions
	TotalTx *string `json:"totalTx,omitempty"`

	// Total unique swappers & stakers
	TotalUsers *string `json:"totalUsers,omitempty"`

	// Total (in RUNE Value) of all assets swapped since start.
	TotalVolume *string `json:"totalVolume,omitempty"`

	// Total (in RUNE Value) of all assets swapped in 24hrs
	TotalVolume24hr *string `json:"totalVolume24hr,omitempty"`

	// Total withdrawing transactions
	TotalWithdrawTx *string `json:"totalWithdrawTx,omitempty"`
}

// ThorchainBooleanConstants defines model for ThorchainBooleanConstants.
type ThorchainBooleanConstants struct {
	StrictBondStakeRatio *bool `json:"StrictBondStakeRatio,omitempty"`
}

// ThorchainConstants defines model for ThorchainConstants.
type ThorchainConstants struct {
	BoolValues   *ThorchainBooleanConstants `json:"bool_values,omitempty"`
	Int64Values  *ThorchainInt64Constants   `json:"int_64_values,omitempty"`
	StringValues *ThorchainStringConstants  `json:"string_values,omitempty"`
}

// ThorchainEndpoint defines model for ThorchainEndpoint.
type ThorchainEndpoint struct {
	Address *string `json:"address,omitempty"`
	Chain   *string `json:"chain,omitempty"`
	PubKey  *string `json:"pub_key,omitempty"`
}

// ThorchainEndpoints defines model for ThorchainEndpoints.
type ThorchainEndpoints struct {
	Current *[]ThorchainEndpoint `json:"current,omitempty"`
}

// ThorchainInt64Constants defines model for ThorchainInt64Constants.
type ThorchainInt64Constants struct {
	BadValidatorRate                *int64 `json:"BadValidatorRate,omitempty"`
	BlocksPerYear                   *int64 `json:"BlocksPerYear,omitempty"`
	DesireValidatorSet              *int64 `json:"DesireValidatorSet,omitempty"`
	DoubleSignMaxAge                *int64 `json:"DoubleSignMaxAge,omitempty"`
	EmissionCurve                   *int64 `json:"EmissionCurve,omitempty"`
	FailKeySignSlashPoints          *int64 `json:"FailKeySignSlashPoints,omitempty"`
	FailKeygenSlashPoints           *int64 `json:"FailKeygenSlashPoints,omitempty"`
	FundMigrationInterval           *int64 `json:"FundMigrationInterval,omitempty"`
	JailTimeKeygen                  *int64 `json:"JailTimeKeygen,omitempty"`
	JailTimeKeysign                 *int64 `json:"JailTimeKeysign,omitempty"`
	LackOfObservationPenalty        *int64 `json:"LackOfObservationPenalty,omitempty"`
	MinimumBondInRune               *int64 `json:"MinimumBondInRune,omitempty"`
	MinimumNodesForBFT              *int64 `json:"MinimumNodesForBFT,omitempty"`
	MinimumNodesForYggdrasil        *int64 `json:"MinimumNodesForYggdrasil,omitempty"`
	NewPoolCycle                    *int64 `json:"NewPoolCycle,omitempty"`
	ObserveSlashPoints              *int64 `json:"ObserveSlashPoints,omitempty"`
	OldValidatorRate                *int64 `json:"OldValidatorRate,omitempty"`
	RotatePerBlockHeight            *int64 `json:"RotatePerBlockHeight,omitempty"`
	RotateRetryBlocks               *int64 `json:"RotateRetryBlocks,omitempty"`
	SigningTransactionPeriod        *int64 `json:"SigningTransactionPeriod,omitempty"`
	StakeLockUpBlocks               *int64 `json:"StakeLockUpBlocks,omitempty"`
	TransactionFee                  *int64 `json:"TransactionFee,omitempty"`
	ValidatorRotateInNumBeforeFull  *int64 `json:"ValidatorRotateInNumBeforeFull,omitempty"`
	ValidatorRotateNumAfterFull     *int64 `json:"ValidatorRotateNumAfterFull,omitempty"`
	ValidatorRotateOutNumBeforeFull *int64 `json:"ValidatorRotateOutNumBeforeFull,omitempty"`
	WhiteListGasAsset               *int64 `json:"WhiteListGasAsset,omitempty"`
	YggFundLimit                    *int64 `json:"YggFundLimit,omitempty"`
}

// ThorchainLastblock defines model for ThorchainLastblock.
type ThorchainLastblock struct {
	Chain          *string `json:"chain,omitempty"`
	Lastobservedin *int64  `json:"lastobservedin,omitempty"`
	Lastsignedout  *int64  `json:"lastsignedout,omitempty"`
	Thorchain      *int64  `json:"thorchain,omitempty"`
}

// ThorchainStringConstants defines model for ThorchainStringConstants.
type ThorchainStringConstants struct {
	DefaultPoolStatus *string `json:"DefaultPoolStatus,omitempty"`
}

// TotalVolChanges defines model for TotalVolChanges.
type TotalVolChanges struct {

	// Sum of "rune_amount" of buy swap events
	BuyVolume *string `json:"buyVolume,omitempty"`

	// Sum of "rune_amount" of sell swap events
	SellVolume *string `json:"sellVolume,omitempty"`

	// Determining end of current time bucket in unix timestamp
	Time *int64 `json:"time,omitempty"`

	// buyVolume + sellVolume
	TotalVolume *string `json:"totalVolume,omitempty"`
}

// TxDetails defines model for TxDetails.
type TxDetails struct {
	Date    *int64  `json:"date,omitempty"`
	Events  *Event  `json:"events,omitempty"`
	Gas     *Gas    `json:"gas,omitempty"`
	Height  *string `json:"height,omitempty"`
	In      *Tx     `json:"in,omitempty"`
	Options *Option `json:"options,omitempty"`
	Out     *[]Tx   `json:"out,omitempty"`
	Pool    *Asset  `json:"pool,omitempty"`
	Status  *string `json:"status,omitempty"`
	Type    *string `json:"type,omitempty"`
}

// Asset defines model for asset.
type Asset string

// Coin defines model for coin.
type Coin struct {
	Amount *string `json:"amount,omitempty"`
	Asset  *Asset  `json:"asset,omitempty"`
}

// Coins defines model for coins.
type Coins []Coin

// Event defines model for event.
type Event struct {
	Fee        *string `json:"fee,omitempty"`
	Slip       *string `json:"slip,omitempty"`
	StakeUnits *string `json:"stakeUnits,omitempty"`
}

// Gas defines model for gas.
type Gas struct {
	Amount *string `json:"amount,omitempty"`
	Asset  *Asset  `json:"asset,omitempty"`
}

// Option defines model for option.
type Option struct {
	Asymmetry           *string `json:"asymmetry,omitempty"`
	PriceTarget         *string `json:"priceTarget,omitempty"`
	WithdrawBasisPoints *string `json:"withdrawBasisPoints,omitempty"`
}

// Tx defines model for tx.
type Tx struct {
	Address *string `json:"address,omitempty"`
	Coins   *Coins  `json:"coins,omitempty"`
	Memo    *string `json:"memo,omitempty"`
	TxID    *string `json:"txID,omitempty"`
}

// AssetsDetailedResponse defines model for AssetsDetailedResponse.
type AssetsDetailedResponse []AssetDetail

// GeneralErrorResponse defines model for GeneralErrorResponse.
type GeneralErrorResponse Error

// GetPoolAggChangesResponse defines model for GetPoolAggChangesResponse.
type GetPoolAggChangesResponse []PoolAggChanges

// GetPoolEarningDetailResponse defines model for GetPoolEarningDetailResponse.
type GetPoolEarningDetailResponse PoolEarningDetail

// HealthResponse defines model for HealthResponse.
type HealthResponse struct {
	CatchingUp    *bool  `json:"catching_up,omitempty"`
	Database      *bool  `json:"database,omitempty"`
	ScannerHeight *int64 `json:"scannerHeight,omitempty"`
}

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse NetworkInfo

// NodeKeyResponse defines model for NodeKeyResponse.
type NodeKeyResponse []NodeKey

// PoolsDetailedResponse defines model for PoolsDetailedResponse.
type PoolsDetailedResponse []PoolDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse []Asset

// StakersAddressDataResponse defines model for StakersAddressDataResponse.
type StakersAddressDataResponse StakersAddressData

// StakersAssetDataResponse defines model for StakersAssetDataResponse.
type StakersAssetDataResponse []StakersAssetData

// StakersResponse defines model for StakersResponse.
type StakersResponse []Stakers

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// ThorchainConstantsResponse defines model for ThorchainConstantsResponse.
type ThorchainConstantsResponse ThorchainConstants

// ThorchainEndpointsResponse defines model for ThorchainEndpointsResponse.
type ThorchainEndpointsResponse ThorchainEndpoints

// ThorchainLastblockResponse defines model for ThorchainLastblockResponse.
type ThorchainLastblockResponse ThorchainLastblock

// TotalVolChangesResponse defines model for TotalVolChangesResponse.
type TotalVolChangesResponse []TotalVolChanges

// TxsResponse defines model for TxsResponse.
type TxsResponse struct {
	Count *int64       `json:"count,omitempty"`
	Txs   *[]TxDetails `json:"txs,omitempty"`
}

// GetAssetInfoParams defines parameters for GetAssetInfo.
type GetAssetInfoParams struct {

	// One or more comma separated unique asset (CHAIN.SYMBOL)
	Asset string `json:"asset"`
}

// GetPoolAggChangesParams defines parameters for GetPoolAggChanges.
type GetPoolAggChangesParams struct {

	// Pool asset name
	Pool string `json:"pool"`

	// Interval of calculations
	Interval string `json:"interval"`

	// Start time of the query as unix timestamp
	From int64 `json:"from"`

	// End time of the query as unix timestamp
	To int64 `json:"to"`
}

// GetTotalVolChangesParams defines parameters for GetTotalVolChanges.
type GetTotalVolChangesParams struct {

	// Interval of calculations
	Interval string `json:"interval"`

	// Start time of the query as unix timestamp
	From int64 `json:"from"`

	// End time of the query as unix timestamp
	To int64 `json:"to"`
}

// GetPoolsDetailsParams defines parameters for GetPoolsDetails.
type GetPoolsDetailsParams struct {

	// Specifies the returning view
	View *string `json:"view,omitempty"`

	// One or more comma separated unique asset (CHAIN.SYMBOL)
	Asset string `json:"asset"`
}

// GetEarningDetailParams defines parameters for GetEarningDetail.
type GetEarningDetailParams struct {

	// Pool asset name
	Pool string `json:"pool"`
}

// GetStakersAddressAndAssetDataParams defines parameters for GetStakersAddressAndAssetData.
type GetStakersAddressAndAssetDataParams struct {

	// One or more comma separated unique asset (CHAIN.SYMBOL)
	Asset string `json:"asset"`
}

// GetTxDetailsParams defines parameters for GetTxDetails.
type GetTxDetailsParams struct {

	// Address of sender or recipient of any in/out tx in event
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx in event
	Txid *string `json:"txid,omitempty"`

	// Any asset used in event (CHAIN.SYMBOL)
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of event
	Type *string `json:"type,omitempty"`

	// pagination offset
	Offset int64 `json:"offset"`

	// pagination limit
	Limit int64 `json:"limit"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get Asset Information
	// (GET /v1/assets)
	GetAssetInfo(ctx echo.Context, params GetAssetInfoParams) error
	// Get Documents
	// (GET /v1/doc)
	GetDocs(ctx echo.Context) error
	// Get Health
	// (GET /v1/health)
	GetHealth(ctx echo.Context) error
	// Get Pool Aggregated Changes
	// (GET /v1/history/pools)
	GetPoolAggChanges(ctx echo.Context, params GetPoolAggChangesParams) error
	// Get Total Volume Changes
	// (GET /v1/history/total_volume)
	GetTotalVolChanges(ctx echo.Context, params GetTotalVolChangesParams) error
	// Get Network Data
	// (GET /v1/network)
	GetNetworkData(ctx echo.Context) error
	// Get Node public keys
	// (GET /v1/nodes)
	GetNodes(ctx echo.Context) error
	// Get Asset Pools
	// (GET /v1/pools)
	GetPools(ctx echo.Context) error
	// Get Pools Details
	// (GET /v1/pools/detail)
	GetPoolsDetails(ctx echo.Context, params GetPoolsDetailsParams) error
	// Get Pool Earning Detail
	// (GET /v1/pools/earning)
	GetEarningDetail(ctx echo.Context, params GetEarningDetailParams) error
	// Get Stakers
	// (GET /v1/stakers)
	GetStakersData(ctx echo.Context) error
	// Get Staker Data
	// (GET /v1/stakers/{address})
	GetStakersAddressData(ctx echo.Context, address string) error
	// Get Staker Pool Data
	// (GET /v1/stakers/{address}/pools)
	GetStakersAddressAndAssetData(ctx echo.Context, address string, params GetStakersAddressAndAssetDataParams) error
	// Get Global Stats
	// (GET /v1/stats)
	GetStats(ctx echo.Context) error
	// Get Swagger
	// (GET /v1/swagger.json)
	GetSwagger(ctx echo.Context) error
	// Get the Proxied THORChain Constants
	// (GET /v1/thorchain/constants)
	GetThorchainProxiedConstants(ctx echo.Context) error
	// Get the Proxied THORChain Lastblock
	// (GET /v1/thorchain/lastblock)
	GetThorchainProxiedLastblock(ctx echo.Context) error
	// Get the Proxied Pool Addresses
	// (GET /v1/thorchain/pool_addresses)
	GetThorchainProxiedEndpoints(ctx echo.Context) error
	// Get details of a tx by address, asset or tx-id
	// (GET /v1/txs)
	GetTxDetails(ctx echo.Context, params GetTxDetailsParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetAssetInfo converts echo context to params.
func (w *ServerInterfaceWrapper) GetAssetInfo(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAssetInfoParams
	// ------------- Required query parameter "asset" -------------

	err = runtime.BindQueryParameter("form", true, true, "asset", ctx.QueryParams(), &params.Asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAssetInfo(ctx, params)
	return err
}

// GetDocs converts echo context to params.
func (w *ServerInterfaceWrapper) GetDocs(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDocs(ctx)
	return err
}

// GetHealth converts echo context to params.
func (w *ServerInterfaceWrapper) GetHealth(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetHealth(ctx)
	return err
}

// GetPoolAggChanges converts echo context to params.
func (w *ServerInterfaceWrapper) GetPoolAggChanges(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPoolAggChangesParams
	// ------------- Required query parameter "pool" -------------

	err = runtime.BindQueryParameter("form", true, true, "pool", ctx.QueryParams(), &params.Pool)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pool: %s", err))
	}

	// ------------- Required query parameter "interval" -------------

	err = runtime.BindQueryParameter("form", true, true, "interval", ctx.QueryParams(), &params.Interval)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter interval: %s", err))
	}

	// ------------- Required query parameter "from" -------------

	err = runtime.BindQueryParameter("form", true, true, "from", ctx.QueryParams(), &params.From)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter from: %s", err))
	}

	// ------------- Required query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, true, "to", ctx.QueryParams(), &params.To)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter to: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPoolAggChanges(ctx, params)
	return err
}

// GetTotalVolChanges converts echo context to params.
func (w *ServerInterfaceWrapper) GetTotalVolChanges(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTotalVolChangesParams
	// ------------- Required query parameter "interval" -------------

	err = runtime.BindQueryParameter("form", true, true, "interval", ctx.QueryParams(), &params.Interval)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter interval: %s", err))
	}

	// ------------- Required query parameter "from" -------------

	err = runtime.BindQueryParameter("form", true, true, "from", ctx.QueryParams(), &params.From)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter from: %s", err))
	}

	// ------------- Required query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, true, "to", ctx.QueryParams(), &params.To)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter to: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTotalVolChanges(ctx, params)
	return err
}

// GetNetworkData converts echo context to params.
func (w *ServerInterfaceWrapper) GetNetworkData(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNetworkData(ctx)
	return err
}

// GetNodes converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodes(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodes(ctx)
	return err
}

// GetPools converts echo context to params.
func (w *ServerInterfaceWrapper) GetPools(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPools(ctx)
	return err
}

// GetPoolsDetails converts echo context to params.
func (w *ServerInterfaceWrapper) GetPoolsDetails(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPoolsDetailsParams
	// ------------- Optional query parameter "view" -------------

	err = runtime.BindQueryParameter("form", true, false, "view", ctx.QueryParams(), &params.View)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter view: %s", err))
	}

	// ------------- Required query parameter "asset" -------------

	err = runtime.BindQueryParameter("form", true, true, "asset", ctx.QueryParams(), &params.Asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPoolsDetails(ctx, params)
	return err
}

// GetEarningDetail converts echo context to params.
func (w *ServerInterfaceWrapper) GetEarningDetail(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetEarningDetailParams
	// ------------- Required query parameter "pool" -------------

	err = runtime.BindQueryParameter("form", true, true, "pool", ctx.QueryParams(), &params.Pool)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pool: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetEarningDetail(ctx, params)
	return err
}

// GetStakersData converts echo context to params.
func (w *ServerInterfaceWrapper) GetStakersData(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStakersData(ctx)
	return err
}

// GetStakersAddressData converts echo context to params.
func (w *ServerInterfaceWrapper) GetStakersAddressData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStakersAddressData(ctx, address)
	return err
}

// GetStakersAddressAndAssetData converts echo context to params.
func (w *ServerInterfaceWrapper) GetStakersAddressAndAssetData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetStakersAddressAndAssetDataParams
	// ------------- Required query parameter "asset" -------------

	err = runtime.BindQueryParameter("form", true, true, "asset", ctx.QueryParams(), &params.Asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStakersAddressAndAssetData(ctx, address, params)
	return err
}

// GetStats converts echo context to params.
func (w *ServerInterfaceWrapper) GetStats(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStats(ctx)
	return err
}

// GetSwagger converts echo context to params.
func (w *ServerInterfaceWrapper) GetSwagger(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSwagger(ctx)
	return err
}

// GetThorchainProxiedConstants converts echo context to params.
func (w *ServerInterfaceWrapper) GetThorchainProxiedConstants(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetThorchainProxiedConstants(ctx)
	return err
}

// GetThorchainProxiedLastblock converts echo context to params.
func (w *ServerInterfaceWrapper) GetThorchainProxiedLastblock(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetThorchainProxiedLastblock(ctx)
	return err
}

// GetThorchainProxiedEndpoints converts echo context to params.
func (w *ServerInterfaceWrapper) GetThorchainProxiedEndpoints(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetThorchainProxiedEndpoints(ctx)
	return err
}

// GetTxDetails converts echo context to params.
func (w *ServerInterfaceWrapper) GetTxDetails(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTxDetailsParams
	// ------------- Optional query parameter "address" -------------

	err = runtime.BindQueryParameter("form", true, false, "address", ctx.QueryParams(), &params.Address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Optional query parameter "txid" -------------

	err = runtime.BindQueryParameter("form", true, false, "txid", ctx.QueryParams(), &params.Txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	// ------------- Optional query parameter "asset" -------------

	err = runtime.BindQueryParameter("form", true, false, "asset", ctx.QueryParams(), &params.Asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// ------------- Optional query parameter "type" -------------

	err = runtime.BindQueryParameter("form", true, false, "type", ctx.QueryParams(), &params.Type)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter type: %s", err))
	}

	// ------------- Required query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, true, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Required query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, true, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTxDetails(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/v1/assets", wrapper.GetAssetInfo)
	router.GET("/v1/doc", wrapper.GetDocs)
	router.GET("/v1/health", wrapper.GetHealth)
	router.GET("/v1/history/pools", wrapper.GetPoolAggChanges)
	router.GET("/v1/history/total_volume", wrapper.GetTotalVolChanges)
	router.GET("/v1/network", wrapper.GetNetworkData)
	router.GET("/v1/nodes", wrapper.GetNodes)
	router.GET("/v1/pools", wrapper.GetPools)
	router.GET("/v1/pools/detail", wrapper.GetPoolsDetails)
	router.GET("/v1/pools/earning", wrapper.GetEarningDetail)
	router.GET("/v1/stakers", wrapper.GetStakersData)
	router.GET("/v1/stakers/:address", wrapper.GetStakersAddressData)
	router.GET("/v1/stakers/:address/pools", wrapper.GetStakersAddressAndAssetData)
	router.GET("/v1/stats", wrapper.GetStats)
	router.GET("/v1/swagger.json", wrapper.GetSwagger)
	router.GET("/v1/thorchain/constants", wrapper.GetThorchainProxiedConstants)
	router.GET("/v1/thorchain/lastblock", wrapper.GetThorchainProxiedLastblock)
	router.GET("/v1/thorchain/pool_addresses", wrapper.GetThorchainProxiedEndpoints)
	router.GET("/v1/txs", wrapper.GetTxDetails)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+x963LbuJLwq6D4fVtlTxRZdmIn419rxc7EexLbZTszNTWZTUFkS0JMAgwA2tKZymvt",
	"C+yLbeHCi0SAhGT7bO2e/WeLYN/QNzQa4F9RzLKcUaBSRMd/RRxEzqgA/c+JECDFKUhMUkiu7SP1JGZU",
	"ApXqT5znKYmxJIzufROMqt9EPIcMq7+IhEzD+v8cptFx9P/2anx7ZpjY03gMmujHIJLLHKLjCHOOl9GP",
	"Hz8GUQIi5iRXOKLjiE2+QSyRogETSugMJZZEhBUkROiU8UyTpOD9AhQ4Ts84Z3wrJrpo11BdVIJ6gDIQ",
	"As/AkCGvGEtPZrN3c0xnIJ5PoKt4QmT6C0h0DbLgFGGK9DDEpihnLEWxATNsMHGGuRK8mbMnl2kLw2Mo",
	"/gA4lfOtaMw5y4FLYqwhxjKeEzr7WuTqXyvRCWMpYK1nCZZ4gg2O9lMRY0qBfwAym2vcRkej44hQefQ6",
	"quaIUAkzUDpV/WQ03iUFIwGhRDDXjCIhsSyEEsUnkswwTxTyC5APjN89+UxZuOd0ynqoaxutfRcpsWka",
	"WQJ/g+XzWYVFEGIOGxGu1PUf4CUVmsc4SW0ZimY0ZRzJOZbGXVYsPB/pFZ4+qisz1m9oz3Uj8R1wcZIk",
	"HIQ4xRI/uRa3UXTTlqZIzkELVOi/hAaAiNB/KWET2qRdx7dtKQ+S8Dqm7VSkpL7SEoxEDjGZkrjkEdOk",
	"VhuL9dnZ2kx17PSI+t0biaV4DrWRXm1pC3eWsglO0fjs6uYB55X3uJ0zHs8xoe8YFRLTZyC0jaI/oFr6",
	"jasAlHO2IJAofgwEBDTJGaFyuMLEmf31GZmoUGzNhDbcr9iYO/hY+YiFnKQsvns+VioUW7OSlhDWmGAS",
	"p7+y9NkzzTVEj0g1pYKE7llaZLCSwN0uxFNkb6ygYWnXIJILES6AhYnJLtY3y99qSXBMBY7VCKGhWFzV",
	"ksxmAS0ejV8OjcUJlvCOA5aQBMol5ySG64I2M1whOaEzF7ODaGys5wHzRLSpndRPHfAG0YTRpOOxdu/e",
	"505yGE0+geQkdlCD74HjGZzEktyDGql+XJ2rEzMEKcJ0oNFjEWUJiFpeNYUW5I3ENJksw2AKM9gPNMML",
	"khVZF52f8ILQIgum04LspPOTGbMBnZAQTDvJ1CPCqdTDu4lchdhPI6G9slSS3ESWBmQ3mWswe+nUrrGL",
	"Su2Fg2nU4DopXIXXQ5/L1ExVpGVkUP7cBsHhe0G4ckV/2GF/OuA215ttE64kJByGVnpXI0dkhg1qJ98W",
	"04ozH1jwahH5rowlqyguimwCvIHjYlVgDU86WfOMXQ57xYtav9hwY52vNobaNwmdnVz93iZ+Zx+9QDu1",
	"z0U/IU2kuAL+iVE531vTwt1d9O9o/wC93HfpmEV1fXnulG1KvhckIXLZQUvDwXuIOYVczhsar/O6broo",
	"LOS7ecFpXYdpjVFgNJ86s9CTnbAH6jCTOSAOmc3vJcmgqkDh6n20Q6ilfjcaBIVZxtKbOebwHsfSaS8m",
	"+nXIV9TW3WUL1glsYQwWQZA1lFj85qBn8xoE8HvweaMUphIRisphHY7tDrw+TWUvyAxRwHTdI8ylldWj",
	"tlNLDg4P939uY7QPUF5MUhKjO1i6iBYQ5weHR3f7bQDVo04QLmLXCsDuTLHx1CUqm4MrMZmyeqLNDUsk",
	"50QYdZ8U8R1IZ/JjEtVcztvwa7vVcDVEUAsY9VtccA5UBsHvnmsDXZgxPhC/ETlPOHaadwPKQzXM5eyK",
	"pccI9M+Kq0mxROIB5yLMBUyK5a96JdQGeVNkCuCXiBcUvuJMYfgSNXEguNfbOQ5KZ1hcQ54CJWLeIbis",
	"JFvhGKAckwRNlnqWqC1+SoYoFJLjlPwd0BcF+bOA5EtU6o0HvRrUj9cIvRB6SwfNsNAL3wp3Y4GEdmA4",
	"G6LxxXg4vhgP0Nnth+HZ7YddF3rlWH1irSSOXiABaTnOBUWtghxOVZOsHyqTUZLbTrN5tabxTbzJBb5E",
	"dqJLdE5gBYVwO9dEb2Tm6o0+K3+EKAoK3TauYftNXD3utXANo9PAlUL0Wbgas4mJN5RsAxuvsHQYuRZH",
	"L7lqUA0kpCpCXKSeggSemQzIP7lKuQpKFvo3IXGWh+EsKJEiXH916qXfsemj2CvnVTg9Qvm0T1rluA0E",
	"5gvLT1O86QqvVix2FoxfmuAU0xi8YfAMc+qyspPKJZu0VgMzEtchYQqgtwRmWHhh2yTV5S65qQMyigi9",
	"ByEzoH3RXnPnY/qkJ+RPiqUe0puzXn++OHv5pRiNXsHJzc3Z7WpRzg35PYAt5/jrPNp+DZVKdEIFTxXa",
	"WvjUqkH/tevHJjplMQUQBoxC5wNzk5K8l2rJcQJIpCR3E0so+hcP/NtFL3SrocWyKeRaNDvr6Hb7heNz",
	"rE0tUQhtudmDQv3qTSQ6Vq657V+AZC/XFp/LefeytBrmIzkpg+mEyTkSJLFz20miz6h3muk/+skkLbvo",
	"hY6E9iUPyBAd155iCtABo19zfS87nYnyq+j68hzt2JpracLaN5npvr483+0Aun/QAZbdA1eTlzEq517S",
	"gkxJC0dZkhdKl5fTy9d7nBZl0oPMQA+sAOPT9DTszgfqs4qqvglrxF1WSF0bUK9umILfPrCXD7gySrOV",
	"+1JnEb2qbmAevJ7zXriEIjWuz37cWf6Vzu/Z1CpVBWK4YXK8GqP1tHaE6IZd9kVoncyuBuiBWTB0xWn1",
	"ltOytBGFRuk6Xe80bw3TH6NViAwL0tpVW7etgfYFaQU6xIOp0OAI0i18nRpkkQUG6U4w2wTpFrG+IK0Q",
	"BEdpnb+0wvSORlbj2u1nKSRCa2RliPajGHoXQbeLXh0y66BexTG9JL3QCkq+F3XrycBbuA2mTHF8cFQv",
	"QAIolYWpS9Iii47/iCaMSSE5znNtb0DxJNV/JUSYP/90wXlQL2zAsh2P1AKIKwLpTFOt3VLkwxAoCjt0",
	"tfJDaNWGhXYmxVJoD6eUpnuxF4AwUNy+Nd5q82prqZdiIfU2htlNOcVLR2SlFTEJXgrTr6dZfcAC2UnU",
	"a14sJHo10qNcXNfI9JKRUdMX3S42m5qDLfWqYZAgyWoRT5YIJ4lZAW+EeKwXK16MytkqN1vWnzYB/QsW",
	"V5gkXtgzLEz1cspZZnljU1PZ0kxtiOwaSDYpuLOG2UDJq2FKgpqrrbGamsGUxER6cZrWTjNIy9EE/M2n",
	"SiPrU5HEDjDa4eEJ7bgV7ydTIX2Bqscq+Smf7vZSZ02rWxR2UAdNTUabxFyZ9ckKfUaYa4PslDR/XtEP",
	"9LKBzapptdTqZ7PLYMwSQsXGDrNpYDf296L6/8YkJt1EXHuq0JYGW4N+lLI1J96PSJekn9IdWfa9GPsk",
	"61wtACcsIfE1lg7ALgWuKwNrWlnqboaXCBYqbrMUS0BkWrt/u9+dgtCBgZakeZdHbZo0LIoz2Ly+0WQW",
	"bVvWsC5L83+AfmpsPWyyHNNQVvZc/P0zTxj+vEg2C3VeMI8Na12AnyaEeTE8Nlx1A94uNO20FaAKQ6b1",
	"oC8EVRRsFH52WoS/qH4xQcY2PtgAsy7A8qdWYGkqSXdQaeLbMKDs2AXsC1Ns9oPfLlT4wT1ZWPD3iGwY",
	"AsIy//KwQns7zx6dMA3nag22wFmeqrflhE72p98O0u/f3ib3/DAvsmk8j99QmU6/Jwf3R39PFt8fvsHD",
	"9NDFjePkSmu1obuidMvPY8/rWOn5KlFm6W6qk2yKwFhBo7yBcMyZEPqEhqZq6FcC555RXdwtQaDry/MO",
	"MN2bx7aEuhF9HRNfH755is29btKrI1KP7m+pIXVugSdYwnvCRYOugP3bue6y+4g3fK1/3790AY/c+i/B",
	"dLJeuEvf15BzELoBgz1Q4GJOci1NrTvhqiM9dptgki5NheCzcPqVUzWiTAYLNQbt2HJMfbilUY/ZdU8s",
	"SZe3Cx/0vnqT3hLpofOTGbNCaQcsFzEliD5ylOh7qzvNdtHufHFcLL2bHpNiuV6S6gamoo4Xmgo5weA6",
	"NxV0sdduJvhBdDtx0E8rz4h+VU59t8fPuuatdrTBzG3ks3sp8xMVRIxHow2E9dKnrdV2VH+lPS7VUfpe",
	"46wMdqW317gSJAiNtffjctiDyLMptgGycsfMi+i3qrLqQ1Q62H4tcHnJ6sDc2Jynr88xtrzmjeQklmNG",
	"E61H1yqNdB3I70TTAV8B+KpzHBF8zK9F9Y+BinZfj15vCulchcwVOEZsm8K50W81j4N2iaM8cenIa2xK",
	"62oZ16+6G+yLydc700q9yeTXBz/bp/vMRmr4qb0WawGn9xqkrM1Di54xTn7FKUmwZLysCQXkPePykMPv",
	"gHngO6cgCIcK2w2EnnI8ZcUkhRsyo5/w4mQWSuNZRoQgjL4rbLN+wDvvMUn/BkuF6ybFYn5VTWP4yzPY",
	"5t2CJp/IjOvF5LnKhO7NXmzAu/+GSXpLMjC4N39JkFnoWx9xfHc5vZwIRZ8i9QooTuUy8PVP5tCZcnrn",
	"tDyfGf6ePpfxnvHx+9vtXvx9Nks4FiRUshfwcKXytGWchpJqZAOba8BlupUlXjOJJVwB1ya5waUt5avX",
	"IPnS2HPge8o6CJ3d1tHxShdaQ19X4e4ji+8+5xuhbeCzJZGAl2qRambP6UWRjWHKOLwv0nQ7IBdFdjKV",
	"wLeHcFnIbej4bU4kfCRC/oLNGj7wvd9nM+VfPpKMbHuhj+u6AUd080bSFAvJjGkkJNTbqJeUc4KEFcFH",
	"4ksyH8/oeu7RYvcUprhI9T1TN1U3Q0iisHYXQTt3e6ZTNc/Xyv/f0XPfuUYJPSbjnJ/qqgRHrSPYM1th",
	"9SR4pv5rjhz1jVVDqlqV08yM2nfBkAs1juVmUdMz2AzTLxThOatBsV6RLXf3ggqL7eYgUcSxqUlzmBbU",
	"3Qtkfmi89ICVLul1bjSIClr+ZUv90UAtDCJLnJmDCsEgSkziqYC0sf0oC5fuNQUzU7G2CsnKio+7Bhoo",
	"H5fOKoThl4Fo8hyTZLSxRfcUwH16NyW5/86LqhM3wOSs9v/DxGU121H/XmaZyojc60FOYrjFfOaZ9bJ4",
	"MMaCiDr7C+BfLjZcs5bT3TfLwlxJkTH3aenF+WkQhT+0czGXGeiromItAch031iUwL341yr0Dhk3FdvW",
	"IXR70x+6MseET67O0fcCOAGBbj9cXr9Tb5ubu+gSaVgCpYTeQYLuCdabZ2My5f/5H0LqYTmHHHNdPK5u",
	"0kR4wgq5fgZ0AogDTnQd+h6TFE9S0ytrTyzrWu8QKSIVVTnmAsRKA6lp4DA3jnGWrREsJFN0yDlk+iCy",
	"DmYvheGtvHBREZLpNk71MIEcaKKAljIALJbDSkgJA4Eok2jO0gTFnEgS47TJ6hDdsqpubpoYy1u7zHkC",
	"BQcWA1tzF3NWpInGtmyQnxAOsUyXuj5HpN7ua09UNIjugQszl6Ph4XDf2BFQnJPoOHo1HA1HypViOdea",
	"uXe/v2dvxzv+K7Im08oPzHWo7elrXOimgQxReQMRUFbM5iuvSIYSIvIULxEui53lDavoHnPCCqFlYIQ1",
	"xTGIASI0TotE5SYpliDsmVglBWWFZiWemHugdLatL/NQDHKcqcRGRMd/rHN0SQExjjLGAcUsyzASSkP1",
	"7u8KYTvvPpycXwxvfv80vvy429xq/SMaX4yHt5efLscv98/2o4H5/93JxcvR/msViVRoifQsRoNIt8Yc",
	"W4fYvJ5E8gIGjWum1m38z8HqJboHo5HPoVTj9jw37f4YRK9DXnfecKtvjiqyDCuvq2/dMl3V583bcX8M",
	"tEIlLPZq080Dns2A71mdRK+Go0qJjJ7MNHo1FwmLi0wR55zuUxabRKAtnrVteA/KVUzCweJpSYAyOjxT",
	"uhSVvxmW/yx5NveletnuvAJUeUF732rJjWmP0W7Oyby5hzbaRjvWrrBtc21hV5wR5TaXe2aDq49BM1r7",
	"QDybcZgZ+ZpUveTKTri9PM/J4NqdEz0WfVUfJ7VdaHVTxLqhugzTppbhdjlYp6AsB+rlE07jIsXlloQL",
	"ISmrh11Iywz5MCM0GkRzVnCV8GIF5wHgLrKbnNEgWgLmrvx34Oge4bK6XUZNhok0WLSXdy7CVVTtJDpg",
	"Ob9O0xlNHkGRZI+kZysf679/u21QWjtPamuorjdcszC9Vv56Xy2WOw3NdcNhs5dFt0jVhtZQuJatrZc6",
	"eozt/1T9n0vVfdd/thXd7M7aks66lts8f7sQuXJLtkOF7fNT83hzHtevNG/zVlJgr+i1POlLqLbjiCXQ",
	"uIlJOLmyd1xtwc/a9ecOftbxlzyFxfnqitEGS+VdyeWGf5HnjCuHx2i15CnbZJwBfzteV68bf5Ys1xC3",
	"IqG9pDqPtfnkNy/9rpKj1YvUvVmRKOuePW76xvp+c6m4OXWrcN8TePD4F/uo9iiJKZ4rZ1ikqT7vZ48B",
	"1h1BguhEa2CGhDjm/+3rL/cV/u68QKDqxt8V7YK6NbxTvew4xEHZminL5MsNEu3V04WPzLPHF+OnyrAf",
	"k5W5PyjiSczK/vrq4yBmGkTdf72xI9ROsOqZ1Fffp2nZyeWcBdv0u3X8Wr87v81rdfn9Kn97f1lCfzzK",
	"5Xd/vaCL5Wa3eY/2fW6eh3Y2wE/oZP/bYjo/mL09/P7qfiST74dHUwr3i6NFvJAxnUuRxcXR66xU0xzr",
	"pLJ0EBXMZ1bUju9Q+KZuNfNoTV943A74UsOq72h8rMHrRlYZOqFJ3b/+P3JW/+mClvfrIl591N5zXSnl",
	"lipov2ehIVQe03gVHdNWL4rwOlEptnWfsst5/mKoMwgqbk1dcVh+LKC7LlZk2GxCZDieE2p2OvQGx3p9",
	"cqUc6mbUvBFU/dwWsWveK7RlMfRm5Y2qGFptMu3FzcaMbq2ovkJRfnui8kTtz4TYo4ooZTFWAYhxtRJz",
	"1jZKUq4M9LpTZKulsP/zKm1xKdIt1sZGzmqb7Kq00mbXzrbSan/EY3tp1W1Ej5JW++MnodJqftNkXVrK",
	"O9TfXXmMyFYhPYHc6ubiR8mt/f2bbrmZQmMlkUpkiz7peLNYu59arTjbnC8Cl6OWLNOrRBPgKppyiElO",
	"wF7TS5eI0D29L7xAhFbHLrc94OiMpo5cYIpTsWG1/zSQ4IP3Rwevj169OT3bf/Pz0dHh+OTVq4OD8duj",
	"16fjn9+/Go1G++9PX70Zvz4bnR4cnIzGR2fvzo5ODsejN29PT8avfYXABUkeycIJXTYvRi6p70hfgnZS",
	"2tnK5qQFpFoKhtallsg7GopMG5Gnc8gpZkXp43jJ8YzYU+RsOjWycaGqHm5Q3rWfB4mORyGl5wYlqW4y",
	"dRNSPtuEDvM5l+j4cNRD1Hb150WX/2tsLWJlhubItrLxQXmXAUdy8ZIkpkFGt7daD1XwVGVIUubHe3v7",
	"B2+Go+FouH/8dvR2FCkB1s+FY8CfP/4rAAD//58ZHcvwdgAA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}

