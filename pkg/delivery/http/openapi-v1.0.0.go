// Package http provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package http

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// AssetDetail defines model for AssetDetail.
type AssetDetail struct {
	Asset       *Asset  `json:"asset,omitempty"`
	DateCreated *int64  `json:"dateCreated,omitempty"`
	PriceRune   *string `json:"priceRune,omitempty"`
}

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward *string `json:"blockReward,omitempty"`
	BondReward  *string `json:"bondReward,omitempty"`
	StakeReward *string `json:"stakeReward,omitempty"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {

	// Average bond of active nodes
	AverageActiveBond *string `json:"averageActiveBond,omitempty"`

	// Average bond of standby nodes
	AverageStandbyBond *string `json:"averageStandbyBond,omitempty"`

	// Maxinum bond of active nodes
	MaximumActiveBond *string `json:"maximumActiveBond,omitempty"`

	// Maximum bond of standby nodes
	MaximumStandbyBond *string `json:"maximumStandbyBond,omitempty"`

	// Median bond of active nodes
	MedianActiveBond *string `json:"medianActiveBond,omitempty"`

	// Median bond of standby nodes
	MedianStandbyBond *string `json:"medianStandbyBond,omitempty"`

	// Minumum bond of active nodes
	MinimumActiveBond *string `json:"minimumActiveBond,omitempty"`

	// Minumum bond of standby nodes
	MinimumStandbyBond *string `json:"minimumStandbyBond,omitempty"`

	// Total bond of active nodes
	TotalActiveBond *string `json:"totalActiveBond,omitempty"`

	// Total bond of standby nodes
	TotalStandbyBond *string `json:"totalStandbyBond,omitempty"`
}

// EarningReport defines model for EarningReport.
type EarningReport struct {
	ActiveDays             *string `json:"activeDays,omitempty"`
	LastMonthBuyFee        *string `json:"lastMonthBuyFee,omitempty"`
	LastMonthGasPaid       *string `json:"lastMonthGasPaid,omitempty"`
	LastMonthGasReimbursed *string `json:"lastMonthGasReimbursed,omitempty"`
	LastMonthPoolDeficit   *string `json:"lastMonthPoolDeficit,omitempty"`
	LastMonthPoolEarning   *string `json:"lastMonthPoolEarning,omitempty"`
	LastMonthPoolFee       *string `json:"lastMonthPoolFee,omitempty"`
	LastMonthReward        *string `json:"lastMonthReward,omitempty"`
	LastMonthSellFee       *string `json:"lastMonthSellFee,omitempty"`
	PeriodicRate           *string `json:"periodicRate,omitempty"`
	Pool                   *string `json:"pool,omitempty"`
	PoolAPY                *string `json:"poolAPY,omitempty"`
	PoolDepth              *string `json:"poolDepth,omitempty"`
	Price                  *string `json:"price,omitempty"`
	TotalBuyFee            *string `json:"totalBuyFee,omitempty"`
	TotalGasPaid           *string `json:"totalGasPaid,omitempty"`
	TotalGasReimbursed     *string `json:"totalGasReimbursed,omitempty"`
	TotalPoolDeficit       *string `json:"totalPoolDeficit,omitempty"`
	TotalPoolEarning       *string `json:"totalPoolEarning,omitempty"`
	TotalPoolFee           *string `json:"totalPoolFee,omitempty"`
	TotalReward            *string `json:"totalReward,omitempty"`
	TotalSellFee           *string `json:"totalSellFee,omitempty"`
}

// Error defines model for Error.
type Error struct {
	Error string `json:"error"`
}

// NetworkInfo defines model for NetworkInfo.
type NetworkInfo struct {

	// Array of Active Bonds
	ActiveBonds *[]string `json:"activeBonds,omitempty"`

	// Number of Active Nodes
	ActiveNodeCount *int          `json:"activeNodeCount,omitempty"`
	BlockRewards    *BlockRewards `json:"blockRewards,omitempty"`
	BondMetrics     *BondMetrics  `json:"bondMetrics,omitempty"`

	// (1 + (bondReward * blocksPerMonth/totalActiveBond)) ^ 12 -1
	BondingAPY *string `json:"bondingAPY,omitempty"`
	BondingROI *string `json:"bondingROI,omitempty"`

	// (1 + (stakeReward * blocksPerMonth/totalDepth of active pools)) ^ 12 -1
	LiquidityAPY    *string `json:"liquidityAPY,omitempty"`
	NextChurnHeight *string `json:"nextChurnHeight,omitempty"`

	// The remaining time of pool activation (in blocks)
	PoolActivationCountdown *int64  `json:"poolActivationCountdown,omitempty"`
	PoolShareFactor         *string `json:"poolShareFactor,omitempty"`
	StakingROI              *string `json:"stakingROI,omitempty"`

	// Array of Standby Bonds
	StandbyBonds *[]string `json:"standbyBonds,omitempty"`

	// Number of Standby Nodes
	StandbyNodeCount *int `json:"standbyNodeCount,omitempty"`

	// Total left in Reserve
	TotalReserve *string `json:"totalReserve,omitempty"`

	// Total Rune Staked in Pools
	TotalStaked *string `json:"totalStaked,omitempty"`
}

// NodeKey defines model for NodeKey.
type NodeKey struct {

	// ed25519 public key
	Ed25519 *string `json:"ed25519,omitempty"`

	// secp256k1 public key
	Secp256k1 *string `json:"secp256k1,omitempty"`
}

// PoolAggChanges defines model for PoolAggChanges.
type PoolAggChanges struct {

	// Total changes in asset depth at this time bucket
	AssetChanges *string `json:"assetChanges,omitempty"`

	// Depth of asset at the end of current time bucket
	AssetDepth *string `json:"assetDepth,omitempty"`

	// Total asset staked
	AssetStaked *string `json:"assetStaked,omitempty"`

	// Total asset withdrawn
	AssetWithdrawn *string `json:"assetWithdrawn,omitempty"`

	// Count of buy swaps
	BuyCount *int64 `json:"buyCount,omitempty"`

	// Sum of "rune_amount" of buy swap events
	BuyVolume *string `json:"buyVolume,omitempty"`

	// Total amount of rune, paid by the network to neutralize "gasUsed" changes
	GasReplenished *string `json:"gasReplenished,omitempty"`

	// Total amount of asset used as gas for network transactions (e.g. BNB.BNB, ETH.ETH)
	GasUsed *string `json:"gasUsed,omitempty"`

	// buyVolume + sellVolume
	PoolVolume *string `json:"poolVolume,omitempty"`

	// Asset price in rune at the end of current time bucket
	Price *string `json:"price,omitempty"`

	// Sum of "rewards" events in rune
	Reward *string `json:"reward,omitempty"`

	// Total changes in rune depth at this time bucket
	RuneChanges *string `json:"runeChanges,omitempty"`

	// Depth of rune at the end of current time bucket
	RuneDepth *string `json:"runeDepth,omitempty"`

	// Total rune staked
	RuneStaked *string `json:"runeStaked,omitempty"`

	// Total rune withdrawn
	RuneWithdrawn *string `json:"runeWithdrawn,omitempty"`

	// Count of sell swaps
	SellCount *int64 `json:"sellCount,omitempty"`

	// Sum of "rune_amount" of sell swap events
	SellVolume *string `json:"sellVolume,omitempty"`

	// Count of stake events
	StakeCount *int64 `json:"stakeCount,omitempty"`

	// Determining end of current time bucket in unix timestamp
	Time *int64 `json:"time,omitempty"`

	// Total changes in pool units (stakes/withdraws)
	UnitsChanges *string `json:"unitsChanges,omitempty"`

	// Count of withdraw events
	WithdrawCount *int64 `json:"withdrawCount,omitempty"`
}

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	Asset *Asset `json:"asset,omitempty"`

	// Total current Asset balance
	AssetDepth *string `json:"assetDepth,omitempty"`

	// Amount of pool asset changed by fee and gas
	AssetEarned *string `json:"assetEarned,omitempty"`

	// Asset return on investment
	AssetROI *string `json:"assetROI,omitempty"`

	// Total Asset staked
	AssetStakedTotal *string `json:"assetStakedTotal,omitempty"`

	// Number of RUNE->ASSET transactions
	BuyAssetCount *string `json:"buyAssetCount,omitempty"`

	// Average sell Asset fee size for RUNE->ASSET (in ASSET)
	BuyFeeAverage *string `json:"buyFeeAverage,omitempty"`

	// Total fees (in Asset)
	BuyFeesTotal *string `json:"buyFeesTotal,omitempty"`

	// Average trade slip for RUNE->ASSET in %
	BuySlipAverage *string `json:"buySlipAverage,omitempty"`

	// Average Asset buy transaction size for (RUNE->ASSET) (in ASSET)
	BuyTxAverage *string `json:"buyTxAverage,omitempty"`

	// Total Asset buy volume (RUNE->ASSET) (in RUNE)
	BuyVolume *string `json:"buyVolume,omitempty"`

	// (1 + (poolEarned/poolDepth)) ^ 12 -1
	PoolAPY *string `json:"poolAPY,omitempty"`

	// Total depth of both sides (in RUNE)
	PoolDepth *string `json:"poolDepth,omitempty"`

	// (assetChanges * price) + runeEarned
	PoolEarned *string `json:"poolEarned,omitempty"`

	// Average pool fee
	PoolFeeAverage *string `json:"poolFeeAverage,omitempty"`

	// Total fees
	PoolFeesTotal *string `json:"poolFeesTotal,omitempty"`

	// Pool ROI (average of RUNE and Asset ROI)
	PoolROI *string `json:"poolROI,omitempty"`

	// Pool ROI over 12 months
	PoolROI12 *string `json:"poolROI12,omitempty"`

	// Average pool slip
	PoolSlipAverage *string `json:"poolSlipAverage,omitempty"`

	// Rune value staked Total
	PoolStakedTotal *string `json:"poolStakedTotal,omitempty"`

	// Average pool transaction
	PoolTxAverage *string `json:"poolTxAverage,omitempty"`

	// Total pool units outstanding
	PoolUnits *string `json:"poolUnits,omitempty"`

	// Two-way volume of all-time (in RUNE)
	PoolVolume *string `json:"poolVolume,omitempty"`

	// Two-way volume in 24hrs (in RUNE)
	PoolVolume24hr *string `json:"poolVolume24hr,omitempty"`

	// Price of Asset (in RUNE).
	Price *string `json:"price,omitempty"`

	// Total current Rune balance
	RuneDepth *string `json:"runeDepth,omitempty"`

	// Amount of pool rune changed by fee,reward and gas
	RuneEarned *string `json:"runeEarned,omitempty"`

	// RUNE return on investment
	RuneROI *string `json:"runeROI,omitempty"`

	// Total RUNE staked
	RuneStakedTotal *string `json:"runeStakedTotal,omitempty"`

	// Number of ASSET->RUNE transactions
	SellAssetCount *string `json:"sellAssetCount,omitempty"`

	// Average buy Asset fee size for ASSET->RUNE (in RUNE)
	SellFeeAverage *string `json:"sellFeeAverage,omitempty"`

	// Total fees (in RUNE)
	SellFeesTotal *string `json:"sellFeesTotal,omitempty"`

	// Average trade slip for ASSET->RUNE in %
	SellSlipAverage *string `json:"sellSlipAverage,omitempty"`

	// Average Asset sell transaction size (ASSET>RUNE) (in RUNE)
	SellTxAverage *string `json:"sellTxAverage,omitempty"`

	// Total Asset sell volume (ASSET>RUNE) (in RUNE).
	SellVolume *string `json:"sellVolume,omitempty"`

	// Number of stake transactions
	StakeTxCount *string `json:"stakeTxCount,omitempty"`

	// Number of unique stakers
	StakersCount *string `json:"stakersCount,omitempty"`

	// Number of stake & withdraw transactions
	StakingTxCount *string `json:"stakingTxCount,omitempty"`
	Status         *string `json:"status,omitempty"`

	// Number of unique swappers interacting with pool
	SwappersCount *string `json:"swappersCount,omitempty"`

	// Number of swapping transactions in the pool (buys and sells)
	SwappingTxCount *string `json:"swappingTxCount,omitempty"`

	// Number of withdraw transactions
	WithdrawTxCount *string `json:"withdrawTxCount,omitempty"`
}

// Stakers defines model for Stakers.
type Stakers string

// StakersAddressData defines model for StakersAddressData.
type StakersAddressData struct {
	PoolsArray *[]Asset `json:"poolsArray,omitempty"`

	// Total value of earnings (in RUNE) across all pools.
	TotalEarned *string `json:"totalEarned,omitempty"`

	// Average of all pool ROIs.
	TotalROI *string `json:"totalROI,omitempty"`

	// Total staked (in RUNE) across all pools.
	TotalStaked *string `json:"totalStaked,omitempty"`
}

// StakersAssetData defines model for StakersAssetData.
type StakersAssetData struct {
	Asset *Asset `json:"asset,omitempty"`

	// Total of assets staked
	AssetStaked *string `json:"assetStaked,omitempty"`

	// Total of assets withdrawn
	AssetWithdrawn   *string `json:"assetWithdrawn,omitempty"`
	DateFirstStaked  *int64  `json:"dateFirstStaked,omitempty"`
	HeightLastStaked *int64  `json:"heightLastStaked,omitempty"`

	// Total of rune staked
	RuneStaked *string `json:"runeStaked,omitempty"`

	// Total of rune withdrawn
	RuneWithdrawn *string `json:"runeWithdrawn,omitempty"`

	// Represents ownership of a pool.
	Units *string `json:"units,omitempty"`
}

// StatsData defines model for StatsData.
type StatsData struct {

	// Daily active users (unique addresses interacting)
	DailyActiveUsers *string `json:"dailyActiveUsers,omitempty"`

	// Daily transactions
	DailyTx *string `json:"dailyTx,omitempty"`

	// Monthly active users
	MonthlyActiveUsers *string `json:"monthlyActiveUsers,omitempty"`

	// Monthly transactions
	MonthlyTx *string `json:"monthlyTx,omitempty"`

	// Number of active pools
	PoolCount *string `json:"poolCount,omitempty"`

	// Total buying transactions
	TotalAssetBuys *string `json:"totalAssetBuys,omitempty"`

	// Total selling transactions
	TotalAssetSells *string `json:"totalAssetSells,omitempty"`

	// Total RUNE balances
	TotalDepth *string `json:"totalDepth,omitempty"`

	// Total earned (in RUNE Value).
	TotalEarned *string `json:"totalEarned,omitempty"`

	// Total staking transactions
	TotalStakeTx *string `json:"totalStakeTx,omitempty"`

	// Total staked (in RUNE Value).
	TotalStaked *string `json:"totalStaked,omitempty"`

	// Total transactions
	TotalTx *string `json:"totalTx,omitempty"`

	// Total unique swappers & stakers
	TotalUsers *string `json:"totalUsers,omitempty"`

	// Total (in RUNE Value) of all assets swapped since start.
	TotalVolume *string `json:"totalVolume,omitempty"`

	// Total (in RUNE Value) of all assets swapped in 24hrs
	TotalVolume24hr *string `json:"totalVolume24hr,omitempty"`

	// Total withdrawing transactions
	TotalWithdrawTx *string `json:"totalWithdrawTx,omitempty"`
}

// ThorchainBooleanConstants defines model for ThorchainBooleanConstants.
type ThorchainBooleanConstants struct {
	StrictBondStakeRatio *bool `json:"StrictBondStakeRatio,omitempty"`
}

// ThorchainConstants defines model for ThorchainConstants.
type ThorchainConstants struct {
	BoolValues   *ThorchainBooleanConstants `json:"bool_values,omitempty"`
	Int64Values  *ThorchainInt64Constants   `json:"int_64_values,omitempty"`
	StringValues *ThorchainStringConstants  `json:"string_values,omitempty"`
}

// ThorchainEndpoint defines model for ThorchainEndpoint.
type ThorchainEndpoint struct {
	Address *string `json:"address,omitempty"`
	Chain   *string `json:"chain,omitempty"`
	PubKey  *string `json:"pub_key,omitempty"`
}

// ThorchainEndpoints defines model for ThorchainEndpoints.
type ThorchainEndpoints struct {
	Current *[]ThorchainEndpoint `json:"current,omitempty"`
}

// ThorchainInt64Constants defines model for ThorchainInt64Constants.
type ThorchainInt64Constants struct {
	BadValidatorRate                *int64 `json:"BadValidatorRate,omitempty"`
	BlocksPerYear                   *int64 `json:"BlocksPerYear,omitempty"`
	DesireValidatorSet              *int64 `json:"DesireValidatorSet,omitempty"`
	DoubleSignMaxAge                *int64 `json:"DoubleSignMaxAge,omitempty"`
	EmissionCurve                   *int64 `json:"EmissionCurve,omitempty"`
	FailKeySignSlashPoints          *int64 `json:"FailKeySignSlashPoints,omitempty"`
	FailKeygenSlashPoints           *int64 `json:"FailKeygenSlashPoints,omitempty"`
	FundMigrationInterval           *int64 `json:"FundMigrationInterval,omitempty"`
	JailTimeKeygen                  *int64 `json:"JailTimeKeygen,omitempty"`
	JailTimeKeysign                 *int64 `json:"JailTimeKeysign,omitempty"`
	LackOfObservationPenalty        *int64 `json:"LackOfObservationPenalty,omitempty"`
	MinimumBondInRune               *int64 `json:"MinimumBondInRune,omitempty"`
	MinimumNodesForBFT              *int64 `json:"MinimumNodesForBFT,omitempty"`
	MinimumNodesForYggdrasil        *int64 `json:"MinimumNodesForYggdrasil,omitempty"`
	NewPoolCycle                    *int64 `json:"NewPoolCycle,omitempty"`
	ObserveSlashPoints              *int64 `json:"ObserveSlashPoints,omitempty"`
	OldValidatorRate                *int64 `json:"OldValidatorRate,omitempty"`
	RotatePerBlockHeight            *int64 `json:"RotatePerBlockHeight,omitempty"`
	RotateRetryBlocks               *int64 `json:"RotateRetryBlocks,omitempty"`
	SigningTransactionPeriod        *int64 `json:"SigningTransactionPeriod,omitempty"`
	StakeLockUpBlocks               *int64 `json:"StakeLockUpBlocks,omitempty"`
	TransactionFee                  *int64 `json:"TransactionFee,omitempty"`
	ValidatorRotateInNumBeforeFull  *int64 `json:"ValidatorRotateInNumBeforeFull,omitempty"`
	ValidatorRotateNumAfterFull     *int64 `json:"ValidatorRotateNumAfterFull,omitempty"`
	ValidatorRotateOutNumBeforeFull *int64 `json:"ValidatorRotateOutNumBeforeFull,omitempty"`
	WhiteListGasAsset               *int64 `json:"WhiteListGasAsset,omitempty"`
	YggFundLimit                    *int64 `json:"YggFundLimit,omitempty"`
}

// ThorchainLastblock defines model for ThorchainLastblock.
type ThorchainLastblock struct {
	Chain          *string `json:"chain,omitempty"`
	Lastobservedin *int64  `json:"lastobservedin,omitempty"`
	Lastsignedout  *int64  `json:"lastsignedout,omitempty"`
	Thorchain      *int64  `json:"thorchain,omitempty"`
}

// ThorchainStringConstants defines model for ThorchainStringConstants.
type ThorchainStringConstants struct {
	DefaultPoolStatus *string `json:"DefaultPoolStatus,omitempty"`
}

// TotalVolChanges defines model for TotalVolChanges.
type TotalVolChanges struct {

	// Sum of "rune_amount" of buy swap events
	BuyVolume *string `json:"buyVolume,omitempty"`

	// Sum of "rune_amount" of sell swap events
	SellVolume *string `json:"sellVolume,omitempty"`

	// Determining end of current time bucket in unix timestamp
	Time *int64 `json:"time,omitempty"`

	// buyVolume + sellVolume
	TotalVolume *string `json:"totalVolume,omitempty"`
}

// TxDetails defines model for TxDetails.
type TxDetails struct {
	Date    *int64  `json:"date,omitempty"`
	Events  *Event  `json:"events,omitempty"`
	Gas     *Gas    `json:"gas,omitempty"`
	Height  *string `json:"height,omitempty"`
	In      *Tx     `json:"in,omitempty"`
	Options *Option `json:"options,omitempty"`
	Out     *[]Tx   `json:"out,omitempty"`
	Pool    *Asset  `json:"pool,omitempty"`
	Status  *string `json:"status,omitempty"`
	Type    *string `json:"type,omitempty"`
}

// Asset defines model for asset.
type Asset string

// Coin defines model for coin.
type Coin struct {
	Amount *string `json:"amount,omitempty"`
	Asset  *Asset  `json:"asset,omitempty"`
}

// Coins defines model for coins.
type Coins []Coin

// Event defines model for event.
type Event struct {
	Fee        *string `json:"fee,omitempty"`
	Slip       *string `json:"slip,omitempty"`
	StakeUnits *string `json:"stakeUnits,omitempty"`
}

// Gas defines model for gas.
type Gas struct {
	Amount *string `json:"amount,omitempty"`
	Asset  *Asset  `json:"asset,omitempty"`
}

// Option defines model for option.
type Option struct {
	Asymmetry           *string `json:"asymmetry,omitempty"`
	PriceTarget         *string `json:"priceTarget,omitempty"`
	WithdrawBasisPoints *string `json:"withdrawBasisPoints,omitempty"`
}

// Tx defines model for tx.
type Tx struct {
	Address *string `json:"address,omitempty"`
	Coins   *Coins  `json:"coins,omitempty"`
	Memo    *string `json:"memo,omitempty"`
	TxID    *string `json:"txID,omitempty"`
}

// AssetsDetailedResponse defines model for AssetsDetailedResponse.
type AssetsDetailedResponse []AssetDetail

// GeneralErrorResponse defines model for GeneralErrorResponse.
type GeneralErrorResponse Error

// GetEarningReportResponse defines model for GetEarningReportResponse.
type GetEarningReportResponse EarningReport

// GetPoolAggChangesResponse defines model for GetPoolAggChangesResponse.
type GetPoolAggChangesResponse []PoolAggChanges

// HealthResponse defines model for HealthResponse.
type HealthResponse struct {
	CatchingUp    *bool  `json:"catching_up,omitempty"`
	Database      *bool  `json:"database,omitempty"`
	ScannerHeight *int64 `json:"scannerHeight,omitempty"`
}

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse NetworkInfo

// NodeKeyResponse defines model for NodeKeyResponse.
type NodeKeyResponse []NodeKey

// PoolsDetailedResponse defines model for PoolsDetailedResponse.
type PoolsDetailedResponse []PoolDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse []Asset

// StakersAddressDataResponse defines model for StakersAddressDataResponse.
type StakersAddressDataResponse StakersAddressData

// StakersAssetDataResponse defines model for StakersAssetDataResponse.
type StakersAssetDataResponse []StakersAssetData

// StakersResponse defines model for StakersResponse.
type StakersResponse []Stakers

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// ThorchainConstantsResponse defines model for ThorchainConstantsResponse.
type ThorchainConstantsResponse ThorchainConstants

// ThorchainEndpointsResponse defines model for ThorchainEndpointsResponse.
type ThorchainEndpointsResponse ThorchainEndpoints

// ThorchainLastblockResponse defines model for ThorchainLastblockResponse.
type ThorchainLastblockResponse ThorchainLastblock

// TotalVolChangesResponse defines model for TotalVolChangesResponse.
type TotalVolChangesResponse []TotalVolChanges

// TxsResponse defines model for TxsResponse.
type TxsResponse struct {
	Count *int64       `json:"count,omitempty"`
	Txs   *[]TxDetails `json:"txs,omitempty"`
}

// GetAssetInfoParams defines parameters for GetAssetInfo.
type GetAssetInfoParams struct {

	// One or more comma separated unique asset (CHAIN.SYMBOL)
	Asset string `json:"asset"`
}

// GetPoolAggChangesParams defines parameters for GetPoolAggChanges.
type GetPoolAggChangesParams struct {

	// Pool asset name
	Pool string `json:"pool"`

	// Interval of calculations
	Interval string `json:"interval"`

	// Start time of the query as unix timestamp
	From int64 `json:"from"`

	// End time of the query as unix timestamp
	To int64 `json:"to"`
}

// GetTotalVolChangesParams defines parameters for GetTotalVolChanges.
type GetTotalVolChangesParams struct {

	// Interval of calculations
	Interval string `json:"interval"`

	// Start time of the query as unix timestamp
	From int64 `json:"from"`

	// End time of the query as unix timestamp
	To int64 `json:"to"`
}

// GetPoolsDetailsParams defines parameters for GetPoolsDetails.
type GetPoolsDetailsParams struct {

	// Specifies the returning view
	View *string `json:"view,omitempty"`

	// One or more comma separated unique asset (CHAIN.SYMBOL)
	Asset string `json:"asset"`
}

// GetEarningReportParams defines parameters for GetEarningReport.
type GetEarningReportParams struct {

	// Pool asset name
	Pool string `json:"pool"`
}

// GetStakersAddressAndAssetDataParams defines parameters for GetStakersAddressAndAssetData.
type GetStakersAddressAndAssetDataParams struct {

	// One or more comma separated unique asset (CHAIN.SYMBOL)
	Asset string `json:"asset"`
}

// GetTxDetailsParams defines parameters for GetTxDetails.
type GetTxDetailsParams struct {

	// Address of sender or recipient of any in/out tx in event
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx in event
	Txid *string `json:"txid,omitempty"`

	// Any asset used in event (CHAIN.SYMBOL)
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of event
	Type *string `json:"type,omitempty"`

	// pagination offset
	Offset int64 `json:"offset"`

	// pagination limit
	Limit int64 `json:"limit"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get Asset Information
	// (GET /v1/assets)
	GetAssetInfo(ctx echo.Context, params GetAssetInfoParams) error
	// Get Documents
	// (GET /v1/doc)
	GetDocs(ctx echo.Context) error
	// Get Health
	// (GET /v1/health)
	GetHealth(ctx echo.Context) error
	// Get Pool Aggregated Changes
	// (GET /v1/history/pools)
	GetPoolAggChanges(ctx echo.Context, params GetPoolAggChangesParams) error
	// Get Total Volume Changes
	// (GET /v1/history/total_volume)
	GetTotalVolChanges(ctx echo.Context, params GetTotalVolChangesParams) error
	// Get Network Data
	// (GET /v1/network)
	GetNetworkData(ctx echo.Context) error
	// Get Node public keys
	// (GET /v1/nodes)
	GetNodes(ctx echo.Context) error
	// Get Asset Pools
	// (GET /v1/pools)
	GetPools(ctx echo.Context) error
	// Get Pools Details
	// (GET /v1/pools/detail)
	GetPoolsDetails(ctx echo.Context, params GetPoolsDetailsParams) error
	// Get Pool Earning Report
	// (GET /v1/report/earning)
	GetEarningReport(ctx echo.Context, params GetEarningReportParams) error
	// Get Stakers
	// (GET /v1/stakers)
	GetStakersData(ctx echo.Context) error
	// Get Staker Data
	// (GET /v1/stakers/{address})
	GetStakersAddressData(ctx echo.Context, address string) error
	// Get Staker Pool Data
	// (GET /v1/stakers/{address}/pools)
	GetStakersAddressAndAssetData(ctx echo.Context, address string, params GetStakersAddressAndAssetDataParams) error
	// Get Global Stats
	// (GET /v1/stats)
	GetStats(ctx echo.Context) error
	// Get Swagger
	// (GET /v1/swagger.json)
	GetSwagger(ctx echo.Context) error
	// Get the Proxied THORChain Constants
	// (GET /v1/thorchain/constants)
	GetThorchainProxiedConstants(ctx echo.Context) error
	// Get the Proxied THORChain Lastblock
	// (GET /v1/thorchain/lastblock)
	GetThorchainProxiedLastblock(ctx echo.Context) error
	// Get the Proxied Pool Addresses
	// (GET /v1/thorchain/pool_addresses)
	GetThorchainProxiedEndpoints(ctx echo.Context) error
	// Get details of a tx by address, asset or tx-id
	// (GET /v1/txs)
	GetTxDetails(ctx echo.Context, params GetTxDetailsParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetAssetInfo converts echo context to params.
func (w *ServerInterfaceWrapper) GetAssetInfo(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAssetInfoParams
	// ------------- Required query parameter "asset" -------------

	err = runtime.BindQueryParameter("form", true, true, "asset", ctx.QueryParams(), &params.Asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAssetInfo(ctx, params)
	return err
}

// GetDocs converts echo context to params.
func (w *ServerInterfaceWrapper) GetDocs(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDocs(ctx)
	return err
}

// GetHealth converts echo context to params.
func (w *ServerInterfaceWrapper) GetHealth(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetHealth(ctx)
	return err
}

// GetPoolAggChanges converts echo context to params.
func (w *ServerInterfaceWrapper) GetPoolAggChanges(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPoolAggChangesParams
	// ------------- Required query parameter "pool" -------------

	err = runtime.BindQueryParameter("form", true, true, "pool", ctx.QueryParams(), &params.Pool)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pool: %s", err))
	}

	// ------------- Required query parameter "interval" -------------

	err = runtime.BindQueryParameter("form", true, true, "interval", ctx.QueryParams(), &params.Interval)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter interval: %s", err))
	}

	// ------------- Required query parameter "from" -------------

	err = runtime.BindQueryParameter("form", true, true, "from", ctx.QueryParams(), &params.From)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter from: %s", err))
	}

	// ------------- Required query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, true, "to", ctx.QueryParams(), &params.To)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter to: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPoolAggChanges(ctx, params)
	return err
}

// GetTotalVolChanges converts echo context to params.
func (w *ServerInterfaceWrapper) GetTotalVolChanges(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTotalVolChangesParams
	// ------------- Required query parameter "interval" -------------

	err = runtime.BindQueryParameter("form", true, true, "interval", ctx.QueryParams(), &params.Interval)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter interval: %s", err))
	}

	// ------------- Required query parameter "from" -------------

	err = runtime.BindQueryParameter("form", true, true, "from", ctx.QueryParams(), &params.From)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter from: %s", err))
	}

	// ------------- Required query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, true, "to", ctx.QueryParams(), &params.To)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter to: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTotalVolChanges(ctx, params)
	return err
}

// GetNetworkData converts echo context to params.
func (w *ServerInterfaceWrapper) GetNetworkData(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNetworkData(ctx)
	return err
}

// GetNodes converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodes(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodes(ctx)
	return err
}

// GetPools converts echo context to params.
func (w *ServerInterfaceWrapper) GetPools(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPools(ctx)
	return err
}

// GetPoolsDetails converts echo context to params.
func (w *ServerInterfaceWrapper) GetPoolsDetails(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPoolsDetailsParams
	// ------------- Optional query parameter "view" -------------

	err = runtime.BindQueryParameter("form", true, false, "view", ctx.QueryParams(), &params.View)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter view: %s", err))
	}

	// ------------- Required query parameter "asset" -------------

	err = runtime.BindQueryParameter("form", true, true, "asset", ctx.QueryParams(), &params.Asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPoolsDetails(ctx, params)
	return err
}

// GetEarningReport converts echo context to params.
func (w *ServerInterfaceWrapper) GetEarningReport(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetEarningReportParams
	// ------------- Required query parameter "pool" -------------

	err = runtime.BindQueryParameter("form", true, true, "pool", ctx.QueryParams(), &params.Pool)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pool: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetEarningReport(ctx, params)
	return err
}

// GetStakersData converts echo context to params.
func (w *ServerInterfaceWrapper) GetStakersData(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStakersData(ctx)
	return err
}

// GetStakersAddressData converts echo context to params.
func (w *ServerInterfaceWrapper) GetStakersAddressData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStakersAddressData(ctx, address)
	return err
}

// GetStakersAddressAndAssetData converts echo context to params.
func (w *ServerInterfaceWrapper) GetStakersAddressAndAssetData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetStakersAddressAndAssetDataParams
	// ------------- Required query parameter "asset" -------------

	err = runtime.BindQueryParameter("form", true, true, "asset", ctx.QueryParams(), &params.Asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStakersAddressAndAssetData(ctx, address, params)
	return err
}

// GetStats converts echo context to params.
func (w *ServerInterfaceWrapper) GetStats(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStats(ctx)
	return err
}

// GetSwagger converts echo context to params.
func (w *ServerInterfaceWrapper) GetSwagger(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSwagger(ctx)
	return err
}

// GetThorchainProxiedConstants converts echo context to params.
func (w *ServerInterfaceWrapper) GetThorchainProxiedConstants(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetThorchainProxiedConstants(ctx)
	return err
}

// GetThorchainProxiedLastblock converts echo context to params.
func (w *ServerInterfaceWrapper) GetThorchainProxiedLastblock(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetThorchainProxiedLastblock(ctx)
	return err
}

// GetThorchainProxiedEndpoints converts echo context to params.
func (w *ServerInterfaceWrapper) GetThorchainProxiedEndpoints(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetThorchainProxiedEndpoints(ctx)
	return err
}

// GetTxDetails converts echo context to params.
func (w *ServerInterfaceWrapper) GetTxDetails(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTxDetailsParams
	// ------------- Optional query parameter "address" -------------

	err = runtime.BindQueryParameter("form", true, false, "address", ctx.QueryParams(), &params.Address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Optional query parameter "txid" -------------

	err = runtime.BindQueryParameter("form", true, false, "txid", ctx.QueryParams(), &params.Txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	// ------------- Optional query parameter "asset" -------------

	err = runtime.BindQueryParameter("form", true, false, "asset", ctx.QueryParams(), &params.Asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// ------------- Optional query parameter "type" -------------

	err = runtime.BindQueryParameter("form", true, false, "type", ctx.QueryParams(), &params.Type)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter type: %s", err))
	}

	// ------------- Required query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, true, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Required query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, true, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTxDetails(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/v1/assets", wrapper.GetAssetInfo)
	router.GET("/v1/doc", wrapper.GetDocs)
	router.GET("/v1/health", wrapper.GetHealth)
	router.GET("/v1/history/pools", wrapper.GetPoolAggChanges)
	router.GET("/v1/history/total_volume", wrapper.GetTotalVolChanges)
	router.GET("/v1/network", wrapper.GetNetworkData)
	router.GET("/v1/nodes", wrapper.GetNodes)
	router.GET("/v1/pools", wrapper.GetPools)
	router.GET("/v1/pools/detail", wrapper.GetPoolsDetails)
	router.GET("/v1/report/earning", wrapper.GetEarningReport)
	router.GET("/v1/stakers", wrapper.GetStakersData)
	router.GET("/v1/stakers/:address", wrapper.GetStakersAddressData)
	router.GET("/v1/stakers/:address/pools", wrapper.GetStakersAddressAndAssetData)
	router.GET("/v1/stats", wrapper.GetStats)
	router.GET("/v1/swagger.json", wrapper.GetSwagger)
	router.GET("/v1/thorchain/constants", wrapper.GetThorchainProxiedConstants)
	router.GET("/v1/thorchain/lastblock", wrapper.GetThorchainProxiedLastblock)
	router.GET("/v1/thorchain/pool_addresses", wrapper.GetThorchainProxiedEndpoints)
	router.GET("/v1/txs", wrapper.GetTxDetails)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}

