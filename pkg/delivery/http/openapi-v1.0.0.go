// Package http provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package http

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// AssetDetail defines model for AssetDetail.
type AssetDetail struct {
	Asset       *Asset  `json:"asset,omitempty"`
	DateCreated *int64  `json:"dateCreated,omitempty"`
	PriceRune   *string `json:"priceRune,omitempty"`
}

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward *string `json:"blockReward,omitempty"`
	BondReward  *string `json:"bondReward,omitempty"`
	StakeReward *string `json:"stakeReward,omitempty"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {

	// Average bond of active nodes
	AverageActiveBond *string `json:"averageActiveBond,omitempty"`

	// Average bond of standby nodes
	AverageStandbyBond *string `json:"averageStandbyBond,omitempty"`

	// Maxinum bond of active nodes
	MaximumActiveBond *string `json:"maximumActiveBond,omitempty"`

	// Maximum bond of standby nodes
	MaximumStandbyBond *string `json:"maximumStandbyBond,omitempty"`

	// Median bond of active nodes
	MedianActiveBond *string `json:"medianActiveBond,omitempty"`

	// Median bond of standby nodes
	MedianStandbyBond *string `json:"medianStandbyBond,omitempty"`

	// Minumum bond of active nodes
	MinimumActiveBond *string `json:"minimumActiveBond,omitempty"`

	// Minumum bond of standby nodes
	MinimumStandbyBond *string `json:"minimumStandbyBond,omitempty"`

	// Total bond of active nodes
	TotalActiveBond *string `json:"totalActiveBond,omitempty"`

	// Total bond of standby nodes
	TotalStandbyBond *string `json:"totalStandbyBond,omitempty"`
}

// Error defines model for Error.
type Error struct {
	Error string `json:"error"`
}

// NetworkInfo defines model for NetworkInfo.
type NetworkInfo struct {

	// Array of Active Bonds
	ActiveBonds *[]string `json:"activeBonds,omitempty"`

	// Number of Active Nodes
	ActiveNodeCount *int          `json:"activeNodeCount,omitempty"`
	BlockRewards    *BlockRewards `json:"blockRewards,omitempty"`
	BondMetrics     *BondMetrics  `json:"bondMetrics,omitempty"`

	// (1 + (bondReward * blocksPerMonth/totalActiveBond)) ^ 12 -1
	BondingAPY *string `json:"bondingAPY,omitempty"`
	BondingROI *string `json:"bondingROI,omitempty"`

	// (1 + (stakeReward * blocksPerMonth/totalDepth of active pools)) ^ 12 -1
	LiquidityAPY    *string `json:"liquidityAPY,omitempty"`
	NextChurnHeight *string `json:"nextChurnHeight,omitempty"`

	// The remaining time of pool activation (in blocks)
	PoolActivationCountdown *int64  `json:"poolActivationCountdown,omitempty"`
	PoolShareFactor         *string `json:"poolShareFactor,omitempty"`
	StakingROI              *string `json:"stakingROI,omitempty"`

	// Array of Standby Bonds
	StandbyBonds *[]string `json:"standbyBonds,omitempty"`

	// Number of Standby Nodes
	StandbyNodeCount *int `json:"standbyNodeCount,omitempty"`

	// Total left in Reserve
	TotalReserve *string `json:"totalReserve,omitempty"`

	// Total Rune Staked in Pools
	TotalStaked *string `json:"totalStaked,omitempty"`
}

// NodeKey defines model for NodeKey.
type NodeKey struct {

	// ed25519 public key
	Ed25519 *string `json:"ed25519,omitempty"`

	// secp256k1 public key
	Secp256k1 *string `json:"secp256k1,omitempty"`
}

// PoolAggChanges defines model for PoolAggChanges.
type PoolAggChanges struct {

	// Total changes in asset depth at this time bucket
	AssetChanges *string `json:"assetChanges,omitempty"`

	// Depth of asset at the end of current time bucket
	AssetDepth *string `json:"assetDepth,omitempty"`

	// Total asset staked
	AssetStaked *string `json:"assetStaked,omitempty"`

	// Total asset withdrawn
	AssetWithdrawn *string `json:"assetWithdrawn,omitempty"`

	// Count of buy swaps
	BuyCount *int64 `json:"buyCount,omitempty"`

	// Sum of "rune_amount" of buy swap events
	BuyVolume *string `json:"buyVolume,omitempty"`

	// Total amount of rune, paid by the network to neutralize "gasUsed" changes
	GasReplenished *string `json:"gasReplenished,omitempty"`

	// Total amount of asset used as gas for network transactions (e.g. BNB.BNB, ETH.ETH)
	GasUsed *string `json:"gasUsed,omitempty"`

	// buyVolume + sellVolume
	PoolVolume *string `json:"poolVolume,omitempty"`

	// Asset price in rune at the end of current time bucket
	Price *string `json:"price,omitempty"`

	// Sum of "rewards" events in rune
	Reward *string `json:"reward,omitempty"`

	// Total changes in rune depth at this time bucket
	RuneChanges *string `json:"runeChanges,omitempty"`

	// Depth of rune at the end of current time bucket
	RuneDepth *string `json:"runeDepth,omitempty"`

	// Total rune staked
	RuneStaked *string `json:"runeStaked,omitempty"`

	// Total rune withdrawn
	RuneWithdrawn *string `json:"runeWithdrawn,omitempty"`

	// Count of sell swaps
	SellCount *int64 `json:"sellCount,omitempty"`

	// Sum of "rune_amount" of sell swap events
	SellVolume *string `json:"sellVolume,omitempty"`

	// Count of stake events
	StakeCount *int64 `json:"stakeCount,omitempty"`

	// Determining end of current time bucket in unix timestamp
	Time *int64 `json:"time,omitempty"`

	// Total changes in pool units (stakes/withdraws)
	UnitsChanges *string `json:"unitsChanges,omitempty"`

	// Count of withdraw events
	WithdrawCount *int64 `json:"withdrawCount,omitempty"`
}

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	Asset *Asset `json:"asset,omitempty"`

	// Total current Asset balance
	AssetDepth *string `json:"assetDepth,omitempty"`

	// Amount of pool asset changed by fee and gas
	AssetEarned *string `json:"assetEarned,omitempty"`

	// Asset return on investment
	AssetROI *string `json:"assetROI,omitempty"`

	// Total Asset staked
	AssetStakedTotal *string `json:"assetStakedTotal,omitempty"`

	// Number of RUNE->ASSET transactions
	BuyAssetCount *string `json:"buyAssetCount,omitempty"`

	// Average sell Asset fee size for RUNE->ASSET (in ASSET)
	BuyFeeAverage *string `json:"buyFeeAverage,omitempty"`

	// Total fees (in Asset)
	BuyFeesTotal *string `json:"buyFeesTotal,omitempty"`

	// Average trade slip for RUNE->ASSET in %
	BuySlipAverage *string `json:"buySlipAverage,omitempty"`

	// Average Asset buy transaction size for (RUNE->ASSET) (in ASSET)
	BuyTxAverage *string `json:"buyTxAverage,omitempty"`

	// Total Asset buy volume (RUNE->ASSET) (in RUNE)
	BuyVolume *string `json:"buyVolume,omitempty"`

	// (1 + (poolEarned/poolDepth)) ^ 12 -1
	PoolAPY *string `json:"poolAPY,omitempty"`

	// Total depth of both sides (in RUNE)
	PoolDepth *string `json:"poolDepth,omitempty"`

	// (assetChanges * price) + runeEarned
	PoolEarned *string `json:"poolEarned,omitempty"`

	// Average pool fee
	PoolFeeAverage *string `json:"poolFeeAverage,omitempty"`

	// Total fees
	PoolFeesTotal *string `json:"poolFeesTotal,omitempty"`

	// Pool ROI (average of RUNE and Asset ROI)
	PoolROI *string `json:"poolROI,omitempty"`

	// Pool ROI over 12 months
	PoolROI12 *string `json:"poolROI12,omitempty"`

	// Average pool slip
	PoolSlipAverage *string `json:"poolSlipAverage,omitempty"`

	// Rune value staked Total
	PoolStakedTotal *string `json:"poolStakedTotal,omitempty"`

	// Average pool transaction
	PoolTxAverage *string `json:"poolTxAverage,omitempty"`

	// Total pool units outstanding
	PoolUnits *string `json:"poolUnits,omitempty"`

	// Two-way volume of all-time (in RUNE)
	PoolVolume *string `json:"poolVolume,omitempty"`

	// Two-way volume in 24hrs (in RUNE)
	PoolVolume24hr *string `json:"poolVolume24hr,omitempty"`

	// Price of Asset (in RUNE).
	Price *string `json:"price,omitempty"`

	// Total current Rune balance
	RuneDepth *string `json:"runeDepth,omitempty"`

	// Amount of pool rune changed by fee,reward and gas
	RuneEarned *string `json:"runeEarned,omitempty"`

	// RUNE return on investment
	RuneROI *string `json:"runeROI,omitempty"`

	// Total RUNE staked
	RuneStakedTotal *string `json:"runeStakedTotal,omitempty"`

	// Number of ASSET->RUNE transactions
	SellAssetCount *string `json:"sellAssetCount,omitempty"`

	// Average buy Asset fee size for ASSET->RUNE (in RUNE)
	SellFeeAverage *string `json:"sellFeeAverage,omitempty"`

	// Total fees (in RUNE)
	SellFeesTotal *string `json:"sellFeesTotal,omitempty"`

	// Average trade slip for ASSET->RUNE in %
	SellSlipAverage *string `json:"sellSlipAverage,omitempty"`

	// Average Asset sell transaction size (ASSET>RUNE) (in RUNE)
	SellTxAverage *string `json:"sellTxAverage,omitempty"`

	// Total Asset sell volume (ASSET>RUNE) (in RUNE).
	SellVolume *string `json:"sellVolume,omitempty"`

	// Number of stake transactions
	StakeTxCount *string `json:"stakeTxCount,omitempty"`

	// Number of unique stakers
	StakersCount *string `json:"stakersCount,omitempty"`

	// Number of stake & withdraw transactions
	StakingTxCount *string `json:"stakingTxCount,omitempty"`
	Status         *string `json:"status,omitempty"`

	// Number of unique swappers interacting with pool
	SwappersCount *string `json:"swappersCount,omitempty"`

	// Number of swapping transactions in the pool (buys and sells)
	SwappingTxCount *string `json:"swappingTxCount,omitempty"`

	// Number of withdraw transactions
	WithdrawTxCount *string `json:"withdrawTxCount,omitempty"`
}

// PoolEarning defines model for PoolEarning.
type PoolEarning struct {

	// number of days that pool was enabled in past 30 days
	LastMonthActiveDays *string `json:"lastMonthActiveDays,omitempty"`

	// sum of asset donated to the pool by add event in past 30 days
	LastMonthAssetDonation *string `json:"lastMonthAssetDonation,omitempty"`

	// sum of buy fee in rune in past 30 days
	LastMonthBuyFee *string `json:"lastMonthBuyFee,omitempty"`

	// sum of gas paid from asset of this pool in past 30 days
	LastMonthGasPaid *string `json:"lastMonthGasPaid,omitempty"`

	// sum of gas reimbursed to rune of this pool in past 30 days
	LastMonthGasReimbursed *string `json:"lastMonthGasReimbursed,omitempty"`

	// sum of pool deficit in reward event in past 30 days
	LastMonthPoolDeficit *string `json:"lastMonthPoolDeficit,omitempty"`

	// sum of donation to this pool in past 30 days (lastMonthAssetDonation*price + lastMonthRuneDonation)
	LastMonthPoolDonation *string `json:"lastMonthPoolDonation,omitempty"`

	// sum of pool Earning in past 30 days (lastMonthPoolDonation+lastMonthPoolFee + lastMonthReward - lastMonthPoolDeficit + lastMonthGasReimbursed + (lastMonthGasPaid * price))
	LastMonthPoolEarning *string `json:"lastMonthPoolEarning,omitempty"`

	// sum of pool sell fee in rune in past 30 days (lastMonthBuyFee+lastMonthSellFee)
	LastMonthPoolFee *string `json:"lastMonthPoolFee,omitempty"`

	// sum of rewards in reward event in past 30 days
	LastMonthReward *string `json:"lastMonthReward,omitempty"`

	// sum of rune donated to the pool by add event in past 30 days
	LastMonthRuneDonation *string `json:"lastMonthRuneDonation,omitempty"`

	// sum of sell fee in rune in past 30 days
	LastMonthSellFee *string `json:"lastMonthSellFee,omitempty"`

	// lastMonthPoolEarning/poolDepth (lastMonthPoolEarning may extrapolate if pool was active less than 30 days)
	PeriodicRate *string `json:"periodicRate,omitempty"`

	// pool name
	Pool *string `json:"pool,omitempty"`

	// (1 + periodicRate ) ^ 12 -1
	PoolAPY *string `json:"poolAPY,omitempty"`

	// pool depth (2 * rune depth)
	PoolDepth *string `json:"poolDepth,omitempty"`

	// pool price in rune
	Price *string `json:"price,omitempty"`

	// sum of asset donated to the pool by add event
	TotalAssetDonation *string `json:"totalAssetDonation,omitempty"`

	// sum of buy fee in rune
	TotalBuyFee *string `json:"totalBuyFee,omitempty"`

	// sum of gas paid from asset of this pool
	TotalGasPaid *string `json:"totalGasPaid,omitempty"`

	// sum of gas reimbursed to rune of this pool
	TotalGasReimbursed *string `json:"totalGasReimbursed,omitempty"`

	// sum of pool deficit in reward event
	TotalPoolDeficit *string `json:"totalPoolDeficit,omitempty"`

	// sum of donation to this pool (totalAssetDonation*price + totalRuneDonation)
	TotalPoolDonation *string `json:"totalPoolDonation,omitempty"`

	// sum of pool Earning (totalPoolDonation+totalPoolFee + totalReward - totalPoolDeficit + totalGasReimbursed + (totalGasPaid * price))
	TotalPoolEarning *string `json:"totalPoolEarning,omitempty"`

	// sum of pool sell fee in rune (sellFee+buyFee)
	TotalPoolFee *string `json:"totalPoolFee,omitempty"`

	// sum of rewards in reward event
	TotalReward *string `json:"totalReward,omitempty"`

	// sum of rune donated to the pool by add event
	TotalRuneDonation *string `json:"totalRuneDonation,omitempty"`

	// sum of sell fee in rune
	TotalSellFee *string `json:"totalSellFee,omitempty"`
}

// Stakers defines model for Stakers.
type Stakers string

// StakersAddressData defines model for StakersAddressData.
type StakersAddressData struct {
	PoolsArray *[]Asset `json:"poolsArray,omitempty"`

	// Total value of earnings (in RUNE) across all pools.
	TotalEarned *string `json:"totalEarned,omitempty"`

	// Average of all pool ROIs.
	TotalROI *string `json:"totalROI,omitempty"`

	// Total staked (in RUNE) across all pools.
	TotalStaked *string `json:"totalStaked,omitempty"`
}

// StakersAssetData defines model for StakersAssetData.
type StakersAssetData struct {
	Asset *Asset `json:"asset,omitempty"`

	// Total of assets staked
	AssetStaked *string `json:"assetStaked,omitempty"`

	// Total of assets withdrawn
	AssetWithdrawn   *string `json:"assetWithdrawn,omitempty"`
	DateFirstStaked  *int64  `json:"dateFirstStaked,omitempty"`
	HeightLastStaked *int64  `json:"heightLastStaked,omitempty"`

	// Total of rune staked
	RuneStaked *string `json:"runeStaked,omitempty"`

	// Total of rune withdrawn
	RuneWithdrawn *string `json:"runeWithdrawn,omitempty"`

	// Represents ownership of a pool.
	Units *string `json:"units,omitempty"`
}

// StatsData defines model for StatsData.
type StatsData struct {

	// Daily active users (unique addresses interacting)
	DailyActiveUsers *string `json:"dailyActiveUsers,omitempty"`

	// Daily transactions
	DailyTx *string `json:"dailyTx,omitempty"`

	// Monthly active users
	MonthlyActiveUsers *string `json:"monthlyActiveUsers,omitempty"`

	// Monthly transactions
	MonthlyTx *string `json:"monthlyTx,omitempty"`

	// Number of active pools
	PoolCount *string `json:"poolCount,omitempty"`

	// Total buying transactions
	TotalAssetBuys *string `json:"totalAssetBuys,omitempty"`

	// Total selling transactions
	TotalAssetSells *string `json:"totalAssetSells,omitempty"`

	// Total RUNE balances
	TotalDepth *string `json:"totalDepth,omitempty"`

	// Total earned (in RUNE Value).
	TotalEarned *string `json:"totalEarned,omitempty"`

	// Total staking transactions
	TotalStakeTx *string `json:"totalStakeTx,omitempty"`

	// Total staked (in RUNE Value).
	TotalStaked *string `json:"totalStaked,omitempty"`

	// Total transactions
	TotalTx *string `json:"totalTx,omitempty"`

	// Total unique swappers & stakers
	TotalUsers *string `json:"totalUsers,omitempty"`

	// Total (in RUNE Value) of all assets swapped since start.
	TotalVolume *string `json:"totalVolume,omitempty"`

	// Total (in RUNE Value) of all assets swapped in 24hrs
	TotalVolume24hr *string `json:"totalVolume24hr,omitempty"`

	// Total withdrawing transactions
	TotalWithdrawTx *string `json:"totalWithdrawTx,omitempty"`
}

// ThorchainBooleanConstants defines model for ThorchainBooleanConstants.
type ThorchainBooleanConstants struct {
	StrictBondStakeRatio *bool `json:"StrictBondStakeRatio,omitempty"`
}

// ThorchainConstants defines model for ThorchainConstants.
type ThorchainConstants struct {
	BoolValues   *ThorchainBooleanConstants `json:"bool_values,omitempty"`
	Int64Values  *ThorchainInt64Constants   `json:"int_64_values,omitempty"`
	StringValues *ThorchainStringConstants  `json:"string_values,omitempty"`
}

// ThorchainEndpoint defines model for ThorchainEndpoint.
type ThorchainEndpoint struct {
	Address *string `json:"address,omitempty"`
	Chain   *string `json:"chain,omitempty"`
	PubKey  *string `json:"pub_key,omitempty"`
}

// ThorchainEndpoints defines model for ThorchainEndpoints.
type ThorchainEndpoints struct {
	Current *[]ThorchainEndpoint `json:"current,omitempty"`
}

// ThorchainInt64Constants defines model for ThorchainInt64Constants.
type ThorchainInt64Constants struct {
	BadValidatorRate                *int64 `json:"BadValidatorRate,omitempty"`
	BlocksPerYear                   *int64 `json:"BlocksPerYear,omitempty"`
	DesireValidatorSet              *int64 `json:"DesireValidatorSet,omitempty"`
	DoubleSignMaxAge                *int64 `json:"DoubleSignMaxAge,omitempty"`
	EmissionCurve                   *int64 `json:"EmissionCurve,omitempty"`
	FailKeySignSlashPoints          *int64 `json:"FailKeySignSlashPoints,omitempty"`
	FailKeygenSlashPoints           *int64 `json:"FailKeygenSlashPoints,omitempty"`
	FundMigrationInterval           *int64 `json:"FundMigrationInterval,omitempty"`
	JailTimeKeygen                  *int64 `json:"JailTimeKeygen,omitempty"`
	JailTimeKeysign                 *int64 `json:"JailTimeKeysign,omitempty"`
	LackOfObservationPenalty        *int64 `json:"LackOfObservationPenalty,omitempty"`
	MinimumBondInRune               *int64 `json:"MinimumBondInRune,omitempty"`
	MinimumNodesForBFT              *int64 `json:"MinimumNodesForBFT,omitempty"`
	MinimumNodesForYggdrasil        *int64 `json:"MinimumNodesForYggdrasil,omitempty"`
	NewPoolCycle                    *int64 `json:"NewPoolCycle,omitempty"`
	ObserveSlashPoints              *int64 `json:"ObserveSlashPoints,omitempty"`
	OldValidatorRate                *int64 `json:"OldValidatorRate,omitempty"`
	RotatePerBlockHeight            *int64 `json:"RotatePerBlockHeight,omitempty"`
	RotateRetryBlocks               *int64 `json:"RotateRetryBlocks,omitempty"`
	SigningTransactionPeriod        *int64 `json:"SigningTransactionPeriod,omitempty"`
	StakeLockUpBlocks               *int64 `json:"StakeLockUpBlocks,omitempty"`
	TransactionFee                  *int64 `json:"TransactionFee,omitempty"`
	ValidatorRotateInNumBeforeFull  *int64 `json:"ValidatorRotateInNumBeforeFull,omitempty"`
	ValidatorRotateNumAfterFull     *int64 `json:"ValidatorRotateNumAfterFull,omitempty"`
	ValidatorRotateOutNumBeforeFull *int64 `json:"ValidatorRotateOutNumBeforeFull,omitempty"`
	WhiteListGasAsset               *int64 `json:"WhiteListGasAsset,omitempty"`
	YggFundLimit                    *int64 `json:"YggFundLimit,omitempty"`
}

// ThorchainLastblock defines model for ThorchainLastblock.
type ThorchainLastblock struct {
	Chain          *string `json:"chain,omitempty"`
	Lastobservedin *int64  `json:"lastobservedin,omitempty"`
	Lastsignedout  *int64  `json:"lastsignedout,omitempty"`
	Thorchain      *int64  `json:"thorchain,omitempty"`
}

// ThorchainStringConstants defines model for ThorchainStringConstants.
type ThorchainStringConstants struct {
	DefaultPoolStatus *string `json:"DefaultPoolStatus,omitempty"`
}

// TotalVolChanges defines model for TotalVolChanges.
type TotalVolChanges struct {

	// Sum of "rune_amount" of buy swap events
	BuyVolume *string `json:"buyVolume,omitempty"`

	// Sum of "rune_amount" of sell swap events
	SellVolume *string `json:"sellVolume,omitempty"`

	// Determining end of current time bucket in unix timestamp
	Time *int64 `json:"time,omitempty"`

	// buyVolume + sellVolume
	TotalVolume *string `json:"totalVolume,omitempty"`
}

// TxDetails defines model for TxDetails.
type TxDetails struct {
	Date    *int64  `json:"date,omitempty"`
	Events  *Event  `json:"events,omitempty"`
	Gas     *Gas    `json:"gas,omitempty"`
	Height  *string `json:"height,omitempty"`
	In      *Tx     `json:"in,omitempty"`
	Options *Option `json:"options,omitempty"`
	Out     *[]Tx   `json:"out,omitempty"`
	Pool    *Asset  `json:"pool,omitempty"`
	Status  *string `json:"status,omitempty"`
	Type    *string `json:"type,omitempty"`
}

// Asset defines model for asset.
type Asset string

// Coin defines model for coin.
type Coin struct {
	Amount *string `json:"amount,omitempty"`
	Asset  *Asset  `json:"asset,omitempty"`
}

// Coins defines model for coins.
type Coins []Coin

// Event defines model for event.
type Event struct {
	Fee        *string `json:"fee,omitempty"`
	Slip       *string `json:"slip,omitempty"`
	StakeUnits *string `json:"stakeUnits,omitempty"`
}

// Gas defines model for gas.
type Gas struct {
	Amount *string `json:"amount,omitempty"`
	Asset  *Asset  `json:"asset,omitempty"`
}

// Option defines model for option.
type Option struct {
	Asymmetry           *string `json:"asymmetry,omitempty"`
	PriceTarget         *string `json:"priceTarget,omitempty"`
	WithdrawBasisPoints *string `json:"withdrawBasisPoints,omitempty"`
}

// Tx defines model for tx.
type Tx struct {
	Address *string `json:"address,omitempty"`
	Coins   *Coins  `json:"coins,omitempty"`
	Memo    *string `json:"memo,omitempty"`
	TxID    *string `json:"txID,omitempty"`
}

// AssetsDetailedResponse defines model for AssetsDetailedResponse.
type AssetsDetailedResponse []AssetDetail

// GeneralErrorResponse defines model for GeneralErrorResponse.
type GeneralErrorResponse Error

// GetPoolAggChangesResponse defines model for GetPoolAggChangesResponse.
type GetPoolAggChangesResponse []PoolAggChanges

// GetPoolEarningResponse defines model for GetPoolEarningResponse.
type GetPoolEarningResponse PoolEarning

// HealthResponse defines model for HealthResponse.
type HealthResponse struct {
	CatchingUp    *bool  `json:"catching_up,omitempty"`
	Database      *bool  `json:"database,omitempty"`
	ScannerHeight *int64 `json:"scannerHeight,omitempty"`
}

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse NetworkInfo

// NodeKeyResponse defines model for NodeKeyResponse.
type NodeKeyResponse []NodeKey

// PoolsDetailedResponse defines model for PoolsDetailedResponse.
type PoolsDetailedResponse []PoolDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse []Asset

// StakersAddressDataResponse defines model for StakersAddressDataResponse.
type StakersAddressDataResponse StakersAddressData

// StakersAssetDataResponse defines model for StakersAssetDataResponse.
type StakersAssetDataResponse []StakersAssetData

// StakersResponse defines model for StakersResponse.
type StakersResponse []Stakers

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// ThorchainConstantsResponse defines model for ThorchainConstantsResponse.
type ThorchainConstantsResponse ThorchainConstants

// ThorchainEndpointsResponse defines model for ThorchainEndpointsResponse.
type ThorchainEndpointsResponse ThorchainEndpoints

// ThorchainLastblockResponse defines model for ThorchainLastblockResponse.
type ThorchainLastblockResponse ThorchainLastblock

// TotalVolChangesResponse defines model for TotalVolChangesResponse.
type TotalVolChangesResponse []TotalVolChanges

// TxsResponse defines model for TxsResponse.
type TxsResponse struct {
	Count *int64       `json:"count,omitempty"`
	Txs   *[]TxDetails `json:"txs,omitempty"`
}

// GetAssetInfoParams defines parameters for GetAssetInfo.
type GetAssetInfoParams struct {

	// One or more comma separated unique asset (CHAIN.SYMBOL)
	Asset string `json:"asset"`
}

// GetPoolAggChangesParams defines parameters for GetPoolAggChanges.
type GetPoolAggChangesParams struct {

	// Pool asset name
	Pool string `json:"pool"`

	// Interval of calculations
	Interval string `json:"interval"`

	// Start time of the query as unix timestamp
	From int64 `json:"from"`

	// End time of the query as unix timestamp
	To int64 `json:"to"`
}

// GetTotalVolChangesParams defines parameters for GetTotalVolChanges.
type GetTotalVolChangesParams struct {

	// Interval of calculations
	Interval string `json:"interval"`

	// Start time of the query as unix timestamp
	From int64 `json:"from"`

	// End time of the query as unix timestamp
	To int64 `json:"to"`
}

// GetPoolsDetailsParams defines parameters for GetPoolsDetails.
type GetPoolsDetailsParams struct {

	// Specifies the returning view
	View *string `json:"view,omitempty"`

	// One or more comma separated unique asset (CHAIN.SYMBOL)
	Asset string `json:"asset"`
}

// GetEarningReportParams defines parameters for GetEarningReport.
type GetEarningReportParams struct {

	// Pool asset name
	Pool string `json:"pool"`
}

// GetStakersAddressAndAssetDataParams defines parameters for GetStakersAddressAndAssetData.
type GetStakersAddressAndAssetDataParams struct {

	// One or more comma separated unique asset (CHAIN.SYMBOL)
	Asset string `json:"asset"`
}

// GetTxDetailsParams defines parameters for GetTxDetails.
type GetTxDetailsParams struct {

	// Address of sender or recipient of any in/out tx in event
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx in event
	Txid *string `json:"txid,omitempty"`

	// Any asset used in event (CHAIN.SYMBOL)
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of event
	Type *string `json:"type,omitempty"`

	// pagination offset
	Offset int64 `json:"offset"`

	// pagination limit
	Limit int64 `json:"limit"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get Asset Information
	// (GET /v1/assets)
	GetAssetInfo(ctx echo.Context, params GetAssetInfoParams) error
	// Get Documents
	// (GET /v1/doc)
	GetDocs(ctx echo.Context) error
	// Get Health
	// (GET /v1/health)
	GetHealth(ctx echo.Context) error
	// Get Pool Aggregated Changes
	// (GET /v1/history/pools)
	GetPoolAggChanges(ctx echo.Context, params GetPoolAggChangesParams) error
	// Get Total Volume Changes
	// (GET /v1/history/total_volume)
	GetTotalVolChanges(ctx echo.Context, params GetTotalVolChangesParams) error
	// Get Network Data
	// (GET /v1/network)
	GetNetworkData(ctx echo.Context) error
	// Get Node public keys
	// (GET /v1/nodes)
	GetNodes(ctx echo.Context) error
	// Get Asset Pools
	// (GET /v1/pools)
	GetPools(ctx echo.Context) error
	// Get Pools Details
	// (GET /v1/pools/detail)
	GetPoolsDetails(ctx echo.Context, params GetPoolsDetailsParams) error
	// Get Pool Earning Report
	// (GET /v1/pools/earning)
	GetEarningReport(ctx echo.Context, params GetEarningReportParams) error
	// Get Stakers
	// (GET /v1/stakers)
	GetStakersData(ctx echo.Context) error
	// Get Staker Data
	// (GET /v1/stakers/{address})
	GetStakersAddressData(ctx echo.Context, address string) error
	// Get Staker Pool Data
	// (GET /v1/stakers/{address}/pools)
	GetStakersAddressAndAssetData(ctx echo.Context, address string, params GetStakersAddressAndAssetDataParams) error
	// Get Global Stats
	// (GET /v1/stats)
	GetStats(ctx echo.Context) error
	// Get Swagger
	// (GET /v1/swagger.json)
	GetSwagger(ctx echo.Context) error
	// Get the Proxied THORChain Constants
	// (GET /v1/thorchain/constants)
	GetThorchainProxiedConstants(ctx echo.Context) error
	// Get the Proxied THORChain Lastblock
	// (GET /v1/thorchain/lastblock)
	GetThorchainProxiedLastblock(ctx echo.Context) error
	// Get the Proxied Pool Addresses
	// (GET /v1/thorchain/pool_addresses)
	GetThorchainProxiedEndpoints(ctx echo.Context) error
	// Get details of a tx by address, asset or tx-id
	// (GET /v1/txs)
	GetTxDetails(ctx echo.Context, params GetTxDetailsParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetAssetInfo converts echo context to params.
func (w *ServerInterfaceWrapper) GetAssetInfo(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAssetInfoParams
	// ------------- Required query parameter "asset" -------------

	err = runtime.BindQueryParameter("form", true, true, "asset", ctx.QueryParams(), &params.Asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAssetInfo(ctx, params)
	return err
}

// GetDocs converts echo context to params.
func (w *ServerInterfaceWrapper) GetDocs(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDocs(ctx)
	return err
}

// GetHealth converts echo context to params.
func (w *ServerInterfaceWrapper) GetHealth(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetHealth(ctx)
	return err
}

// GetPoolAggChanges converts echo context to params.
func (w *ServerInterfaceWrapper) GetPoolAggChanges(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPoolAggChangesParams
	// ------------- Required query parameter "pool" -------------

	err = runtime.BindQueryParameter("form", true, true, "pool", ctx.QueryParams(), &params.Pool)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pool: %s", err))
	}

	// ------------- Required query parameter "interval" -------------

	err = runtime.BindQueryParameter("form", true, true, "interval", ctx.QueryParams(), &params.Interval)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter interval: %s", err))
	}

	// ------------- Required query parameter "from" -------------

	err = runtime.BindQueryParameter("form", true, true, "from", ctx.QueryParams(), &params.From)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter from: %s", err))
	}

	// ------------- Required query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, true, "to", ctx.QueryParams(), &params.To)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter to: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPoolAggChanges(ctx, params)
	return err
}

// GetTotalVolChanges converts echo context to params.
func (w *ServerInterfaceWrapper) GetTotalVolChanges(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTotalVolChangesParams
	// ------------- Required query parameter "interval" -------------

	err = runtime.BindQueryParameter("form", true, true, "interval", ctx.QueryParams(), &params.Interval)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter interval: %s", err))
	}

	// ------------- Required query parameter "from" -------------

	err = runtime.BindQueryParameter("form", true, true, "from", ctx.QueryParams(), &params.From)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter from: %s", err))
	}

	// ------------- Required query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, true, "to", ctx.QueryParams(), &params.To)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter to: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTotalVolChanges(ctx, params)
	return err
}

// GetNetworkData converts echo context to params.
func (w *ServerInterfaceWrapper) GetNetworkData(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNetworkData(ctx)
	return err
}

// GetNodes converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodes(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodes(ctx)
	return err
}

// GetPools converts echo context to params.
func (w *ServerInterfaceWrapper) GetPools(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPools(ctx)
	return err
}

// GetPoolsDetails converts echo context to params.
func (w *ServerInterfaceWrapper) GetPoolsDetails(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPoolsDetailsParams
	// ------------- Optional query parameter "view" -------------

	err = runtime.BindQueryParameter("form", true, false, "view", ctx.QueryParams(), &params.View)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter view: %s", err))
	}

	// ------------- Required query parameter "asset" -------------

	err = runtime.BindQueryParameter("form", true, true, "asset", ctx.QueryParams(), &params.Asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPoolsDetails(ctx, params)
	return err
}

// GetEarningReport converts echo context to params.
func (w *ServerInterfaceWrapper) GetEarningReport(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetEarningReportParams
	// ------------- Required query parameter "pool" -------------

	err = runtime.BindQueryParameter("form", true, true, "pool", ctx.QueryParams(), &params.Pool)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pool: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetEarningReport(ctx, params)
	return err
}

// GetStakersData converts echo context to params.
func (w *ServerInterfaceWrapper) GetStakersData(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStakersData(ctx)
	return err
}

// GetStakersAddressData converts echo context to params.
func (w *ServerInterfaceWrapper) GetStakersAddressData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStakersAddressData(ctx, address)
	return err
}

// GetStakersAddressAndAssetData converts echo context to params.
func (w *ServerInterfaceWrapper) GetStakersAddressAndAssetData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetStakersAddressAndAssetDataParams
	// ------------- Required query parameter "asset" -------------

	err = runtime.BindQueryParameter("form", true, true, "asset", ctx.QueryParams(), &params.Asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStakersAddressAndAssetData(ctx, address, params)
	return err
}

// GetStats converts echo context to params.
func (w *ServerInterfaceWrapper) GetStats(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStats(ctx)
	return err
}

// GetSwagger converts echo context to params.
func (w *ServerInterfaceWrapper) GetSwagger(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSwagger(ctx)
	return err
}

// GetThorchainProxiedConstants converts echo context to params.
func (w *ServerInterfaceWrapper) GetThorchainProxiedConstants(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetThorchainProxiedConstants(ctx)
	return err
}

// GetThorchainProxiedLastblock converts echo context to params.
func (w *ServerInterfaceWrapper) GetThorchainProxiedLastblock(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetThorchainProxiedLastblock(ctx)
	return err
}

// GetThorchainProxiedEndpoints converts echo context to params.
func (w *ServerInterfaceWrapper) GetThorchainProxiedEndpoints(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetThorchainProxiedEndpoints(ctx)
	return err
}

// GetTxDetails converts echo context to params.
func (w *ServerInterfaceWrapper) GetTxDetails(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTxDetailsParams
	// ------------- Optional query parameter "address" -------------

	err = runtime.BindQueryParameter("form", true, false, "address", ctx.QueryParams(), &params.Address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Optional query parameter "txid" -------------

	err = runtime.BindQueryParameter("form", true, false, "txid", ctx.QueryParams(), &params.Txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	// ------------- Optional query parameter "asset" -------------

	err = runtime.BindQueryParameter("form", true, false, "asset", ctx.QueryParams(), &params.Asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// ------------- Optional query parameter "type" -------------

	err = runtime.BindQueryParameter("form", true, false, "type", ctx.QueryParams(), &params.Type)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter type: %s", err))
	}

	// ------------- Required query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, true, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Required query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, true, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTxDetails(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/v1/assets", wrapper.GetAssetInfo)
	router.GET("/v1/doc", wrapper.GetDocs)
	router.GET("/v1/health", wrapper.GetHealth)
	router.GET("/v1/history/pools", wrapper.GetPoolAggChanges)
	router.GET("/v1/history/total_volume", wrapper.GetTotalVolChanges)
	router.GET("/v1/network", wrapper.GetNetworkData)
	router.GET("/v1/nodes", wrapper.GetNodes)
	router.GET("/v1/pools", wrapper.GetPools)
	router.GET("/v1/pools/detail", wrapper.GetPoolsDetails)
	router.GET("/v1/pools/earning", wrapper.GetEarningReport)
	router.GET("/v1/stakers", wrapper.GetStakersData)
	router.GET("/v1/stakers/:address", wrapper.GetStakersAddressData)
	router.GET("/v1/stakers/:address/pools", wrapper.GetStakersAddressAndAssetData)
	router.GET("/v1/stats", wrapper.GetStats)
	router.GET("/v1/swagger.json", wrapper.GetSwagger)
	router.GET("/v1/thorchain/constants", wrapper.GetThorchainProxiedConstants)
	router.GET("/v1/thorchain/lastblock", wrapper.GetThorchainProxiedLastblock)
	router.GET("/v1/thorchain/pool_addresses", wrapper.GetThorchainProxiedEndpoints)
	router.GET("/v1/txs", wrapper.GetTxDetails)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}

