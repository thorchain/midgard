// Package http provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package http

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// AssetDetail defines model for AssetDetail.
type AssetDetail struct {
	Asset       *Asset  `json:"asset,omitempty"`
	DateCreated *int64  `json:"dateCreated,omitempty"`
	PriceRune   *string `json:"priceRune,omitempty"`
}

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward *string `json:"blockReward,omitempty"`
	BondReward  *string `json:"bondReward,omitempty"`
	StakeReward *string `json:"stakeReward,omitempty"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {

	// Average bond of active nodes
	AverageActiveBond *string `json:"averageActiveBond,omitempty"`

	// Average bond of standby nodes
	AverageStandbyBond *string `json:"averageStandbyBond,omitempty"`

	// Maxinum bond of active nodes
	MaximumActiveBond *string `json:"maximumActiveBond,omitempty"`

	// Maximum bond of standby nodes
	MaximumStandbyBond *string `json:"maximumStandbyBond,omitempty"`

	// Median bond of active nodes
	MedianActiveBond *string `json:"medianActiveBond,omitempty"`

	// Median bond of standby nodes
	MedianStandbyBond *string `json:"medianStandbyBond,omitempty"`

	// Minumum bond of active nodes
	MinimumActiveBond *string `json:"minimumActiveBond,omitempty"`

	// Minumum bond of standby nodes
	MinimumStandbyBond *string `json:"minimumStandbyBond,omitempty"`

	// Total bond of active nodes
	TotalActiveBond *string `json:"totalActiveBond,omitempty"`

	// Total bond of standby nodes
	TotalStandbyBond *string `json:"totalStandbyBond,omitempty"`
}

// Error defines model for Error.
type Error struct {
	Error string `json:"error"`
}

// NetworkInfo defines model for NetworkInfo.
type NetworkInfo struct {

	// Array of Active Bonds
	ActiveBonds *[]string `json:"activeBonds,omitempty"`

	// Number of Active Nodes
	ActiveNodeCount *int          `json:"activeNodeCount,omitempty"`
	BlockRewards    *BlockRewards `json:"blockRewards,omitempty"`
	BondMetrics     *BondMetrics  `json:"bondMetrics,omitempty"`

	// (1 + (bondReward * blocksPerMonth/totalActiveBond)) ^ 12 -1
	BondingAPY *string `json:"bondingAPY,omitempty"`
	BondingROI *string `json:"bondingROI,omitempty"`

	// (1 + (stakeReward * blocksPerMonth/totalDepth of active pools)) ^ 12 -1
	LiquidityAPY    *string `json:"liquidityAPY,omitempty"`
	NextChurnHeight *string `json:"nextChurnHeight,omitempty"`

	// The remaining time of pool activation (in blocks)
	PoolActivationCountdown *int64  `json:"poolActivationCountdown,omitempty"`
	PoolShareFactor         *string `json:"poolShareFactor,omitempty"`
	StakingROI              *string `json:"stakingROI,omitempty"`

	// Array of Standby Bonds
	StandbyBonds *[]string `json:"standbyBonds,omitempty"`

	// Number of Standby Nodes
	StandbyNodeCount *int `json:"standbyNodeCount,omitempty"`

	// Total left in Reserve
	TotalReserve *string `json:"totalReserve,omitempty"`

	// Total Rune Staked in Pools
	TotalStaked *string `json:"totalStaked,omitempty"`
}

// NodeKey defines model for NodeKey.
type NodeKey struct {

	// ed25519 public key
	Ed25519 *string `json:"ed25519,omitempty"`

	// secp256k1 public key
	Secp256k1 *string `json:"secp256k1,omitempty"`
}

// PoolAggChanges defines model for PoolAggChanges.
type PoolAggChanges struct {

	// Total changes in asset depth at this time bucket
	AssetChanges *string `json:"assetChanges,omitempty"`

	// Depth of asset at the end of current time bucket
	AssetDepth *string `json:"assetDepth,omitempty"`

	// Total asset staked
	AssetStaked *string `json:"assetStaked,omitempty"`

	// Total asset withdrawn
	AssetWithdrawn *string `json:"assetWithdrawn,omitempty"`

	// Count of buy swaps
	BuyCount *int64 `json:"buyCount,omitempty"`

	// Sum of "rune_amount" of buy swap events
	BuyVolume *string `json:"buyVolume,omitempty"`

	// Total amount of rune, paid by the network to neutralize "gasUsed" changes
	GasReplenished *string `json:"gasReplenished,omitempty"`

	// Total amount of asset used as gas for network transactions (e.g. BNB.BNB, ETH.ETH)
	GasUsed *string `json:"gasUsed,omitempty"`

	// buyVolume + sellVolume
	PoolVolume *string `json:"poolVolume,omitempty"`

	// Asset price in rune at the end of current time bucket
	Price *string `json:"price,omitempty"`

	// Sum of "rewards" events in rune
	Reward *string `json:"reward,omitempty"`

	// Total changes in rune depth at this time bucket
	RuneChanges *string `json:"runeChanges,omitempty"`

	// Depth of rune at the end of current time bucket
	RuneDepth *string `json:"runeDepth,omitempty"`

	// Total rune staked
	RuneStaked *string `json:"runeStaked,omitempty"`

	// Total rune withdrawn
	RuneWithdrawn *string `json:"runeWithdrawn,omitempty"`

	// Count of sell swaps
	SellCount *int64 `json:"sellCount,omitempty"`

	// Sum of "rune_amount" of sell swap events
	SellVolume *string `json:"sellVolume,omitempty"`

	// Count of stake events
	StakeCount *int64 `json:"stakeCount,omitempty"`

	// Determining end of current time bucket in unix timestamp
	Time *int64 `json:"time,omitempty"`

	// Total changes in pool units (stakes/withdraws)
	UnitsChanges *string `json:"unitsChanges,omitempty"`

	// Count of withdraw events
	WithdrawCount *int64 `json:"withdrawCount,omitempty"`
}

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	Asset *Asset `json:"asset,omitempty"`

	// Total current Asset balance
	AssetDepth *string `json:"assetDepth,omitempty"`

	// Amount of pool asset changed by fee and gas
	AssetEarned *string `json:"assetEarned,omitempty"`

	// Asset return on investment
	AssetROI *string `json:"assetROI,omitempty"`

	// Total Asset staked
	AssetStakedTotal *string `json:"assetStakedTotal,omitempty"`

	// Number of RUNE->ASSET transactions
	BuyAssetCount *string `json:"buyAssetCount,omitempty"`

	// Average sell Asset fee size for RUNE->ASSET (in ASSET)
	BuyFeeAverage *string `json:"buyFeeAverage,omitempty"`

	// Total fees (in Asset)
	BuyFeesTotal *string `json:"buyFeesTotal,omitempty"`

	// Average trade slip for RUNE->ASSET in %
	BuySlipAverage *string `json:"buySlipAverage,omitempty"`

	// Average Asset buy transaction size for (RUNE->ASSET) (in ASSET)
	BuyTxAverage *string `json:"buyTxAverage,omitempty"`

	// Total Asset buy volume (RUNE->ASSET) (in RUNE)
	BuyVolume *string `json:"buyVolume,omitempty"`

	// (1 + (poolEarned/poolDepth)) ^ 12 -1
	PoolAPY *string `json:"poolAPY,omitempty"`

	// Total depth of both sides (in RUNE)
	PoolDepth *string `json:"poolDepth,omitempty"`

	// (assetChanges * price) + runeEarned
	PoolEarned *string `json:"poolEarned,omitempty"`

	// Average pool fee
	PoolFeeAverage *string `json:"poolFeeAverage,omitempty"`

	// Total fees
	PoolFeesTotal *string `json:"poolFeesTotal,omitempty"`

	// Pool ROI (average of RUNE and Asset ROI)
	PoolROI *string `json:"poolROI,omitempty"`

	// Pool ROI over 12 months
	PoolROI12 *string `json:"poolROI12,omitempty"`

	// Average pool slip
	PoolSlipAverage *string `json:"poolSlipAverage,omitempty"`

	// Rune value staked Total
	PoolStakedTotal *string `json:"poolStakedTotal,omitempty"`

	// Average pool transaction
	PoolTxAverage *string `json:"poolTxAverage,omitempty"`

	// Total pool units outstanding
	PoolUnits *string `json:"poolUnits,omitempty"`

	// Two-way volume of all-time (in RUNE)
	PoolVolume *string `json:"poolVolume,omitempty"`

	// Two-way volume in 24hrs (in RUNE)
	PoolVolume24hr *string `json:"poolVolume24hr,omitempty"`

	// Price of Asset (in RUNE).
	Price *string `json:"price,omitempty"`

	// Total current Rune balance
	RuneDepth *string `json:"runeDepth,omitempty"`

	// Amount of pool rune changed by fee,reward and gas
	RuneEarned *string `json:"runeEarned,omitempty"`

	// RUNE return on investment
	RuneROI *string `json:"runeROI,omitempty"`

	// Total RUNE staked
	RuneStakedTotal *string `json:"runeStakedTotal,omitempty"`

	// Number of ASSET->RUNE transactions
	SellAssetCount *string `json:"sellAssetCount,omitempty"`

	// Average buy Asset fee size for ASSET->RUNE (in RUNE)
	SellFeeAverage *string `json:"sellFeeAverage,omitempty"`

	// Total fees (in RUNE)
	SellFeesTotal *string `json:"sellFeesTotal,omitempty"`

	// Average trade slip for ASSET->RUNE in %
	SellSlipAverage *string `json:"sellSlipAverage,omitempty"`

	// Average Asset sell transaction size (ASSET>RUNE) (in RUNE)
	SellTxAverage *string `json:"sellTxAverage,omitempty"`

	// Total Asset sell volume (ASSET>RUNE) (in RUNE).
	SellVolume *string `json:"sellVolume,omitempty"`

	// Number of stake transactions
	StakeTxCount *string `json:"stakeTxCount,omitempty"`

	// Number of unique stakers
	StakersCount *string `json:"stakersCount,omitempty"`

	// Number of stake & withdraw transactions
	StakingTxCount *string `json:"stakingTxCount,omitempty"`
	Status         *string `json:"status,omitempty"`

	// Number of unique swappers interacting with pool
	SwappersCount *string `json:"swappersCount,omitempty"`

	// Number of swapping transactions in the pool (buys and sells)
	SwappingTxCount *string `json:"swappingTxCount,omitempty"`

	// Number of withdraw transactions
	WithdrawTxCount *string `json:"withdrawTxCount,omitempty"`
}

// PoolEarningDetail defines model for PoolEarningDetail.
type PoolEarningDetail struct {

	// number of days that pool was enabled in past 30 days
	LastMonthActiveDays *string `json:"lastMonthActiveDays,omitempty"`

	// sum of asset donated to the pool by add event in past 30 days
	LastMonthAssetDonation *string `json:"lastMonthAssetDonation,omitempty"`

	// sum of buy fee in rune in past 30 days
	LastMonthBuyFee *string `json:"lastMonthBuyFee,omitempty"`

	// sum of gas paid from asset of this pool in past 30 days
	LastMonthGasPaid *string `json:"lastMonthGasPaid,omitempty"`

	// sum of gas reimbursed to rune of this pool in past 30 days
	LastMonthGasReimbursed *string `json:"lastMonthGasReimbursed,omitempty"`

	// sum of pool deficit in reward event in past 30 days
	LastMonthPoolDeficit *string `json:"lastMonthPoolDeficit,omitempty"`

	// sum of donation to this pool in past 30 days (lastMonthAssetDonation*price + lastMonthRuneDonation)
	LastMonthPoolDonation *string `json:"lastMonthPoolDonation,omitempty"`

	// sum of pool Earning in past 30 days (lastMonthPoolDonation + lastMonthPoolFee + lastMonthReward + lastMonthPoolDeficit + lastMonthGasReimbursed - (lastMonthGasPaid * price))
	LastMonthPoolEarning *string `json:"lastMonthPoolEarning,omitempty"`

	// sum of pool sell fee in rune in past 30 days (lastMonthBuyFee+lastMonthSellFee)
	LastMonthPoolFee *string `json:"lastMonthPoolFee,omitempty"`

	// sum of rewards in reward event in past 30 days
	LastMonthReward *string `json:"lastMonthReward,omitempty"`

	// sum of rune donated to the pool by add event in past 30 days
	LastMonthRuneDonation *string `json:"lastMonthRuneDonation,omitempty"`

	// sum of sell fee in rune in past 30 days
	LastMonthSellFee *string `json:"lastMonthSellFee,omitempty"`

	// lastMonthPoolEarning/poolDepth (lastMonthPoolEarning may extrapolate if pool was active less than 30 days)
	PeriodicRate *string `json:"periodicRate,omitempty"`

	// pool name
	Pool *string `json:"pool,omitempty"`

	// (1 + periodicRate ) ^ 12 -1
	PoolAPY *string `json:"poolAPY,omitempty"`

	// pool depth (2 * rune depth)
	PoolDepth *string `json:"poolDepth,omitempty"`

	// pool price in rune
	Price *string `json:"price,omitempty"`

	// sum of asset donated to the pool by add event
	TotalAssetDonation *string `json:"totalAssetDonation,omitempty"`

	// sum of buy fee in rune
	TotalBuyFee *string `json:"totalBuyFee,omitempty"`

	// sum of gas paid from asset of this pool
	TotalGasPaid *string `json:"totalGasPaid,omitempty"`

	// sum of gas reimbursed to rune of this pool
	TotalGasReimbursed *string `json:"totalGasReimbursed,omitempty"`

	// sum of pool deficit in reward event
	TotalPoolDeficit *string `json:"totalPoolDeficit,omitempty"`

	// sum of donation to this pool (totalAssetDonation*price + totalRuneDonation)
	TotalPoolDonation *string `json:"totalPoolDonation,omitempty"`

	// sum of pool Earning (totalPoolDonation+totalPoolFee + totalReward + totalPoolDeficit + totalGasReimbursed - (totalGasPaid * price))
	TotalPoolEarning *string `json:"totalPoolEarning,omitempty"`

	// sum of pool sell fee in rune (sellFee+buyFee)
	TotalPoolFee *string `json:"totalPoolFee,omitempty"`

	// sum of rewards in reward event
	TotalReward *string `json:"totalReward,omitempty"`

	// sum of rune donated to the pool by add event
	TotalRuneDonation *string `json:"totalRuneDonation,omitempty"`

	// sum of sell fee in rune
	TotalSellFee *string `json:"totalSellFee,omitempty"`
}

// Stakers defines model for Stakers.
type Stakers string

// StakersAddressData defines model for StakersAddressData.
type StakersAddressData struct {
	PoolsArray *[]Asset `json:"poolsArray,omitempty"`

	// Total value of earnings (in RUNE) across all pools.
	TotalEarned *string `json:"totalEarned,omitempty"`

	// Average of all pool ROIs.
	TotalROI *string `json:"totalROI,omitempty"`

	// Total staked (in RUNE) across all pools.
	TotalStaked *string `json:"totalStaked,omitempty"`
}

// StakersAssetData defines model for StakersAssetData.
type StakersAssetData struct {
	Asset *Asset `json:"asset,omitempty"`

	// Total of assets staked
	AssetStaked *string `json:"assetStaked,omitempty"`

	// Total of assets withdrawn
	AssetWithdrawn   *string `json:"assetWithdrawn,omitempty"`
	DateFirstStaked  *int64  `json:"dateFirstStaked,omitempty"`
	HeightLastStaked *int64  `json:"heightLastStaked,omitempty"`

	// Total of rune staked
	RuneStaked *string `json:"runeStaked,omitempty"`

	// Total of rune withdrawn
	RuneWithdrawn *string `json:"runeWithdrawn,omitempty"`

	// Represents ownership of a pool.
	Units *string `json:"units,omitempty"`
}

// StatsChanges defines model for StatsChanges.
type StatsChanges struct {

	// Number of bootstrapped pools since network started
	BootstrappedPools *int64 `json:"bootstrappedPools,omitempty"`

	// Count of buy swaps
	BuyCount *int64 `json:"buyCount,omitempty"`

	// Sum of "rune_amount" of buy swap events
	BuyVolume *string `json:"buyVolume,omitempty"`

	// Number of enabled pools since network started
	EnabledPools *int64 `json:"enabledPools,omitempty"`

	// Determining end height of current time bucket
	EndHeight *int64 `json:"endHeight,omitempty"`

	// Count of sell swaps
	SellCount *int64 `json:"sellCount,omitempty"`

	// Sum of "rune_amount" of sell swap events
	SellVolume *string `json:"sellVolume,omitempty"`

	// Count of stake events
	StakeCount *int64 `json:"stakeCount,omitempty"`

	// Determining start height of current time bucket
	StartHeight *int64 `json:"startHeight,omitempty"`

	// Number of suspended pools since network started
	SuspendedPools *int64 `json:"suspendedPools,omitempty"`

	// Determining end of current time bucket in unix timestamp
	Time *int64 `json:"time,omitempty"`

	// Total deficit of all pools in the current time bucket
	TotalDeficit *string `json:"totalDeficit,omitempty"`

	// Total reward of all pools in the current time bucket
	TotalReward *string `json:"totalReward,omitempty"`

	// Total rune depth of all pools at the end of current time bucket
	TotalRuneDepth *string `json:"totalRuneDepth,omitempty"`

	// buyVolume + sellVolume
	TotalVolume *string `json:"totalVolume,omitempty"`

	// Count of withdraw events
	WithdrawCount *int64 `json:"withdrawCount,omitempty"`
}

// StatsData defines model for StatsData.
type StatsData struct {

	// Daily active users (unique addresses interacting)
	DailyActiveUsers *string `json:"dailyActiveUsers,omitempty"`

	// Daily transactions
	DailyTx *string `json:"dailyTx,omitempty"`

	// Monthly active users
	MonthlyActiveUsers *string `json:"monthlyActiveUsers,omitempty"`

	// Monthly transactions
	MonthlyTx *string `json:"monthlyTx,omitempty"`

	// Number of active pools
	PoolCount *string `json:"poolCount,omitempty"`

	// Total buying transactions
	TotalAssetBuys *string `json:"totalAssetBuys,omitempty"`

	// Total selling transactions
	TotalAssetSells *string `json:"totalAssetSells,omitempty"`

	// Total RUNE balances
	TotalDepth *string `json:"totalDepth,omitempty"`

	// Total earned (in RUNE Value).
	TotalEarned *string `json:"totalEarned,omitempty"`

	// Total staking transactions
	TotalStakeTx *string `json:"totalStakeTx,omitempty"`

	// Total staked (in RUNE Value).
	TotalStaked *string `json:"totalStaked,omitempty"`

	// Total transactions
	TotalTx *string `json:"totalTx,omitempty"`

	// Total unique swappers & stakers
	TotalUsers *string `json:"totalUsers,omitempty"`

	// Total (in RUNE Value) of all assets swapped since start.
	TotalVolume *string `json:"totalVolume,omitempty"`

	// Total (in RUNE Value) of all assets swapped in 24hrs
	TotalVolume24hr *string `json:"totalVolume24hr,omitempty"`

	// Total withdrawing transactions
	TotalWithdrawTx *string `json:"totalWithdrawTx,omitempty"`
}

// ThorchainBooleanConstants defines model for ThorchainBooleanConstants.
type ThorchainBooleanConstants struct {
	StrictBondStakeRatio *bool `json:"StrictBondStakeRatio,omitempty"`
}

// ThorchainConstants defines model for ThorchainConstants.
type ThorchainConstants struct {
	BoolValues   *ThorchainBooleanConstants `json:"bool_values,omitempty"`
	Int64Values  *ThorchainInt64Constants   `json:"int_64_values,omitempty"`
	StringValues *ThorchainStringConstants  `json:"string_values,omitempty"`
}

// ThorchainEndpoint defines model for ThorchainEndpoint.
type ThorchainEndpoint struct {
	Address *string `json:"address,omitempty"`
	Chain   *string `json:"chain,omitempty"`
	PubKey  *string `json:"pub_key,omitempty"`
}

// ThorchainEndpoints defines model for ThorchainEndpoints.
type ThorchainEndpoints struct {
	Current *[]ThorchainEndpoint `json:"current,omitempty"`
}

// ThorchainInt64Constants defines model for ThorchainInt64Constants.
type ThorchainInt64Constants struct {
	BadValidatorRate                *int64 `json:"BadValidatorRate,omitempty"`
	BlocksPerYear                   *int64 `json:"BlocksPerYear,omitempty"`
	DesireValidatorSet              *int64 `json:"DesireValidatorSet,omitempty"`
	DoubleSignMaxAge                *int64 `json:"DoubleSignMaxAge,omitempty"`
	EmissionCurve                   *int64 `json:"EmissionCurve,omitempty"`
	FailKeySignSlashPoints          *int64 `json:"FailKeySignSlashPoints,omitempty"`
	FailKeygenSlashPoints           *int64 `json:"FailKeygenSlashPoints,omitempty"`
	FundMigrationInterval           *int64 `json:"FundMigrationInterval,omitempty"`
	JailTimeKeygen                  *int64 `json:"JailTimeKeygen,omitempty"`
	JailTimeKeysign                 *int64 `json:"JailTimeKeysign,omitempty"`
	LackOfObservationPenalty        *int64 `json:"LackOfObservationPenalty,omitempty"`
	MinimumBondInRune               *int64 `json:"MinimumBondInRune,omitempty"`
	MinimumNodesForBFT              *int64 `json:"MinimumNodesForBFT,omitempty"`
	MinimumNodesForYggdrasil        *int64 `json:"MinimumNodesForYggdrasil,omitempty"`
	NewPoolCycle                    *int64 `json:"NewPoolCycle,omitempty"`
	ObserveSlashPoints              *int64 `json:"ObserveSlashPoints,omitempty"`
	OldValidatorRate                *int64 `json:"OldValidatorRate,omitempty"`
	RotatePerBlockHeight            *int64 `json:"RotatePerBlockHeight,omitempty"`
	RotateRetryBlocks               *int64 `json:"RotateRetryBlocks,omitempty"`
	SigningTransactionPeriod        *int64 `json:"SigningTransactionPeriod,omitempty"`
	StakeLockUpBlocks               *int64 `json:"StakeLockUpBlocks,omitempty"`
	TransactionFee                  *int64 `json:"TransactionFee,omitempty"`
	ValidatorRotateInNumBeforeFull  *int64 `json:"ValidatorRotateInNumBeforeFull,omitempty"`
	ValidatorRotateNumAfterFull     *int64 `json:"ValidatorRotateNumAfterFull,omitempty"`
	ValidatorRotateOutNumBeforeFull *int64 `json:"ValidatorRotateOutNumBeforeFull,omitempty"`
	WhiteListGasAsset               *int64 `json:"WhiteListGasAsset,omitempty"`
	YggFundLimit                    *int64 `json:"YggFundLimit,omitempty"`
}

// ThorchainLastblock defines model for ThorchainLastblock.
type ThorchainLastblock struct {
	Chain          *string `json:"chain,omitempty"`
	Lastobservedin *int64  `json:"lastobservedin,omitempty"`
	Lastsignedout  *int64  `json:"lastsignedout,omitempty"`
	Thorchain      *int64  `json:"thorchain,omitempty"`
}

// ThorchainQueue defines model for ThorchainQueue.
type ThorchainQueue struct {
	Outbound *int64 `json:"outbound,omitempty"`
	Swap     *int64 `json:"swap,omitempty"`
}

// ThorchainStringConstants defines model for ThorchainStringConstants.
type ThorchainStringConstants struct {
	DefaultPoolStatus *string `json:"DefaultPoolStatus,omitempty"`
}

// TotalVolChanges defines model for TotalVolChanges.
type TotalVolChanges struct {

	// Sum of "rune_amount" of buy swap events
	BuyVolume *string `json:"buyVolume,omitempty"`

	// Sum of "rune_amount" of sell swap events
	SellVolume *string `json:"sellVolume,omitempty"`

	// Determining end of current time bucket in unix timestamp
	Time *int64 `json:"time,omitempty"`

	// buyVolume + sellVolume
	TotalVolume *string `json:"totalVolume,omitempty"`
}

// TxDetails defines model for TxDetails.
type TxDetails struct {
	Date    *int64  `json:"date,omitempty"`
	Events  *Event  `json:"events,omitempty"`
	Gas     *Gas    `json:"gas,omitempty"`
	Height  *string `json:"height,omitempty"`
	In      *Tx     `json:"in,omitempty"`
	Options *Option `json:"options,omitempty"`
	Out     *[]Tx   `json:"out,omitempty"`
	Pool    *Asset  `json:"pool,omitempty"`
	Status  *string `json:"status,omitempty"`
	Type    *string `json:"type,omitempty"`
}

// Asset defines model for asset.
type Asset string

// Coin defines model for coin.
type Coin struct {
	Amount *string `json:"amount,omitempty"`
	Asset  *Asset  `json:"asset,omitempty"`
}

// Coins defines model for coins.
type Coins []Coin

// Event defines model for event.
type Event struct {
	Fee        *string `json:"fee,omitempty"`
	Slip       *string `json:"slip,omitempty"`
	StakeUnits *string `json:"stakeUnits,omitempty"`
}

// Gas defines model for gas.
type Gas struct {
	Amount *string `json:"amount,omitempty"`
	Asset  *Asset  `json:"asset,omitempty"`
}

// Option defines model for option.
type Option struct {
	Asymmetry           *string `json:"asymmetry,omitempty"`
	PriceTarget         *string `json:"priceTarget,omitempty"`
	WithdrawBasisPoints *string `json:"withdrawBasisPoints,omitempty"`
}

// Tx defines model for tx.
type Tx struct {
	Address *string `json:"address,omitempty"`
	Coins   *Coins  `json:"coins,omitempty"`
	Memo    *string `json:"memo,omitempty"`
	TxID    *string `json:"txID,omitempty"`
}

// AssetsDetailedResponse defines model for AssetsDetailedResponse.
type AssetsDetailedResponse []AssetDetail

// GeneralErrorResponse defines model for GeneralErrorResponse.
type GeneralErrorResponse Error

// GetPoolAggChangesResponse defines model for GetPoolAggChangesResponse.
type GetPoolAggChangesResponse []PoolAggChanges

// GetPoolEarningDetailResponse defines model for GetPoolEarningDetailResponse.
type GetPoolEarningDetailResponse PoolEarningDetail

// HealthResponse defines model for HealthResponse.
type HealthResponse struct {
	CatchingUp    *bool  `json:"catching_up,omitempty"`
	Database      *bool  `json:"database,omitempty"`
	ScannerHeight *int64 `json:"scannerHeight,omitempty"`
}

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse NetworkInfo

// NodeKeyResponse defines model for NodeKeyResponse.
type NodeKeyResponse []NodeKey

// PoolsDetailedResponse defines model for PoolsDetailedResponse.
type PoolsDetailedResponse []PoolDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse []Asset

// StakersAddressDataResponse defines model for StakersAddressDataResponse.
type StakersAddressDataResponse StakersAddressData

// StakersAssetDataResponse defines model for StakersAssetDataResponse.
type StakersAssetDataResponse []StakersAssetData

// StakersResponse defines model for StakersResponse.
type StakersResponse []Stakers

// StatsChangesResponse defines model for StatsChangesResponse.
type StatsChangesResponse []StatsChanges

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// ThorchainConstantsResponse defines model for ThorchainConstantsResponse.
type ThorchainConstantsResponse ThorchainConstants

// ThorchainEndpointsResponse defines model for ThorchainEndpointsResponse.
type ThorchainEndpointsResponse ThorchainEndpoints

// ThorchainLastblockResponse defines model for ThorchainLastblockResponse.
type ThorchainLastblockResponse ThorchainLastblock

// ThorchainQueueResponse defines model for ThorchainQueueResponse.
type ThorchainQueueResponse ThorchainQueue

// TotalVolChangesResponse defines model for TotalVolChangesResponse.
type TotalVolChangesResponse []TotalVolChanges

// TxsResponse defines model for TxsResponse.
type TxsResponse struct {
	Count *int64       `json:"count,omitempty"`
	Txs   *[]TxDetails `json:"txs,omitempty"`
}

// GetAssetInfoParams defines parameters for GetAssetInfo.
type GetAssetInfoParams struct {

	// One or more comma separated unique asset (CHAIN.SYMBOL)
	Asset string `json:"asset"`
}

// GetPoolAggChangesParams defines parameters for GetPoolAggChanges.
type GetPoolAggChangesParams struct {

	// Pool asset name
	Pool string `json:"pool"`

	// Interval of calculations
	Interval string `json:"interval"`

	// Start time of the query as unix timestamp
	From int64 `json:"from"`

	// End time of the query as unix timestamp
	To int64 `json:"to"`
}

// GetStatsChangesParams defines parameters for GetStatsChanges.
type GetStatsChangesParams struct {

	// Interval of calculations
	Interval string `json:"interval"`

	// Start time of the query as unix timestamp
	From int64 `json:"from"`

	// End time of the query as unix timestamp
	To int64 `json:"to"`
}

// GetTotalVolChangesParams defines parameters for GetTotalVolChanges.
type GetTotalVolChangesParams struct {

	// Interval of calculations
	Interval string `json:"interval"`

	// Start time of the query as unix timestamp
	From int64 `json:"from"`

	// End time of the query as unix timestamp
	To int64 `json:"to"`
}

// GetPoolsDetailsParams defines parameters for GetPoolsDetails.
type GetPoolsDetailsParams struct {

	// Specifies the returning view
	View *string `json:"view,omitempty"`

	// One or more comma separated unique asset (CHAIN.SYMBOL)
	Asset string `json:"asset"`
}

// GetStakersAddressAndAssetDataParams defines parameters for GetStakersAddressAndAssetData.
type GetStakersAddressAndAssetDataParams struct {

	// One or more comma separated unique asset (CHAIN.SYMBOL)
	Asset string `json:"asset"`
}

// GetTxDetailsParams defines parameters for GetTxDetails.
type GetTxDetailsParams struct {

	// Address of sender or recipient of any in/out tx in event
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx in event
	Txid *string `json:"txid,omitempty"`

	// Any asset used in event (CHAIN.SYMBOL)
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of event
	Type *string `json:"type,omitempty"`

	// pagination offset
	Offset int64 `json:"offset"`

	// pagination limit
	Limit int64 `json:"limit"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get Asset Information
	// (GET /v1/assets)
	GetAssetInfo(ctx echo.Context, params GetAssetInfoParams) error
	// Get Documents
	// (GET /v1/doc)
	GetDocs(ctx echo.Context) error
	// Get Health
	// (GET /v1/health)
	GetHealth(ctx echo.Context) error
	// Get Pool Aggregated Changes
	// (GET /v1/history/pools)
	GetPoolAggChanges(ctx echo.Context, params GetPoolAggChangesParams) error
	// Get Stats Changes
	// (GET /v1/history/stats)
	GetStatsChanges(ctx echo.Context, params GetStatsChangesParams) error
	// Get Total Volume Changes
	// (GET /v1/history/total_volume)
	GetTotalVolChanges(ctx echo.Context, params GetTotalVolChangesParams) error
	// Get Network Data
	// (GET /v1/network)
	GetNetworkData(ctx echo.Context) error
	// Get Node public keys
	// (GET /v1/nodes)
	GetNodes(ctx echo.Context) error
	// Get Asset Pools
	// (GET /v1/pools)
	GetPools(ctx echo.Context) error
	// Get Pools Details
	// (GET /v1/pools/detail)
	GetPoolsDetails(ctx echo.Context, params GetPoolsDetailsParams) error
	// Get Pool Earning Detail
	// (GET /v1/pools/details/{pool}/earnings)
	GetEarningDetail(ctx echo.Context, pool string) error
	// Get Stakers
	// (GET /v1/stakers)
	GetStakersData(ctx echo.Context) error
	// Get Staker Data
	// (GET /v1/stakers/{address})
	GetStakersAddressData(ctx echo.Context, address string) error
	// Get Staker Pool Data
	// (GET /v1/stakers/{address}/pools)
	GetStakersAddressAndAssetData(ctx echo.Context, address string, params GetStakersAddressAndAssetDataParams) error
	// Get Global Stats
	// (GET /v1/stats)
	GetStats(ctx echo.Context) error
	// Get Swagger
	// (GET /v1/swagger.json)
	GetSwagger(ctx echo.Context) error
	// Get the Proxied THORChain Constants
	// (GET /v1/thorchain/constants)
	GetThorchainProxiedConstants(ctx echo.Context) error
	// Get the Proxied THORChain Lastblock
	// (GET /v1/thorchain/lastblock)
	GetThorchainProxiedLastblock(ctx echo.Context) error
	// Get the Proxied Pool Addresses
	// (GET /v1/thorchain/pool_addresses)
	GetThorchainProxiedEndpoints(ctx echo.Context) error
	// Get the Proxied THORChain Queue
	// (GET /v1/thorchain/queue)
	GetThorchainProxiedQueue(ctx echo.Context) error
	// Get details of a tx by address, asset or tx-id
	// (GET /v1/txs)
	GetTxDetails(ctx echo.Context, params GetTxDetailsParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetAssetInfo converts echo context to params.
func (w *ServerInterfaceWrapper) GetAssetInfo(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAssetInfoParams
	// ------------- Required query parameter "asset" -------------

	err = runtime.BindQueryParameter("form", true, true, "asset", ctx.QueryParams(), &params.Asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAssetInfo(ctx, params)
	return err
}

// GetDocs converts echo context to params.
func (w *ServerInterfaceWrapper) GetDocs(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDocs(ctx)
	return err
}

// GetHealth converts echo context to params.
func (w *ServerInterfaceWrapper) GetHealth(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetHealth(ctx)
	return err
}

// GetPoolAggChanges converts echo context to params.
func (w *ServerInterfaceWrapper) GetPoolAggChanges(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPoolAggChangesParams
	// ------------- Required query parameter "pool" -------------

	err = runtime.BindQueryParameter("form", true, true, "pool", ctx.QueryParams(), &params.Pool)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pool: %s", err))
	}

	// ------------- Required query parameter "interval" -------------

	err = runtime.BindQueryParameter("form", true, true, "interval", ctx.QueryParams(), &params.Interval)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter interval: %s", err))
	}

	// ------------- Required query parameter "from" -------------

	err = runtime.BindQueryParameter("form", true, true, "from", ctx.QueryParams(), &params.From)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter from: %s", err))
	}

	// ------------- Required query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, true, "to", ctx.QueryParams(), &params.To)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter to: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPoolAggChanges(ctx, params)
	return err
}

// GetStatsChanges converts echo context to params.
func (w *ServerInterfaceWrapper) GetStatsChanges(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetStatsChangesParams
	// ------------- Required query parameter "interval" -------------

	err = runtime.BindQueryParameter("form", true, true, "interval", ctx.QueryParams(), &params.Interval)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter interval: %s", err))
	}

	// ------------- Required query parameter "from" -------------

	err = runtime.BindQueryParameter("form", true, true, "from", ctx.QueryParams(), &params.From)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter from: %s", err))
	}

	// ------------- Required query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, true, "to", ctx.QueryParams(), &params.To)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter to: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStatsChanges(ctx, params)
	return err
}

// GetTotalVolChanges converts echo context to params.
func (w *ServerInterfaceWrapper) GetTotalVolChanges(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTotalVolChangesParams
	// ------------- Required query parameter "interval" -------------

	err = runtime.BindQueryParameter("form", true, true, "interval", ctx.QueryParams(), &params.Interval)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter interval: %s", err))
	}

	// ------------- Required query parameter "from" -------------

	err = runtime.BindQueryParameter("form", true, true, "from", ctx.QueryParams(), &params.From)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter from: %s", err))
	}

	// ------------- Required query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, true, "to", ctx.QueryParams(), &params.To)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter to: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTotalVolChanges(ctx, params)
	return err
}

// GetNetworkData converts echo context to params.
func (w *ServerInterfaceWrapper) GetNetworkData(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNetworkData(ctx)
	return err
}

// GetNodes converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodes(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodes(ctx)
	return err
}

// GetPools converts echo context to params.
func (w *ServerInterfaceWrapper) GetPools(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPools(ctx)
	return err
}

// GetPoolsDetails converts echo context to params.
func (w *ServerInterfaceWrapper) GetPoolsDetails(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPoolsDetailsParams
	// ------------- Optional query parameter "view" -------------

	err = runtime.BindQueryParameter("form", true, false, "view", ctx.QueryParams(), &params.View)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter view: %s", err))
	}

	// ------------- Required query parameter "asset" -------------

	err = runtime.BindQueryParameter("form", true, true, "asset", ctx.QueryParams(), &params.Asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPoolsDetails(ctx, params)
	return err
}

// GetEarningDetail converts echo context to params.
func (w *ServerInterfaceWrapper) GetEarningDetail(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "pool" -------------
	var pool string

	err = runtime.BindStyledParameter("simple", false, "pool", ctx.Param("pool"), &pool)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pool: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetEarningDetail(ctx, pool)
	return err
}

// GetStakersData converts echo context to params.
func (w *ServerInterfaceWrapper) GetStakersData(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStakersData(ctx)
	return err
}

// GetStakersAddressData converts echo context to params.
func (w *ServerInterfaceWrapper) GetStakersAddressData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStakersAddressData(ctx, address)
	return err
}

// GetStakersAddressAndAssetData converts echo context to params.
func (w *ServerInterfaceWrapper) GetStakersAddressAndAssetData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetStakersAddressAndAssetDataParams
	// ------------- Required query parameter "asset" -------------

	err = runtime.BindQueryParameter("form", true, true, "asset", ctx.QueryParams(), &params.Asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStakersAddressAndAssetData(ctx, address, params)
	return err
}

// GetStats converts echo context to params.
func (w *ServerInterfaceWrapper) GetStats(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStats(ctx)
	return err
}

// GetSwagger converts echo context to params.
func (w *ServerInterfaceWrapper) GetSwagger(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSwagger(ctx)
	return err
}

// GetThorchainProxiedConstants converts echo context to params.
func (w *ServerInterfaceWrapper) GetThorchainProxiedConstants(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetThorchainProxiedConstants(ctx)
	return err
}

// GetThorchainProxiedLastblock converts echo context to params.
func (w *ServerInterfaceWrapper) GetThorchainProxiedLastblock(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetThorchainProxiedLastblock(ctx)
	return err
}

// GetThorchainProxiedEndpoints converts echo context to params.
func (w *ServerInterfaceWrapper) GetThorchainProxiedEndpoints(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetThorchainProxiedEndpoints(ctx)
	return err
}

// GetThorchainProxiedQueue converts echo context to params.
func (w *ServerInterfaceWrapper) GetThorchainProxiedQueue(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetThorchainProxiedQueue(ctx)
	return err
}

// GetTxDetails converts echo context to params.
func (w *ServerInterfaceWrapper) GetTxDetails(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTxDetailsParams
	// ------------- Optional query parameter "address" -------------

	err = runtime.BindQueryParameter("form", true, false, "address", ctx.QueryParams(), &params.Address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Optional query parameter "txid" -------------

	err = runtime.BindQueryParameter("form", true, false, "txid", ctx.QueryParams(), &params.Txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	// ------------- Optional query parameter "asset" -------------

	err = runtime.BindQueryParameter("form", true, false, "asset", ctx.QueryParams(), &params.Asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// ------------- Optional query parameter "type" -------------

	err = runtime.BindQueryParameter("form", true, false, "type", ctx.QueryParams(), &params.Type)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter type: %s", err))
	}

	// ------------- Required query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, true, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Required query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, true, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTxDetails(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/v1/assets", wrapper.GetAssetInfo)
	router.GET("/v1/doc", wrapper.GetDocs)
	router.GET("/v1/health", wrapper.GetHealth)
	router.GET("/v1/history/pools", wrapper.GetPoolAggChanges)
	router.GET("/v1/history/stats", wrapper.GetStatsChanges)
	router.GET("/v1/history/total_volume", wrapper.GetTotalVolChanges)
	router.GET("/v1/network", wrapper.GetNetworkData)
	router.GET("/v1/nodes", wrapper.GetNodes)
	router.GET("/v1/pools", wrapper.GetPools)
	router.GET("/v1/pools/detail", wrapper.GetPoolsDetails)
	router.GET("/v1/pools/details/:pool/earnings", wrapper.GetEarningDetail)
	router.GET("/v1/stakers", wrapper.GetStakersData)
	router.GET("/v1/stakers/:address", wrapper.GetStakersAddressData)
	router.GET("/v1/stakers/:address/pools", wrapper.GetStakersAddressAndAssetData)
	router.GET("/v1/stats", wrapper.GetStats)
	router.GET("/v1/swagger.json", wrapper.GetSwagger)
	router.GET("/v1/thorchain/constants", wrapper.GetThorchainProxiedConstants)
	router.GET("/v1/thorchain/lastblock", wrapper.GetThorchainProxiedLastblock)
	router.GET("/v1/thorchain/pool_addresses", wrapper.GetThorchainProxiedEndpoints)
	router.GET("/v1/thorchain/queue", wrapper.GetThorchainProxiedQueue)
	router.GET("/v1/txs", wrapper.GetTxDetails)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"fC4dA357/N8AAAD//xtztMx7gwAA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}

