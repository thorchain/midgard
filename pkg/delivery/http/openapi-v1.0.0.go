// Package http provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package http

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// AssetDetail defines model for AssetDetail.
type AssetDetail struct {
	Asset       *Asset  `json:"asset,omitempty"`
	DateCreated *int64  `json:"dateCreated,omitempty"`
	PriceRune   *string `json:"priceRune,omitempty"`
}

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward *string `json:"blockReward,omitempty"`
	BondReward  *string `json:"bondReward,omitempty"`
	StakeReward *string `json:"stakeReward,omitempty"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {

	// Average bond of active nodes
	AverageActiveBond *string `json:"averageActiveBond,omitempty"`

	// Average bond of standby nodes
	AverageStandbyBond *string `json:"averageStandbyBond,omitempty"`

	// Maxinum bond of active nodes
	MaximumActiveBond *string `json:"maximumActiveBond,omitempty"`

	// Maximum bond of standby nodes
	MaximumStandbyBond *string `json:"maximumStandbyBond,omitempty"`

	// Median bond of active nodes
	MedianActiveBond *string `json:"medianActiveBond,omitempty"`

	// Median bond of standby nodes
	MedianStandbyBond *string `json:"medianStandbyBond,omitempty"`

	// Minumum bond of active nodes
	MinimumActiveBond *string `json:"minimumActiveBond,omitempty"`

	// Minumum bond of standby nodes
	MinimumStandbyBond *string `json:"minimumStandbyBond,omitempty"`

	// Total bond of active nodes
	TotalActiveBond *string `json:"totalActiveBond,omitempty"`

	// Total bond of standby nodes
	TotalStandbyBond *string `json:"totalStandbyBond,omitempty"`
}

// Error defines model for Error.
type Error struct {
	Error string `json:"error"`
}

// NetworkInfo defines model for NetworkInfo.
type NetworkInfo struct {

	// Array of Active Bonds
	ActiveBonds *[]string `json:"activeBonds,omitempty"`

	// Number of Active Nodes
	ActiveNodeCount *int          `json:"activeNodeCount,omitempty"`
	BlockRewards    *BlockRewards `json:"blockRewards,omitempty"`
	BondMetrics     *BondMetrics  `json:"bondMetrics,omitempty"`

	// (1 + (bondReward * blocksPerMonth/totalActiveBond)) ^ 12 -1
	BondingAPY *string `json:"bondingAPY,omitempty"`
	BondingROI *string `json:"bondingROI,omitempty"`

	// (1 + (stakeReward * blocksPerMonth/totalDepth of active pools)) ^ 12 -1
	LiquidityAPY    *string `json:"liquidityAPY,omitempty"`
	NextChurnHeight *string `json:"nextChurnHeight,omitempty"`

	// The remaining time of pool activation (in blocks)
	PoolActivationCountdown *int64  `json:"poolActivationCountdown,omitempty"`
	PoolShareFactor         *string `json:"poolShareFactor,omitempty"`
	StakingROI              *string `json:"stakingROI,omitempty"`

	// Array of Standby Bonds
	StandbyBonds *[]string `json:"standbyBonds,omitempty"`

	// Number of Standby Nodes
	StandbyNodeCount *int `json:"standbyNodeCount,omitempty"`

	// Total left in Reserve
	TotalReserve *string `json:"totalReserve,omitempty"`

	// Total Rune Staked in Pools
	TotalStaked *string `json:"totalStaked,omitempty"`
}

// NodeKey defines model for NodeKey.
type NodeKey struct {

	// ed25519 public key
	Ed25519 *string `json:"ed25519,omitempty"`

	// secp256k1 public key
	Secp256k1 *string `json:"secp256k1,omitempty"`
}

// PoolAggChanges defines model for PoolAggChanges.
type PoolAggChanges struct {

	// Total changes in asset depth at this time bucket
	AssetChanges *string `json:"assetChanges,omitempty"`

	// Depth of asset at the end of current time bucket
	AssetDepth *string `json:"assetDepth,omitempty"`

	// Total asset staked
	AssetStaked *string `json:"assetStaked,omitempty"`

	// Total asset withdrawn
	AssetWithdrawn *string `json:"assetWithdrawn,omitempty"`

	// Count of buy swaps
	BuyCount *int64 `json:"buyCount,omitempty"`

	// Sum of "rune_amount" of buy swap events
	BuyVolume *string `json:"buyVolume,omitempty"`

	// Total amount of rune, paid by the network to neutralize "gasUsed" changes
	GasReplenished *string `json:"gasReplenished,omitempty"`

	// Total amount of asset used as gas for network transactions (e.g. BNB.BNB, ETH.ETH)
	GasUsed *string `json:"gasUsed,omitempty"`

	// buyVolume + sellVolume
	PoolVolume *string `json:"poolVolume,omitempty"`

	// Asset price in rune at the end of current time bucket
	Price *string `json:"price,omitempty"`

	// Sum of "rewards" events in rune
	Reward *string `json:"reward,omitempty"`

	// Total changes in rune depth at this time bucket
	RuneChanges *string `json:"runeChanges,omitempty"`

	// Depth of rune at the end of current time bucket
	RuneDepth *string `json:"runeDepth,omitempty"`

	// Total rune staked
	RuneStaked *string `json:"runeStaked,omitempty"`

	// Total rune withdrawn
	RuneWithdrawn *string `json:"runeWithdrawn,omitempty"`

	// Count of sell swaps
	SellCount *int64 `json:"sellCount,omitempty"`

	// Sum of "rune_amount" of sell swap events
	SellVolume *string `json:"sellVolume,omitempty"`

	// Count of stake events
	StakeCount *int64 `json:"stakeCount,omitempty"`

	// Determining end of current time bucket in unix timestamp
	Time *int64 `json:"time,omitempty"`

	// Total changes in pool units (stakes/withdraws)
	UnitsChanges *string `json:"unitsChanges,omitempty"`

	// Count of withdraw events
	WithdrawCount *int64 `json:"withdrawCount,omitempty"`
}

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	Asset *Asset `json:"asset,omitempty"`

	// Total current Asset balance
	AssetDepth *string `json:"assetDepth,omitempty"`

	// Amount of pool asset changed by fee and gas
	AssetEarned *string `json:"assetEarned,omitempty"`

	// Asset return on investment
	AssetROI *string `json:"assetROI,omitempty"`

	// Total Asset staked
	AssetStakedTotal *string `json:"assetStakedTotal,omitempty"`

	// Number of RUNE->ASSET transactions
	BuyAssetCount *string `json:"buyAssetCount,omitempty"`

	// Average sell Asset fee size for RUNE->ASSET (in ASSET)
	BuyFeeAverage *string `json:"buyFeeAverage,omitempty"`

	// Total fees (in Asset)
	BuyFeesTotal *string `json:"buyFeesTotal,omitempty"`

	// Average trade slip for RUNE->ASSET in %
	BuySlipAverage *string `json:"buySlipAverage,omitempty"`

	// Average Asset buy transaction size for (RUNE->ASSET) (in ASSET)
	BuyTxAverage *string `json:"buyTxAverage,omitempty"`

	// Total Asset buy volume (RUNE->ASSET) (in RUNE)
	BuyVolume *string `json:"buyVolume,omitempty"`

	// (1 + (poolEarned/poolDepth)) ^ 12 -1
	PoolAPY *string `json:"poolAPY,omitempty"`

	// Total depth of both sides (in RUNE)
	PoolDepth *string `json:"poolDepth,omitempty"`

	// (assetChanges * price) + runeEarned
	PoolEarned *string `json:"poolEarned,omitempty"`

	// Average pool fee
	PoolFeeAverage *string `json:"poolFeeAverage,omitempty"`

	// Total fees
	PoolFeesTotal *string `json:"poolFeesTotal,omitempty"`

	// Pool ROI (average of RUNE and Asset ROI)
	PoolROI *string `json:"poolROI,omitempty"`

	// Pool ROI over 12 months
	PoolROI12 *string `json:"poolROI12,omitempty"`

	// Average pool slip
	PoolSlipAverage *string `json:"poolSlipAverage,omitempty"`

	// Rune value staked Total
	PoolStakedTotal *string `json:"poolStakedTotal,omitempty"`

	// Average pool transaction
	PoolTxAverage *string `json:"poolTxAverage,omitempty"`

	// Total pool units outstanding
	PoolUnits *string `json:"poolUnits,omitempty"`

	// Two-way volume of all-time (in RUNE)
	PoolVolume *string `json:"poolVolume,omitempty"`

	// Two-way volume in 24hrs (in RUNE)
	PoolVolume24hr *string `json:"poolVolume24hr,omitempty"`

	// Price of Asset (in RUNE).
	Price *string `json:"price,omitempty"`

	// Total current Rune balance
	RuneDepth *string `json:"runeDepth,omitempty"`

	// Amount of pool rune changed by fee,reward and gas
	RuneEarned *string `json:"runeEarned,omitempty"`

	// RUNE return on investment
	RuneROI *string `json:"runeROI,omitempty"`

	// Total RUNE staked
	RuneStakedTotal *string `json:"runeStakedTotal,omitempty"`

	// Number of ASSET->RUNE transactions
	SellAssetCount *string `json:"sellAssetCount,omitempty"`

	// Average buy Asset fee size for ASSET->RUNE (in RUNE)
	SellFeeAverage *string `json:"sellFeeAverage,omitempty"`

	// Total fees (in RUNE)
	SellFeesTotal *string `json:"sellFeesTotal,omitempty"`

	// Average trade slip for ASSET->RUNE in %
	SellSlipAverage *string `json:"sellSlipAverage,omitempty"`

	// Average Asset sell transaction size (ASSET>RUNE) (in RUNE)
	SellTxAverage *string `json:"sellTxAverage,omitempty"`

	// Total Asset sell volume (ASSET>RUNE) (in RUNE).
	SellVolume *string `json:"sellVolume,omitempty"`

	// Number of stake transactions
	StakeTxCount *string `json:"stakeTxCount,omitempty"`

	// Number of unique stakers
	StakersCount *string `json:"stakersCount,omitempty"`

	// Number of stake & withdraw transactions
	StakingTxCount *string `json:"stakingTxCount,omitempty"`
	Status         *string `json:"status,omitempty"`

	// Number of unique swappers interacting with pool
	SwappersCount *string `json:"swappersCount,omitempty"`

	// Number of swapping transactions in the pool (buys and sells)
	SwappingTxCount *string `json:"swappingTxCount,omitempty"`

	// Number of withdraw transactions
	WithdrawTxCount *string `json:"withdrawTxCount,omitempty"`
}

// PoolEarning defines model for PoolEarning.
type PoolEarning struct {
	LastMonthActiveDays    *string `json:"lastMonthActiveDays,omitempty"`
	LastMonthBuyFee        *string `json:"lastMonthBuyFee,omitempty"`
	LastMonthGasPaid       *string `json:"lastMonthGasPaid,omitempty"`
	LastMonthGasReimbursed *string `json:"lastMonthGasReimbursed,omitempty"`
	LastMonthPoolDeficit   *string `json:"lastMonthPoolDeficit,omitempty"`
	LastMonthPoolDonation  *string `json:"lastMonthPoolDonation,omitempty"`
	LastMonthPoolEarning   *string `json:"lastMonthPoolEarning,omitempty"`
	LastMonthPoolFee       *string `json:"lastMonthPoolFee,omitempty"`
	LastMonthReward        *string `json:"lastMonthReward,omitempty"`
	LastMonthSellFee       *string `json:"lastMonthSellFee,omitempty"`
	PeriodicRate           *string `json:"periodicRate,omitempty"`
	Pool                   *string `json:"pool,omitempty"`
	PoolAPY                *string `json:"poolAPY,omitempty"`
	PoolDepth              *string `json:"poolDepth,omitempty"`
	Price                  *string `json:"price,omitempty"`
	TotalBuyFee            *string `json:"totalBuyFee,omitempty"`
	TotalGasPaid           *string `json:"totalGasPaid,omitempty"`
	TotalGasReimbursed     *string `json:"totalGasReimbursed,omitempty"`
	TotalPoolDeficit       *string `json:"totalPoolDeficit,omitempty"`
	TotalPoolDonation      *string `json:"totalPoolDonation,omitempty"`
	TotalPoolEarning       *string `json:"totalPoolEarning,omitempty"`
	TotalPoolFee           *string `json:"totalPoolFee,omitempty"`
	TotalReward            *string `json:"totalReward,omitempty"`
	TotalSellFee           *string `json:"totalSellFee,omitempty"`
}

// Stakers defines model for Stakers.
type Stakers string

// StakersAddressData defines model for StakersAddressData.
type StakersAddressData struct {
	PoolsArray *[]Asset `json:"poolsArray,omitempty"`

	// Total value of earnings (in RUNE) across all pools.
	TotalEarned *string `json:"totalEarned,omitempty"`

	// Average of all pool ROIs.
	TotalROI *string `json:"totalROI,omitempty"`

	// Total staked (in RUNE) across all pools.
	TotalStaked *string `json:"totalStaked,omitempty"`
}

// StakersAssetData defines model for StakersAssetData.
type StakersAssetData struct {
	Asset *Asset `json:"asset,omitempty"`

	// Total of assets staked
	AssetStaked *string `json:"assetStaked,omitempty"`

	// Total of assets withdrawn
	AssetWithdrawn   *string `json:"assetWithdrawn,omitempty"`
	DateFirstStaked  *int64  `json:"dateFirstStaked,omitempty"`
	HeightLastStaked *int64  `json:"heightLastStaked,omitempty"`

	// Total of rune staked
	RuneStaked *string `json:"runeStaked,omitempty"`

	// Total of rune withdrawn
	RuneWithdrawn *string `json:"runeWithdrawn,omitempty"`

	// Represents ownership of a pool.
	Units *string `json:"units,omitempty"`
}

// StatsData defines model for StatsData.
type StatsData struct {

	// Daily active users (unique addresses interacting)
	DailyActiveUsers *string `json:"dailyActiveUsers,omitempty"`

	// Daily transactions
	DailyTx *string `json:"dailyTx,omitempty"`

	// Monthly active users
	MonthlyActiveUsers *string `json:"monthlyActiveUsers,omitempty"`

	// Monthly transactions
	MonthlyTx *string `json:"monthlyTx,omitempty"`

	// Number of active pools
	PoolCount *string `json:"poolCount,omitempty"`

	// Total buying transactions
	TotalAssetBuys *string `json:"totalAssetBuys,omitempty"`

	// Total selling transactions
	TotalAssetSells *string `json:"totalAssetSells,omitempty"`

	// Total RUNE balances
	TotalDepth *string `json:"totalDepth,omitempty"`

	// Total earned (in RUNE Value).
	TotalEarned *string `json:"totalEarned,omitempty"`

	// Total staking transactions
	TotalStakeTx *string `json:"totalStakeTx,omitempty"`

	// Total staked (in RUNE Value).
	TotalStaked *string `json:"totalStaked,omitempty"`

	// Total transactions
	TotalTx *string `json:"totalTx,omitempty"`

	// Total unique swappers & stakers
	TotalUsers *string `json:"totalUsers,omitempty"`

	// Total (in RUNE Value) of all assets swapped since start.
	TotalVolume *string `json:"totalVolume,omitempty"`

	// Total (in RUNE Value) of all assets swapped in 24hrs
	TotalVolume24hr *string `json:"totalVolume24hr,omitempty"`

	// Total withdrawing transactions
	TotalWithdrawTx *string `json:"totalWithdrawTx,omitempty"`
}

// ThorchainBooleanConstants defines model for ThorchainBooleanConstants.
type ThorchainBooleanConstants struct {
	StrictBondStakeRatio *bool `json:"StrictBondStakeRatio,omitempty"`
}

// ThorchainConstants defines model for ThorchainConstants.
type ThorchainConstants struct {
	BoolValues   *ThorchainBooleanConstants `json:"bool_values,omitempty"`
	Int64Values  *ThorchainInt64Constants   `json:"int_64_values,omitempty"`
	StringValues *ThorchainStringConstants  `json:"string_values,omitempty"`
}

// ThorchainEndpoint defines model for ThorchainEndpoint.
type ThorchainEndpoint struct {
	Address *string `json:"address,omitempty"`
	Chain   *string `json:"chain,omitempty"`
	PubKey  *string `json:"pub_key,omitempty"`
}

// ThorchainEndpoints defines model for ThorchainEndpoints.
type ThorchainEndpoints struct {
	Current *[]ThorchainEndpoint `json:"current,omitempty"`
}

// ThorchainInt64Constants defines model for ThorchainInt64Constants.
type ThorchainInt64Constants struct {
	BadValidatorRate                *int64 `json:"BadValidatorRate,omitempty"`
	BlocksPerYear                   *int64 `json:"BlocksPerYear,omitempty"`
	DesireValidatorSet              *int64 `json:"DesireValidatorSet,omitempty"`
	DoubleSignMaxAge                *int64 `json:"DoubleSignMaxAge,omitempty"`
	EmissionCurve                   *int64 `json:"EmissionCurve,omitempty"`
	FailKeySignSlashPoints          *int64 `json:"FailKeySignSlashPoints,omitempty"`
	FailKeygenSlashPoints           *int64 `json:"FailKeygenSlashPoints,omitempty"`
	FundMigrationInterval           *int64 `json:"FundMigrationInterval,omitempty"`
	JailTimeKeygen                  *int64 `json:"JailTimeKeygen,omitempty"`
	JailTimeKeysign                 *int64 `json:"JailTimeKeysign,omitempty"`
	LackOfObservationPenalty        *int64 `json:"LackOfObservationPenalty,omitempty"`
	MinimumBondInRune               *int64 `json:"MinimumBondInRune,omitempty"`
	MinimumNodesForBFT              *int64 `json:"MinimumNodesForBFT,omitempty"`
	MinimumNodesForYggdrasil        *int64 `json:"MinimumNodesForYggdrasil,omitempty"`
	NewPoolCycle                    *int64 `json:"NewPoolCycle,omitempty"`
	ObserveSlashPoints              *int64 `json:"ObserveSlashPoints,omitempty"`
	OldValidatorRate                *int64 `json:"OldValidatorRate,omitempty"`
	RotatePerBlockHeight            *int64 `json:"RotatePerBlockHeight,omitempty"`
	RotateRetryBlocks               *int64 `json:"RotateRetryBlocks,omitempty"`
	SigningTransactionPeriod        *int64 `json:"SigningTransactionPeriod,omitempty"`
	StakeLockUpBlocks               *int64 `json:"StakeLockUpBlocks,omitempty"`
	TransactionFee                  *int64 `json:"TransactionFee,omitempty"`
	ValidatorRotateInNumBeforeFull  *int64 `json:"ValidatorRotateInNumBeforeFull,omitempty"`
	ValidatorRotateNumAfterFull     *int64 `json:"ValidatorRotateNumAfterFull,omitempty"`
	ValidatorRotateOutNumBeforeFull *int64 `json:"ValidatorRotateOutNumBeforeFull,omitempty"`
	WhiteListGasAsset               *int64 `json:"WhiteListGasAsset,omitempty"`
	YggFundLimit                    *int64 `json:"YggFundLimit,omitempty"`
}

// ThorchainLastblock defines model for ThorchainLastblock.
type ThorchainLastblock struct {
	Chain          *string `json:"chain,omitempty"`
	Lastobservedin *int64  `json:"lastobservedin,omitempty"`
	Lastsignedout  *int64  `json:"lastsignedout,omitempty"`
	Thorchain      *int64  `json:"thorchain,omitempty"`
}

// ThorchainStringConstants defines model for ThorchainStringConstants.
type ThorchainStringConstants struct {
	DefaultPoolStatus *string `json:"DefaultPoolStatus,omitempty"`
}

// TotalVolChanges defines model for TotalVolChanges.
type TotalVolChanges struct {

	// Sum of "rune_amount" of buy swap events
	BuyVolume *string `json:"buyVolume,omitempty"`

	// Sum of "rune_amount" of sell swap events
	SellVolume *string `json:"sellVolume,omitempty"`

	// Determining end of current time bucket in unix timestamp
	Time *int64 `json:"time,omitempty"`

	// buyVolume + sellVolume
	TotalVolume *string `json:"totalVolume,omitempty"`
}

// TxDetails defines model for TxDetails.
type TxDetails struct {
	Date    *int64  `json:"date,omitempty"`
	Events  *Event  `json:"events,omitempty"`
	Gas     *Gas    `json:"gas,omitempty"`
	Height  *string `json:"height,omitempty"`
	In      *Tx     `json:"in,omitempty"`
	Options *Option `json:"options,omitempty"`
	Out     *[]Tx   `json:"out,omitempty"`
	Pool    *Asset  `json:"pool,omitempty"`
	Status  *string `json:"status,omitempty"`
	Type    *string `json:"type,omitempty"`
}

// Asset defines model for asset.
type Asset string

// Coin defines model for coin.
type Coin struct {
	Amount *string `json:"amount,omitempty"`
	Asset  *Asset  `json:"asset,omitempty"`
}

// Coins defines model for coins.
type Coins []Coin

// Event defines model for event.
type Event struct {
	Fee        *string `json:"fee,omitempty"`
	Slip       *string `json:"slip,omitempty"`
	StakeUnits *string `json:"stakeUnits,omitempty"`
}

// Gas defines model for gas.
type Gas struct {
	Amount *string `json:"amount,omitempty"`
	Asset  *Asset  `json:"asset,omitempty"`
}

// Option defines model for option.
type Option struct {
	Asymmetry           *string `json:"asymmetry,omitempty"`
	PriceTarget         *string `json:"priceTarget,omitempty"`
	WithdrawBasisPoints *string `json:"withdrawBasisPoints,omitempty"`
}

// Tx defines model for tx.
type Tx struct {
	Address *string `json:"address,omitempty"`
	Coins   *Coins  `json:"coins,omitempty"`
	Memo    *string `json:"memo,omitempty"`
	TxID    *string `json:"txID,omitempty"`
}

// AssetsDetailedResponse defines model for AssetsDetailedResponse.
type AssetsDetailedResponse []AssetDetail

// GeneralErrorResponse defines model for GeneralErrorResponse.
type GeneralErrorResponse Error

// GetPoolAggChangesResponse defines model for GetPoolAggChangesResponse.
type GetPoolAggChangesResponse []PoolAggChanges

// GetPoolEarningResponse defines model for GetPoolEarningResponse.
type GetPoolEarningResponse PoolEarning

// HealthResponse defines model for HealthResponse.
type HealthResponse struct {
	CatchingUp    *bool  `json:"catching_up,omitempty"`
	Database      *bool  `json:"database,omitempty"`
	ScannerHeight *int64 `json:"scannerHeight,omitempty"`
}

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse NetworkInfo

// NodeKeyResponse defines model for NodeKeyResponse.
type NodeKeyResponse []NodeKey

// PoolsDetailedResponse defines model for PoolsDetailedResponse.
type PoolsDetailedResponse []PoolDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse []Asset

// StakersAddressDataResponse defines model for StakersAddressDataResponse.
type StakersAddressDataResponse StakersAddressData

// StakersAssetDataResponse defines model for StakersAssetDataResponse.
type StakersAssetDataResponse []StakersAssetData

// StakersResponse defines model for StakersResponse.
type StakersResponse []Stakers

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// ThorchainConstantsResponse defines model for ThorchainConstantsResponse.
type ThorchainConstantsResponse ThorchainConstants

// ThorchainEndpointsResponse defines model for ThorchainEndpointsResponse.
type ThorchainEndpointsResponse ThorchainEndpoints

// ThorchainLastblockResponse defines model for ThorchainLastblockResponse.
type ThorchainLastblockResponse ThorchainLastblock

// TotalVolChangesResponse defines model for TotalVolChangesResponse.
type TotalVolChangesResponse []TotalVolChanges

// TxsResponse defines model for TxsResponse.
type TxsResponse struct {
	Count *int64       `json:"count,omitempty"`
	Txs   *[]TxDetails `json:"txs,omitempty"`
}

// GetAssetInfoParams defines parameters for GetAssetInfo.
type GetAssetInfoParams struct {

	// One or more comma separated unique asset (CHAIN.SYMBOL)
	Asset string `json:"asset"`
}

// GetPoolAggChangesParams defines parameters for GetPoolAggChanges.
type GetPoolAggChangesParams struct {

	// Pool asset name
	Pool string `json:"pool"`

	// Interval of calculations
	Interval string `json:"interval"`

	// Start time of the query as unix timestamp
	From int64 `json:"from"`

	// End time of the query as unix timestamp
	To int64 `json:"to"`
}

// GetTotalVolChangesParams defines parameters for GetTotalVolChanges.
type GetTotalVolChangesParams struct {

	// Interval of calculations
	Interval string `json:"interval"`

	// Start time of the query as unix timestamp
	From int64 `json:"from"`

	// End time of the query as unix timestamp
	To int64 `json:"to"`
}

// GetPoolsDetailsParams defines parameters for GetPoolsDetails.
type GetPoolsDetailsParams struct {

	// Specifies the returning view
	View *string `json:"view,omitempty"`

	// One or more comma separated unique asset (CHAIN.SYMBOL)
	Asset string `json:"asset"`
}

// GetEarningReportParams defines parameters for GetEarningReport.
type GetEarningReportParams struct {

	// Pool asset name
	Pool string `json:"pool"`
}

// GetStakersAddressAndAssetDataParams defines parameters for GetStakersAddressAndAssetData.
type GetStakersAddressAndAssetDataParams struct {

	// One or more comma separated unique asset (CHAIN.SYMBOL)
	Asset string `json:"asset"`
}

// GetTxDetailsParams defines parameters for GetTxDetails.
type GetTxDetailsParams struct {

	// Address of sender or recipient of any in/out tx in event
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx in event
	Txid *string `json:"txid,omitempty"`

	// Any asset used in event (CHAIN.SYMBOL)
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of event
	Type *string `json:"type,omitempty"`

	// pagination offset
	Offset int64 `json:"offset"`

	// pagination limit
	Limit int64 `json:"limit"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get Asset Information
	// (GET /v1/assets)
	GetAssetInfo(ctx echo.Context, params GetAssetInfoParams) error
	// Get Documents
	// (GET /v1/doc)
	GetDocs(ctx echo.Context) error
	// Get Health
	// (GET /v1/health)
	GetHealth(ctx echo.Context) error
	// Get Pool Aggregated Changes
	// (GET /v1/history/pools)
	GetPoolAggChanges(ctx echo.Context, params GetPoolAggChangesParams) error
	// Get Total Volume Changes
	// (GET /v1/history/total_volume)
	GetTotalVolChanges(ctx echo.Context, params GetTotalVolChangesParams) error
	// Get Network Data
	// (GET /v1/network)
	GetNetworkData(ctx echo.Context) error
	// Get Node public keys
	// (GET /v1/nodes)
	GetNodes(ctx echo.Context) error
	// Get Asset Pools
	// (GET /v1/pools)
	GetPools(ctx echo.Context) error
	// Get Pools Details
	// (GET /v1/pools/detail)
	GetPoolsDetails(ctx echo.Context, params GetPoolsDetailsParams) error
	// Get Pool Earning Report
	// (GET /v1/pools/earning)
	GetEarningReport(ctx echo.Context, params GetEarningReportParams) error
	// Get Stakers
	// (GET /v1/stakers)
	GetStakersData(ctx echo.Context) error
	// Get Staker Data
	// (GET /v1/stakers/{address})
	GetStakersAddressData(ctx echo.Context, address string) error
	// Get Staker Pool Data
	// (GET /v1/stakers/{address}/pools)
	GetStakersAddressAndAssetData(ctx echo.Context, address string, params GetStakersAddressAndAssetDataParams) error
	// Get Global Stats
	// (GET /v1/stats)
	GetStats(ctx echo.Context) error
	// Get Swagger
	// (GET /v1/swagger.json)
	GetSwagger(ctx echo.Context) error
	// Get the Proxied THORChain Constants
	// (GET /v1/thorchain/constants)
	GetThorchainProxiedConstants(ctx echo.Context) error
	// Get the Proxied THORChain Lastblock
	// (GET /v1/thorchain/lastblock)
	GetThorchainProxiedLastblock(ctx echo.Context) error
	// Get the Proxied Pool Addresses
	// (GET /v1/thorchain/pool_addresses)
	GetThorchainProxiedEndpoints(ctx echo.Context) error
	// Get details of a tx by address, asset or tx-id
	// (GET /v1/txs)
	GetTxDetails(ctx echo.Context, params GetTxDetailsParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetAssetInfo converts echo context to params.
func (w *ServerInterfaceWrapper) GetAssetInfo(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAssetInfoParams
	// ------------- Required query parameter "asset" -------------

	err = runtime.BindQueryParameter("form", true, true, "asset", ctx.QueryParams(), &params.Asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAssetInfo(ctx, params)
	return err
}

// GetDocs converts echo context to params.
func (w *ServerInterfaceWrapper) GetDocs(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDocs(ctx)
	return err
}

// GetHealth converts echo context to params.
func (w *ServerInterfaceWrapper) GetHealth(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetHealth(ctx)
	return err
}

// GetPoolAggChanges converts echo context to params.
func (w *ServerInterfaceWrapper) GetPoolAggChanges(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPoolAggChangesParams
	// ------------- Required query parameter "pool" -------------

	err = runtime.BindQueryParameter("form", true, true, "pool", ctx.QueryParams(), &params.Pool)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pool: %s", err))
	}

	// ------------- Required query parameter "interval" -------------

	err = runtime.BindQueryParameter("form", true, true, "interval", ctx.QueryParams(), &params.Interval)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter interval: %s", err))
	}

	// ------------- Required query parameter "from" -------------

	err = runtime.BindQueryParameter("form", true, true, "from", ctx.QueryParams(), &params.From)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter from: %s", err))
	}

	// ------------- Required query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, true, "to", ctx.QueryParams(), &params.To)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter to: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPoolAggChanges(ctx, params)
	return err
}

// GetTotalVolChanges converts echo context to params.
func (w *ServerInterfaceWrapper) GetTotalVolChanges(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTotalVolChangesParams
	// ------------- Required query parameter "interval" -------------

	err = runtime.BindQueryParameter("form", true, true, "interval", ctx.QueryParams(), &params.Interval)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter interval: %s", err))
	}

	// ------------- Required query parameter "from" -------------

	err = runtime.BindQueryParameter("form", true, true, "from", ctx.QueryParams(), &params.From)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter from: %s", err))
	}

	// ------------- Required query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, true, "to", ctx.QueryParams(), &params.To)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter to: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTotalVolChanges(ctx, params)
	return err
}

// GetNetworkData converts echo context to params.
func (w *ServerInterfaceWrapper) GetNetworkData(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNetworkData(ctx)
	return err
}

// GetNodes converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodes(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodes(ctx)
	return err
}

// GetPools converts echo context to params.
func (w *ServerInterfaceWrapper) GetPools(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPools(ctx)
	return err
}

// GetPoolsDetails converts echo context to params.
func (w *ServerInterfaceWrapper) GetPoolsDetails(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPoolsDetailsParams
	// ------------- Optional query parameter "view" -------------

	err = runtime.BindQueryParameter("form", true, false, "view", ctx.QueryParams(), &params.View)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter view: %s", err))
	}

	// ------------- Required query parameter "asset" -------------

	err = runtime.BindQueryParameter("form", true, true, "asset", ctx.QueryParams(), &params.Asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPoolsDetails(ctx, params)
	return err
}

// GetEarningReport converts echo context to params.
func (w *ServerInterfaceWrapper) GetEarningReport(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetEarningReportParams
	// ------------- Required query parameter "pool" -------------

	err = runtime.BindQueryParameter("form", true, true, "pool", ctx.QueryParams(), &params.Pool)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pool: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetEarningReport(ctx, params)
	return err
}

// GetStakersData converts echo context to params.
func (w *ServerInterfaceWrapper) GetStakersData(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStakersData(ctx)
	return err
}

// GetStakersAddressData converts echo context to params.
func (w *ServerInterfaceWrapper) GetStakersAddressData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStakersAddressData(ctx, address)
	return err
}

// GetStakersAddressAndAssetData converts echo context to params.
func (w *ServerInterfaceWrapper) GetStakersAddressAndAssetData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetStakersAddressAndAssetDataParams
	// ------------- Required query parameter "asset" -------------

	err = runtime.BindQueryParameter("form", true, true, "asset", ctx.QueryParams(), &params.Asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStakersAddressAndAssetData(ctx, address, params)
	return err
}

// GetStats converts echo context to params.
func (w *ServerInterfaceWrapper) GetStats(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStats(ctx)
	return err
}

// GetSwagger converts echo context to params.
func (w *ServerInterfaceWrapper) GetSwagger(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSwagger(ctx)
	return err
}

// GetThorchainProxiedConstants converts echo context to params.
func (w *ServerInterfaceWrapper) GetThorchainProxiedConstants(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetThorchainProxiedConstants(ctx)
	return err
}

// GetThorchainProxiedLastblock converts echo context to params.
func (w *ServerInterfaceWrapper) GetThorchainProxiedLastblock(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetThorchainProxiedLastblock(ctx)
	return err
}

// GetThorchainProxiedEndpoints converts echo context to params.
func (w *ServerInterfaceWrapper) GetThorchainProxiedEndpoints(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetThorchainProxiedEndpoints(ctx)
	return err
}

// GetTxDetails converts echo context to params.
func (w *ServerInterfaceWrapper) GetTxDetails(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTxDetailsParams
	// ------------- Optional query parameter "address" -------------

	err = runtime.BindQueryParameter("form", true, false, "address", ctx.QueryParams(), &params.Address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Optional query parameter "txid" -------------

	err = runtime.BindQueryParameter("form", true, false, "txid", ctx.QueryParams(), &params.Txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	// ------------- Optional query parameter "asset" -------------

	err = runtime.BindQueryParameter("form", true, false, "asset", ctx.QueryParams(), &params.Asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// ------------- Optional query parameter "type" -------------

	err = runtime.BindQueryParameter("form", true, false, "type", ctx.QueryParams(), &params.Type)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter type: %s", err))
	}

	// ------------- Required query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, true, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Required query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, true, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTxDetails(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/v1/assets", wrapper.GetAssetInfo)
	router.GET("/v1/doc", wrapper.GetDocs)
	router.GET("/v1/health", wrapper.GetHealth)
	router.GET("/v1/history/pools", wrapper.GetPoolAggChanges)
	router.GET("/v1/history/total_volume", wrapper.GetTotalVolChanges)
	router.GET("/v1/network", wrapper.GetNetworkData)
	router.GET("/v1/nodes", wrapper.GetNodes)
	router.GET("/v1/pools", wrapper.GetPools)
	router.GET("/v1/pools/detail", wrapper.GetPoolsDetails)
	router.GET("/v1/pools/earning", wrapper.GetEarningReport)
	router.GET("/v1/stakers", wrapper.GetStakersData)
	router.GET("/v1/stakers/:address", wrapper.GetStakersAddressData)
	router.GET("/v1/stakers/:address/pools", wrapper.GetStakersAddressAndAssetData)
	router.GET("/v1/stats", wrapper.GetStats)
	router.GET("/v1/swagger.json", wrapper.GetSwagger)
	router.GET("/v1/thorchain/constants", wrapper.GetThorchainProxiedConstants)
	router.GET("/v1/thorchain/lastblock", wrapper.GetThorchainProxiedLastblock)
	router.GET("/v1/thorchain/pool_addresses", wrapper.GetThorchainProxiedEndpoints)
	router.GET("/v1/txs", wrapper.GetTxDetails)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}

