// Package http provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package http

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// AssetDetail defines model for AssetDetail.
type AssetDetail struct {
	Asset       *Asset  `json:"asset,omitempty"`
	DateCreated *int64  `json:"dateCreated,omitempty"`
	PriceRune   *string `json:"priceRune,omitempty"`
}

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward *string `json:"blockReward,omitempty"`
	BondReward  *string `json:"bondReward,omitempty"`
	StakeReward *string `json:"stakeReward,omitempty"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {

	// Average bond of active nodes
	AverageActiveBond *string `json:"averageActiveBond,omitempty"`

	// Average bond of standby nodes
	AverageStandbyBond *string `json:"averageStandbyBond,omitempty"`

	// Maxinum bond of active nodes
	MaximumActiveBond *string `json:"maximumActiveBond,omitempty"`

	// Maximum bond of standby nodes
	MaximumStandbyBond *string `json:"maximumStandbyBond,omitempty"`

	// Median bond of active nodes
	MedianActiveBond *string `json:"medianActiveBond,omitempty"`

	// Median bond of standby nodes
	MedianStandbyBond *string `json:"medianStandbyBond,omitempty"`

	// Minumum bond of active nodes
	MinimumActiveBond *string `json:"minimumActiveBond,omitempty"`

	// Minumum bond of standby nodes
	MinimumStandbyBond *string `json:"minimumStandbyBond,omitempty"`

	// Total bond of active nodes
	TotalActiveBond *string `json:"totalActiveBond,omitempty"`

	// Total bond of standby nodes
	TotalStandbyBond *string `json:"totalStandbyBond,omitempty"`
}

// Error defines model for Error.
type Error struct {
	Error string `json:"error"`
}

// NetworkInfo defines model for NetworkInfo.
type NetworkInfo struct {

	// Array of Active Bonds
	ActiveBonds *[]string `json:"activeBonds,omitempty"`

	// Number of Active Nodes
	ActiveNodeCount *int          `json:"activeNodeCount,omitempty"`
	BlockRewards    *BlockRewards `json:"blockRewards,omitempty"`
	BondMetrics     *BondMetrics  `json:"bondMetrics,omitempty"`

	// (1 + (bondReward * blocksPerMonth/totalActiveBond)) ^ 12 -1
	BondingAPY *string `json:"bondingAPY,omitempty"`
	BondingROI *string `json:"bondingROI,omitempty"`

	// (1 + (stakeReward * blocksPerMonth/totalDepth of active pools)) ^ 12 -1
	LiquidityAPY    *string `json:"liquidityAPY,omitempty"`
	NextChurnHeight *string `json:"nextChurnHeight,omitempty"`

	// The remaining time of pool activation (in blocks)
	PoolActivationCountdown *int64  `json:"poolActivationCountdown,omitempty"`
	PoolShareFactor         *string `json:"poolShareFactor,omitempty"`
	StakingROI              *string `json:"stakingROI,omitempty"`

	// Array of Standby Bonds
	StandbyBonds *[]string `json:"standbyBonds,omitempty"`

	// Number of Standby Nodes
	StandbyNodeCount *int `json:"standbyNodeCount,omitempty"`

	// Total left in Reserve
	TotalReserve *string `json:"totalReserve,omitempty"`

	// Total Rune Staked in Pools
	TotalStaked *string `json:"totalStaked,omitempty"`
}

// NodeKey defines model for NodeKey.
type NodeKey struct {

	// ed25519 public key
	Ed25519 *string `json:"ed25519,omitempty"`

	// secp256k1 public key
	Secp256k1 *string `json:"secp256k1,omitempty"`
}

// PoolAggChanges defines model for PoolAggChanges.
type PoolAggChanges struct {

	// Total changes in asset depth at this time bucket
	AssetChanges *string `json:"assetChanges,omitempty"`

	// Depth of asset at the end of current time bucket
	AssetDepth *string `json:"assetDepth,omitempty"`

	// Total asset staked
	AssetStaked *string `json:"assetStaked,omitempty"`

	// Total asset withdrawn
	AssetWithdrawn *string `json:"assetWithdrawn,omitempty"`

	// Count of buy swaps
	BuyCount *int64 `json:"buyCount,omitempty"`

	// Sum of "rune_amount" of buy swap events
	BuyVolume *string `json:"buyVolume,omitempty"`

	// Total amount of rune, paid by the network to neutralize "gasUsed" changes
	GasReplenished *string `json:"gasReplenished,omitempty"`

	// Total amount of asset used as gas for network transactions (e.g. BNB.BNB, ETH.ETH)
	GasUsed *string `json:"gasUsed,omitempty"`

	// buyVolume + sellVolume
	PoolVolume *string `json:"poolVolume,omitempty"`

	// Asset price in rune at the end of current time bucket
	Price *string `json:"price,omitempty"`

	// Sum of "rewards" events in rune
	Reward *string `json:"reward,omitempty"`

	// Total changes in rune depth at this time bucket
	RuneChanges *string `json:"runeChanges,omitempty"`

	// Depth of rune at the end of current time bucket
	RuneDepth *string `json:"runeDepth,omitempty"`

	// Total rune staked
	RuneStaked *string `json:"runeStaked,omitempty"`

	// Total rune withdrawn
	RuneWithdrawn *string `json:"runeWithdrawn,omitempty"`

	// Count of sell swaps
	SellCount *int64 `json:"sellCount,omitempty"`

	// Sum of "rune_amount" of sell swap events
	SellVolume *string `json:"sellVolume,omitempty"`

	// Count of stake events
	StakeCount *int64 `json:"stakeCount,omitempty"`

	// Determining end of current time bucket in unix timestamp
	Time *int64 `json:"time,omitempty"`

	// Total changes in pool units (stakes/withdraws)
	UnitsChanges *string `json:"unitsChanges,omitempty"`

	// Count of withdraw events
	WithdrawCount *int64 `json:"withdrawCount,omitempty"`
}

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	Asset *Asset `json:"asset,omitempty"`

	// Total current Asset balance
	AssetDepth *string `json:"assetDepth,omitempty"`

	// Amount of pool asset changed by fee and gas
	AssetEarned *string `json:"assetEarned,omitempty"`

	// Asset return on investment
	AssetROI *string `json:"assetROI,omitempty"`

	// Total Asset staked
	AssetStakedTotal *string `json:"assetStakedTotal,omitempty"`

	// Number of RUNE->ASSET transactions
	BuyAssetCount *string `json:"buyAssetCount,omitempty"`

	// Average sell Asset fee size for RUNE->ASSET (in ASSET)
	BuyFeeAverage *string `json:"buyFeeAverage,omitempty"`

	// Total fees (in Asset)
	BuyFeesTotal *string `json:"buyFeesTotal,omitempty"`

	// Average trade slip for RUNE->ASSET in %
	BuySlipAverage *string `json:"buySlipAverage,omitempty"`

	// Average Asset buy transaction size for (RUNE->ASSET) (in ASSET)
	BuyTxAverage *string `json:"buyTxAverage,omitempty"`

	// Total Asset buy volume (RUNE->ASSET) (in RUNE)
	BuyVolume *string `json:"buyVolume,omitempty"`

	// (1 + (poolEarned/poolDepth)) ^ 12 -1
	PoolAPY *string `json:"poolAPY,omitempty"`

	// Total depth of both sides (in RUNE)
	PoolDepth *string `json:"poolDepth,omitempty"`

	// (assetChanges * price) + runeEarned
	PoolEarned *string `json:"poolEarned,omitempty"`

	// Average pool fee
	PoolFeeAverage *string `json:"poolFeeAverage,omitempty"`

	// Total fees
	PoolFeesTotal *string `json:"poolFeesTotal,omitempty"`

	// Pool ROI (average of RUNE and Asset ROI)
	PoolROI *string `json:"poolROI,omitempty"`

	// Pool ROI over 12 months
	PoolROI12 *string `json:"poolROI12,omitempty"`

	// Average pool slip
	PoolSlipAverage *string `json:"poolSlipAverage,omitempty"`

	// Rune value staked Total
	PoolStakedTotal *string `json:"poolStakedTotal,omitempty"`

	// Average pool transaction
	PoolTxAverage *string `json:"poolTxAverage,omitempty"`

	// Total pool units outstanding
	PoolUnits *string `json:"poolUnits,omitempty"`

	// Two-way volume of all-time (in RUNE)
	PoolVolume *string `json:"poolVolume,omitempty"`

	// Two-way volume in 24hrs (in RUNE)
	PoolVolume24hr *string `json:"poolVolume24hr,omitempty"`

	// Price of Asset (in RUNE).
	Price *string `json:"price,omitempty"`

	// Total current Rune balance
	RuneDepth *string `json:"runeDepth,omitempty"`

	// Amount of pool rune changed by fee,reward and gas
	RuneEarned *string `json:"runeEarned,omitempty"`

	// RUNE return on investment
	RuneROI *string `json:"runeROI,omitempty"`

	// Total RUNE staked
	RuneStakedTotal *string `json:"runeStakedTotal,omitempty"`

	// Number of ASSET->RUNE transactions
	SellAssetCount *string `json:"sellAssetCount,omitempty"`

	// Average buy Asset fee size for ASSET->RUNE (in RUNE)
	SellFeeAverage *string `json:"sellFeeAverage,omitempty"`

	// Total fees (in RUNE)
	SellFeesTotal *string `json:"sellFeesTotal,omitempty"`

	// Average trade slip for ASSET->RUNE in %
	SellSlipAverage *string `json:"sellSlipAverage,omitempty"`

	// Average Asset sell transaction size (ASSET>RUNE) (in RUNE)
	SellTxAverage *string `json:"sellTxAverage,omitempty"`

	// Total Asset sell volume (ASSET>RUNE) (in RUNE).
	SellVolume *string `json:"sellVolume,omitempty"`

	// Number of stake transactions
	StakeTxCount *string `json:"stakeTxCount,omitempty"`

	// Number of unique stakers
	StakersCount *string `json:"stakersCount,omitempty"`

	// Number of stake & withdraw transactions
	StakingTxCount *string `json:"stakingTxCount,omitempty"`
	Status         *string `json:"status,omitempty"`

	// Number of unique swappers interacting with pool
	SwappersCount *string `json:"swappersCount,omitempty"`

	// Number of swapping transactions in the pool (buys and sells)
	SwappingTxCount *string `json:"swappingTxCount,omitempty"`

	// Number of withdraw transactions
	WithdrawTxCount *string `json:"withdrawTxCount,omitempty"`
}

// PoolEarningDetail defines model for PoolEarningDetail.
type PoolEarningDetail struct {

	// number of days that pool was enabled in past 30 days
	LastMonthActiveDays *string `json:"lastMonthActiveDays,omitempty"`

	// sum of asset donated to the pool by add event in past 30 days
	LastMonthAssetDonation *string `json:"lastMonthAssetDonation,omitempty"`

	// sum of buy fee in rune in past 30 days
	LastMonthBuyFee *string `json:"lastMonthBuyFee,omitempty"`

	// sum of gas paid from asset of this pool in past 30 days
	LastMonthGasPaid *string `json:"lastMonthGasPaid,omitempty"`

	// sum of gas reimbursed to rune of this pool in past 30 days
	LastMonthGasReimbursed *string `json:"lastMonthGasReimbursed,omitempty"`

	// sum of pool deficit in reward event in past 30 days
	LastMonthPoolDeficit *string `json:"lastMonthPoolDeficit,omitempty"`

	// sum of donation to this pool in past 30 days (lastMonthAssetDonation*price + lastMonthRuneDonation)
	LastMonthPoolDonation *string `json:"lastMonthPoolDonation,omitempty"`

	// sum of pool Earning in past 30 days (lastMonthPoolDonation + lastMonthPoolFee + lastMonthReward + lastMonthPoolDeficit + lastMonthGasReimbursed - (lastMonthGasPaid * price))
	LastMonthPoolEarning *string `json:"lastMonthPoolEarning,omitempty"`

	// sum of pool sell fee in rune in past 30 days (lastMonthBuyFee+lastMonthSellFee)
	LastMonthPoolFee *string `json:"lastMonthPoolFee,omitempty"`

	// sum of rewards in reward event in past 30 days
	LastMonthReward *string `json:"lastMonthReward,omitempty"`

	// sum of rune donated to the pool by add event in past 30 days
	LastMonthRuneDonation *string `json:"lastMonthRuneDonation,omitempty"`

	// sum of sell fee in rune in past 30 days
	LastMonthSellFee *string `json:"lastMonthSellFee,omitempty"`

	// lastMonthPoolEarning/poolDepth (lastMonthPoolEarning may extrapolate if pool was active less than 30 days)
	PeriodicRate *string `json:"periodicRate,omitempty"`

	// pool name
	Pool *string `json:"pool,omitempty"`

	// (1 + periodicRate ) ^ 12 -1
	PoolAPY *string `json:"poolAPY,omitempty"`

	// pool depth (2 * rune depth)
	PoolDepth *string `json:"poolDepth,omitempty"`

	// pool price in rune
	Price *string `json:"price,omitempty"`

	// sum of asset donated to the pool by add event
	TotalAssetDonation *string `json:"totalAssetDonation,omitempty"`

	// sum of buy fee in rune
	TotalBuyFee *string `json:"totalBuyFee,omitempty"`

	// sum of gas paid from asset of this pool
	TotalGasPaid *string `json:"totalGasPaid,omitempty"`

	// sum of gas reimbursed to rune of this pool
	TotalGasReimbursed *string `json:"totalGasReimbursed,omitempty"`

	// sum of pool deficit in reward event
	TotalPoolDeficit *string `json:"totalPoolDeficit,omitempty"`

	// sum of donation to this pool (totalAssetDonation*price + totalRuneDonation)
	TotalPoolDonation *string `json:"totalPoolDonation,omitempty"`

	// sum of pool Earning (totalPoolDonation+totalPoolFee + totalReward + totalPoolDeficit + totalGasReimbursed - (totalGasPaid * price))
	TotalPoolEarning *string `json:"totalPoolEarning,omitempty"`

	// sum of pool sell fee in rune (sellFee+buyFee)
	TotalPoolFee *string `json:"totalPoolFee,omitempty"`

	// sum of rewards in reward event
	TotalReward *string `json:"totalReward,omitempty"`

	// sum of rune donated to the pool by add event
	TotalRuneDonation *string `json:"totalRuneDonation,omitempty"`

	// sum of sell fee in rune
	TotalSellFee *string `json:"totalSellFee,omitempty"`
}

// Stakers defines model for Stakers.
type Stakers string

// StakersAddressData defines model for StakersAddressData.
type StakersAddressData struct {
	PoolsArray *[]Asset `json:"poolsArray,omitempty"`

	// Total value of earnings (in RUNE) across all pools.
	TotalEarned *string `json:"totalEarned,omitempty"`

	// Average of all pool ROIs.
	TotalROI *string `json:"totalROI,omitempty"`

	// Total staked (in RUNE) across all pools.
	TotalStaked *string `json:"totalStaked,omitempty"`
}

// StakersAssetData defines model for StakersAssetData.
type StakersAssetData struct {
	Asset *Asset `json:"asset,omitempty"`

	// Total of assets staked
	AssetStaked *string `json:"assetStaked,omitempty"`

	// Total of assets withdrawn
	AssetWithdrawn   *string `json:"assetWithdrawn,omitempty"`
	DateFirstStaked  *int64  `json:"dateFirstStaked,omitempty"`
	HeightLastStaked *int64  `json:"heightLastStaked,omitempty"`

	// Total of rune staked
	RuneStaked *string `json:"runeStaked,omitempty"`

	// Total of rune withdrawn
	RuneWithdrawn *string `json:"runeWithdrawn,omitempty"`

	// Represents ownership of a pool.
	Units *string `json:"units,omitempty"`
}

// StatsData defines model for StatsData.
type StatsData struct {

	// Daily active users (unique addresses interacting)
	DailyActiveUsers *string `json:"dailyActiveUsers,omitempty"`

	// Daily transactions
	DailyTx *string `json:"dailyTx,omitempty"`

	// Monthly active users
	MonthlyActiveUsers *string `json:"monthlyActiveUsers,omitempty"`

	// Monthly transactions
	MonthlyTx *string `json:"monthlyTx,omitempty"`

	// Number of active pools
	PoolCount *string `json:"poolCount,omitempty"`

	// Total buying transactions
	TotalAssetBuys *string `json:"totalAssetBuys,omitempty"`

	// Total selling transactions
	TotalAssetSells *string `json:"totalAssetSells,omitempty"`

	// Total RUNE balances
	TotalDepth *string `json:"totalDepth,omitempty"`

	// Total earned (in RUNE Value).
	TotalEarned *string `json:"totalEarned,omitempty"`

	// Total staking transactions
	TotalStakeTx *string `json:"totalStakeTx,omitempty"`

	// Total staked (in RUNE Value).
	TotalStaked *string `json:"totalStaked,omitempty"`

	// Total transactions
	TotalTx *string `json:"totalTx,omitempty"`

	// Total unique swappers & stakers
	TotalUsers *string `json:"totalUsers,omitempty"`

	// Total (in RUNE Value) of all assets swapped since start.
	TotalVolume *string `json:"totalVolume,omitempty"`

	// Total (in RUNE Value) of all assets swapped in 24hrs
	TotalVolume24hr *string `json:"totalVolume24hr,omitempty"`

	// Total withdrawing transactions
	TotalWithdrawTx *string `json:"totalWithdrawTx,omitempty"`
}

// ThorchainBooleanConstants defines model for ThorchainBooleanConstants.
type ThorchainBooleanConstants struct {
	StrictBondStakeRatio *bool `json:"StrictBondStakeRatio,omitempty"`
}

// ThorchainConstants defines model for ThorchainConstants.
type ThorchainConstants struct {
	BoolValues   *ThorchainBooleanConstants `json:"bool_values,omitempty"`
	Int64Values  *ThorchainInt64Constants   `json:"int_64_values,omitempty"`
	StringValues *ThorchainStringConstants  `json:"string_values,omitempty"`
}

// ThorchainEndpoint defines model for ThorchainEndpoint.
type ThorchainEndpoint struct {
	Address *string `json:"address,omitempty"`
	Chain   *string `json:"chain,omitempty"`
	PubKey  *string `json:"pub_key,omitempty"`
}

// ThorchainEndpoints defines model for ThorchainEndpoints.
type ThorchainEndpoints struct {
	Current *[]ThorchainEndpoint `json:"current,omitempty"`
}

// ThorchainInt64Constants defines model for ThorchainInt64Constants.
type ThorchainInt64Constants struct {
	BadValidatorRate                *int64 `json:"BadValidatorRate,omitempty"`
	BlocksPerYear                   *int64 `json:"BlocksPerYear,omitempty"`
	DesireValidatorSet              *int64 `json:"DesireValidatorSet,omitempty"`
	DoubleSignMaxAge                *int64 `json:"DoubleSignMaxAge,omitempty"`
	EmissionCurve                   *int64 `json:"EmissionCurve,omitempty"`
	FailKeySignSlashPoints          *int64 `json:"FailKeySignSlashPoints,omitempty"`
	FailKeygenSlashPoints           *int64 `json:"FailKeygenSlashPoints,omitempty"`
	FundMigrationInterval           *int64 `json:"FundMigrationInterval,omitempty"`
	JailTimeKeygen                  *int64 `json:"JailTimeKeygen,omitempty"`
	JailTimeKeysign                 *int64 `json:"JailTimeKeysign,omitempty"`
	LackOfObservationPenalty        *int64 `json:"LackOfObservationPenalty,omitempty"`
	MinimumBondInRune               *int64 `json:"MinimumBondInRune,omitempty"`
	MinimumNodesForBFT              *int64 `json:"MinimumNodesForBFT,omitempty"`
	MinimumNodesForYggdrasil        *int64 `json:"MinimumNodesForYggdrasil,omitempty"`
	NewPoolCycle                    *int64 `json:"NewPoolCycle,omitempty"`
	ObserveSlashPoints              *int64 `json:"ObserveSlashPoints,omitempty"`
	OldValidatorRate                *int64 `json:"OldValidatorRate,omitempty"`
	RotatePerBlockHeight            *int64 `json:"RotatePerBlockHeight,omitempty"`
	RotateRetryBlocks               *int64 `json:"RotateRetryBlocks,omitempty"`
	SigningTransactionPeriod        *int64 `json:"SigningTransactionPeriod,omitempty"`
	StakeLockUpBlocks               *int64 `json:"StakeLockUpBlocks,omitempty"`
	TransactionFee                  *int64 `json:"TransactionFee,omitempty"`
	ValidatorRotateInNumBeforeFull  *int64 `json:"ValidatorRotateInNumBeforeFull,omitempty"`
	ValidatorRotateNumAfterFull     *int64 `json:"ValidatorRotateNumAfterFull,omitempty"`
	ValidatorRotateOutNumBeforeFull *int64 `json:"ValidatorRotateOutNumBeforeFull,omitempty"`
	WhiteListGasAsset               *int64 `json:"WhiteListGasAsset,omitempty"`
	YggFundLimit                    *int64 `json:"YggFundLimit,omitempty"`
}

// ThorchainLastblock defines model for ThorchainLastblock.
type ThorchainLastblock struct {
	Chain          *string `json:"chain,omitempty"`
	Lastobservedin *int64  `json:"lastobservedin,omitempty"`
	Lastsignedout  *int64  `json:"lastsignedout,omitempty"`
	Thorchain      *int64  `json:"thorchain,omitempty"`
}

// ThorchainStringConstants defines model for ThorchainStringConstants.
type ThorchainStringConstants struct {
	DefaultPoolStatus *string `json:"DefaultPoolStatus,omitempty"`
}

// TotalVolChanges defines model for TotalVolChanges.
type TotalVolChanges struct {

	// Sum of "rune_amount" of buy swap events
	BuyVolume *string `json:"buyVolume,omitempty"`

	// Sum of "rune_amount" of sell swap events
	SellVolume *string `json:"sellVolume,omitempty"`

	// Determining end of current time bucket in unix timestamp
	Time *int64 `json:"time,omitempty"`

	// buyVolume + sellVolume
	TotalVolume *string `json:"totalVolume,omitempty"`
}

// TxDetails defines model for TxDetails.
type TxDetails struct {
	Date    *int64  `json:"date,omitempty"`
	Events  *Event  `json:"events,omitempty"`
	Gas     *Gas    `json:"gas,omitempty"`
	Height  *string `json:"height,omitempty"`
	In      *Tx     `json:"in,omitempty"`
	Options *Option `json:"options,omitempty"`
	Out     *[]Tx   `json:"out,omitempty"`
	Pool    *Asset  `json:"pool,omitempty"`
	Status  *string `json:"status,omitempty"`
	Type    *string `json:"type,omitempty"`
}

// Asset defines model for asset.
type Asset string

// Coin defines model for coin.
type Coin struct {
	Amount *string `json:"amount,omitempty"`
	Asset  *Asset  `json:"asset,omitempty"`
}

// Coins defines model for coins.
type Coins []Coin

// Event defines model for event.
type Event struct {
	Fee        *string `json:"fee,omitempty"`
	Slip       *string `json:"slip,omitempty"`
	StakeUnits *string `json:"stakeUnits,omitempty"`
}

// Gas defines model for gas.
type Gas struct {
	Amount *string `json:"amount,omitempty"`
	Asset  *Asset  `json:"asset,omitempty"`
}

// Option defines model for option.
type Option struct {
	Asymmetry           *string `json:"asymmetry,omitempty"`
	PriceTarget         *string `json:"priceTarget,omitempty"`
	WithdrawBasisPoints *string `json:"withdrawBasisPoints,omitempty"`
}

// Tx defines model for tx.
type Tx struct {
	Address *string `json:"address,omitempty"`
	Coins   *Coins  `json:"coins,omitempty"`
	Memo    *string `json:"memo,omitempty"`
	TxID    *string `json:"txID,omitempty"`
}

// AssetsDetailedResponse defines model for AssetsDetailedResponse.
type AssetsDetailedResponse []AssetDetail

// GeneralErrorResponse defines model for GeneralErrorResponse.
type GeneralErrorResponse Error

// GetPoolAggChangesResponse defines model for GetPoolAggChangesResponse.
type GetPoolAggChangesResponse []PoolAggChanges

// GetPoolEarningDetailResponse defines model for GetPoolEarningDetailResponse.
type GetPoolEarningDetailResponse PoolEarningDetail

// HealthResponse defines model for HealthResponse.
type HealthResponse struct {
	CatchingUp    *bool  `json:"catching_up,omitempty"`
	Database      *bool  `json:"database,omitempty"`
	ScannerHeight *int64 `json:"scannerHeight,omitempty"`
}

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse NetworkInfo

// NodeKeyResponse defines model for NodeKeyResponse.
type NodeKeyResponse []NodeKey

// PoolsDetailedResponse defines model for PoolsDetailedResponse.
type PoolsDetailedResponse []PoolDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse []Asset

// StakersAddressDataResponse defines model for StakersAddressDataResponse.
type StakersAddressDataResponse StakersAddressData

// StakersAssetDataResponse defines model for StakersAssetDataResponse.
type StakersAssetDataResponse []StakersAssetData

// StakersResponse defines model for StakersResponse.
type StakersResponse []Stakers

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// ThorchainConstantsResponse defines model for ThorchainConstantsResponse.
type ThorchainConstantsResponse ThorchainConstants

// ThorchainEndpointsResponse defines model for ThorchainEndpointsResponse.
type ThorchainEndpointsResponse ThorchainEndpoints

// ThorchainLastblockResponse defines model for ThorchainLastblockResponse.
type ThorchainLastblockResponse ThorchainLastblock

// TotalVolChangesResponse defines model for TotalVolChangesResponse.
type TotalVolChangesResponse []TotalVolChanges

// TxsResponse defines model for TxsResponse.
type TxsResponse struct {
	Count *int64       `json:"count,omitempty"`
	Txs   *[]TxDetails `json:"txs,omitempty"`
}

// GetAssetInfoParams defines parameters for GetAssetInfo.
type GetAssetInfoParams struct {

	// One or more comma separated unique asset (CHAIN.SYMBOL)
	Asset string `json:"asset"`
}

// GetPoolAggChangesParams defines parameters for GetPoolAggChanges.
type GetPoolAggChangesParams struct {

	// Pool asset name
	Pool string `json:"pool"`

	// Interval of calculations
	Interval string `json:"interval"`

	// Start time of the query as unix timestamp
	From int64 `json:"from"`

	// End time of the query as unix timestamp
	To int64 `json:"to"`
}

// GetTotalVolChangesParams defines parameters for GetTotalVolChanges.
type GetTotalVolChangesParams struct {

	// Interval of calculations
	Interval string `json:"interval"`

	// Start time of the query as unix timestamp
	From int64 `json:"from"`

	// End time of the query as unix timestamp
	To int64 `json:"to"`
}

// GetPoolsDetailsParams defines parameters for GetPoolsDetails.
type GetPoolsDetailsParams struct {

	// Specifies the returning view
	View *string `json:"view,omitempty"`

	// One or more comma separated unique asset (CHAIN.SYMBOL)
	Asset string `json:"asset"`
}

// GetStakersAddressAndAssetDataParams defines parameters for GetStakersAddressAndAssetData.
type GetStakersAddressAndAssetDataParams struct {

	// One or more comma separated unique asset (CHAIN.SYMBOL)
	Asset string `json:"asset"`
}

// GetTxDetailsParams defines parameters for GetTxDetails.
type GetTxDetailsParams struct {

	// Address of sender or recipient of any in/out tx in event
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx in event
	Txid *string `json:"txid,omitempty"`

	// Any asset used in event (CHAIN.SYMBOL)
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of event
	Type *string `json:"type,omitempty"`

	// pagination offset
	Offset int64 `json:"offset"`

	// pagination limit
	Limit int64 `json:"limit"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get Asset Information
	// (GET /v1/assets)
	GetAssetInfo(ctx echo.Context, params GetAssetInfoParams) error
	// Get Documents
	// (GET /v1/doc)
	GetDocs(ctx echo.Context) error
	// Get Health
	// (GET /v1/health)
	GetHealth(ctx echo.Context) error
	// Get Pool Aggregated Changes
	// (GET /v1/history/pools)
	GetPoolAggChanges(ctx echo.Context, params GetPoolAggChangesParams) error
	// Get Total Volume Changes
	// (GET /v1/history/total_volume)
	GetTotalVolChanges(ctx echo.Context, params GetTotalVolChangesParams) error
	// Get Network Data
	// (GET /v1/network)
	GetNetworkData(ctx echo.Context) error
	// Get Node public keys
	// (GET /v1/nodes)
	GetNodes(ctx echo.Context) error
	// Get Asset Pools
	// (GET /v1/pools)
	GetPools(ctx echo.Context) error
	// Get Pools Details
	// (GET /v1/pools/detail)
	GetPoolsDetails(ctx echo.Context, params GetPoolsDetailsParams) error
	// Get Pool Earning Detail
	// (GET /v1/pools/details/{pool}/earnings)
	GetEarningDetail(ctx echo.Context, pool string) error
	// Get Stakers
	// (GET /v1/stakers)
	GetStakersData(ctx echo.Context) error
	// Get Staker Data
	// (GET /v1/stakers/{address})
	GetStakersAddressData(ctx echo.Context, address string) error
	// Get Staker Pool Data
	// (GET /v1/stakers/{address}/pools)
	GetStakersAddressAndAssetData(ctx echo.Context, address string, params GetStakersAddressAndAssetDataParams) error
	// Get Global Stats
	// (GET /v1/stats)
	GetStats(ctx echo.Context) error
	// Get Swagger
	// (GET /v1/swagger.json)
	GetSwagger(ctx echo.Context) error
	// Get the Proxied THORChain Constants
	// (GET /v1/thorchain/constants)
	GetThorchainProxiedConstants(ctx echo.Context) error
	// Get the Proxied THORChain Lastblock
	// (GET /v1/thorchain/lastblock)
	GetThorchainProxiedLastblock(ctx echo.Context) error
	// Get the Proxied Pool Addresses
	// (GET /v1/thorchain/pool_addresses)
	GetThorchainProxiedEndpoints(ctx echo.Context) error
	// Get details of a tx by address, asset or tx-id
	// (GET /v1/txs)
	GetTxDetails(ctx echo.Context, params GetTxDetailsParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetAssetInfo converts echo context to params.
func (w *ServerInterfaceWrapper) GetAssetInfo(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAssetInfoParams
	// ------------- Required query parameter "asset" -------------

	err = runtime.BindQueryParameter("form", true, true, "asset", ctx.QueryParams(), &params.Asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAssetInfo(ctx, params)
	return err
}

// GetDocs converts echo context to params.
func (w *ServerInterfaceWrapper) GetDocs(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDocs(ctx)
	return err
}

// GetHealth converts echo context to params.
func (w *ServerInterfaceWrapper) GetHealth(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetHealth(ctx)
	return err
}

// GetPoolAggChanges converts echo context to params.
func (w *ServerInterfaceWrapper) GetPoolAggChanges(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPoolAggChangesParams
	// ------------- Required query parameter "pool" -------------

	err = runtime.BindQueryParameter("form", true, true, "pool", ctx.QueryParams(), &params.Pool)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pool: %s", err))
	}

	// ------------- Required query parameter "interval" -------------

	err = runtime.BindQueryParameter("form", true, true, "interval", ctx.QueryParams(), &params.Interval)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter interval: %s", err))
	}

	// ------------- Required query parameter "from" -------------

	err = runtime.BindQueryParameter("form", true, true, "from", ctx.QueryParams(), &params.From)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter from: %s", err))
	}

	// ------------- Required query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, true, "to", ctx.QueryParams(), &params.To)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter to: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPoolAggChanges(ctx, params)
	return err
}

// GetTotalVolChanges converts echo context to params.
func (w *ServerInterfaceWrapper) GetTotalVolChanges(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTotalVolChangesParams
	// ------------- Required query parameter "interval" -------------

	err = runtime.BindQueryParameter("form", true, true, "interval", ctx.QueryParams(), &params.Interval)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter interval: %s", err))
	}

	// ------------- Required query parameter "from" -------------

	err = runtime.BindQueryParameter("form", true, true, "from", ctx.QueryParams(), &params.From)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter from: %s", err))
	}

	// ------------- Required query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, true, "to", ctx.QueryParams(), &params.To)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter to: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTotalVolChanges(ctx, params)
	return err
}

// GetNetworkData converts echo context to params.
func (w *ServerInterfaceWrapper) GetNetworkData(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNetworkData(ctx)
	return err
}

// GetNodes converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodes(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodes(ctx)
	return err
}

// GetPools converts echo context to params.
func (w *ServerInterfaceWrapper) GetPools(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPools(ctx)
	return err
}

// GetPoolsDetails converts echo context to params.
func (w *ServerInterfaceWrapper) GetPoolsDetails(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPoolsDetailsParams
	// ------------- Optional query parameter "view" -------------

	err = runtime.BindQueryParameter("form", true, false, "view", ctx.QueryParams(), &params.View)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter view: %s", err))
	}

	// ------------- Required query parameter "asset" -------------

	err = runtime.BindQueryParameter("form", true, true, "asset", ctx.QueryParams(), &params.Asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPoolsDetails(ctx, params)
	return err
}

// GetEarningDetail converts echo context to params.
func (w *ServerInterfaceWrapper) GetEarningDetail(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "pool" -------------
	var pool string

	err = runtime.BindStyledParameter("simple", false, "pool", ctx.Param("pool"), &pool)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pool: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetEarningDetail(ctx, pool)
	return err
}

// GetStakersData converts echo context to params.
func (w *ServerInterfaceWrapper) GetStakersData(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStakersData(ctx)
	return err
}

// GetStakersAddressData converts echo context to params.
func (w *ServerInterfaceWrapper) GetStakersAddressData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStakersAddressData(ctx, address)
	return err
}

// GetStakersAddressAndAssetData converts echo context to params.
func (w *ServerInterfaceWrapper) GetStakersAddressAndAssetData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetStakersAddressAndAssetDataParams
	// ------------- Required query parameter "asset" -------------

	err = runtime.BindQueryParameter("form", true, true, "asset", ctx.QueryParams(), &params.Asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStakersAddressAndAssetData(ctx, address, params)
	return err
}

// GetStats converts echo context to params.
func (w *ServerInterfaceWrapper) GetStats(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStats(ctx)
	return err
}

// GetSwagger converts echo context to params.
func (w *ServerInterfaceWrapper) GetSwagger(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSwagger(ctx)
	return err
}

// GetThorchainProxiedConstants converts echo context to params.
func (w *ServerInterfaceWrapper) GetThorchainProxiedConstants(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetThorchainProxiedConstants(ctx)
	return err
}

// GetThorchainProxiedLastblock converts echo context to params.
func (w *ServerInterfaceWrapper) GetThorchainProxiedLastblock(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetThorchainProxiedLastblock(ctx)
	return err
}

// GetThorchainProxiedEndpoints converts echo context to params.
func (w *ServerInterfaceWrapper) GetThorchainProxiedEndpoints(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetThorchainProxiedEndpoints(ctx)
	return err
}

// GetTxDetails converts echo context to params.
func (w *ServerInterfaceWrapper) GetTxDetails(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTxDetailsParams
	// ------------- Optional query parameter "address" -------------

	err = runtime.BindQueryParameter("form", true, false, "address", ctx.QueryParams(), &params.Address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Optional query parameter "txid" -------------

	err = runtime.BindQueryParameter("form", true, false, "txid", ctx.QueryParams(), &params.Txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	// ------------- Optional query parameter "asset" -------------

	err = runtime.BindQueryParameter("form", true, false, "asset", ctx.QueryParams(), &params.Asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// ------------- Optional query parameter "type" -------------

	err = runtime.BindQueryParameter("form", true, false, "type", ctx.QueryParams(), &params.Type)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter type: %s", err))
	}

	// ------------- Required query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, true, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Required query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, true, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTxDetails(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/v1/assets", wrapper.GetAssetInfo)
	router.GET("/v1/doc", wrapper.GetDocs)
	router.GET("/v1/health", wrapper.GetHealth)
	router.GET("/v1/history/pools", wrapper.GetPoolAggChanges)
	router.GET("/v1/history/total_volume", wrapper.GetTotalVolChanges)
	router.GET("/v1/network", wrapper.GetNetworkData)
	router.GET("/v1/nodes", wrapper.GetNodes)
	router.GET("/v1/pools", wrapper.GetPools)
	router.GET("/v1/pools/detail", wrapper.GetPoolsDetails)
	router.GET("/v1/pools/details/:pool/earnings", wrapper.GetEarningDetail)
	router.GET("/v1/stakers", wrapper.GetStakersData)
	router.GET("/v1/stakers/:address", wrapper.GetStakersAddressData)
	router.GET("/v1/stakers/:address/pools", wrapper.GetStakersAddressAndAssetData)
	router.GET("/v1/stats", wrapper.GetStats)
	router.GET("/v1/swagger.json", wrapper.GetSwagger)
	router.GET("/v1/thorchain/constants", wrapper.GetThorchainProxiedConstants)
	router.GET("/v1/thorchain/lastblock", wrapper.GetThorchainProxiedLastblock)
	router.GET("/v1/thorchain/pool_addresses", wrapper.GetThorchainProxiedEndpoints)
	router.GET("/v1/txs", wrapper.GetTxDetails)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}

