// Package http provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package http

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// AssetDetail defines model for AssetDetail.
type AssetDetail struct {
	Asset       *Asset  `json:"asset,omitempty"`
	DateCreated *int64  `json:"dateCreated,omitempty"`
	PriceRune   *string `json:"priceRune,omitempty"`
}

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward *string `json:"blockReward,omitempty"`
	BondReward  *string `json:"bondReward,omitempty"`
	StakeReward *string `json:"stakeReward,omitempty"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {

	// Average bond of active nodes
	AverageActiveBond *string `json:"averageActiveBond,omitempty"`

	// Average bond of standby nodes
	AverageStandbyBond *string `json:"averageStandbyBond,omitempty"`

	// Maxinum bond of active nodes
	MaximumActiveBond *string `json:"maximumActiveBond,omitempty"`

	// Maximum bond of standby nodes
	MaximumStandbyBond *string `json:"maximumStandbyBond,omitempty"`

	// Median bond of active nodes
	MedianActiveBond *string `json:"medianActiveBond,omitempty"`

	// Median bond of standby nodes
	MedianStandbyBond *string `json:"medianStandbyBond,omitempty"`

	// Minumum bond of active nodes
	MinimumActiveBond *string `json:"minimumActiveBond,omitempty"`

	// Minumum bond of standby nodes
	MinimumStandbyBond *string `json:"minimumStandbyBond,omitempty"`

	// Total bond of active nodes
	TotalActiveBond *string `json:"totalActiveBond,omitempty"`

	// Total bond of standby nodes
	TotalStandbyBond *string `json:"totalStandbyBond,omitempty"`
}

// Error defines model for Error.
type Error struct {
	Error string `json:"error"`
}

// NetworkInfo defines model for NetworkInfo.
type NetworkInfo struct {

	// Array of Active Bonds
	ActiveBonds *[]string `json:"activeBonds,omitempty"`

	// Number of Active Nodes
	ActiveNodeCount *int          `json:"activeNodeCount,omitempty"`
	BlockRewards    *BlockRewards `json:"blockRewards,omitempty"`
	BondMetrics     *BondMetrics  `json:"bondMetrics,omitempty"`

	// (1 + (bondReward * blocksPerMonth/totalActiveBond)) ^ 12 -1
	BondingAPY *string `json:"bondingAPY,omitempty"`

	// (1 + (stakeReward * blocksPerMonth/totalDepth of active pools)) ^ 12 -1
	LiquidityAPY    *string `json:"liquidityAPY,omitempty"`
	NextChurnHeight *string `json:"nextChurnHeight,omitempty"`

	// The remaining time of pool activation (in blocks)
	PoolActivationCountdown *int64  `json:"poolActivationCountdown,omitempty"`
	PoolShareFactor         *string `json:"poolShareFactor,omitempty"`

	// Array of Standby Bonds
	StandbyBonds *[]string `json:"standbyBonds,omitempty"`

	// Number of Standby Nodes
	StandbyNodeCount *int `json:"standbyNodeCount,omitempty"`

	// Total left in Reserve
	TotalReserve *string `json:"totalReserve,omitempty"`

	// Total Rune Staked in Pools
	TotalStaked *string `json:"totalStaked,omitempty"`
}

// NodeKey defines model for NodeKey.
type NodeKey struct {

	// ed25519 public key
	Ed25519 *string `json:"ed25519,omitempty"`

	// secp256k1 public key
	Secp256k1 *string `json:"secp256k1,omitempty"`
}

// PoolAggChanges defines model for PoolAggChanges.
type PoolAggChanges struct {

	// Total changes in asset depth at this time bucket
	AssetChanges *string `json:"assetChanges,omitempty"`

	// Depth of asset at the end of current time bucket
	AssetDepth *string `json:"assetDepth,omitempty"`

	// Total asset staked
	AssetStaked *string `json:"assetStaked,omitempty"`

	// Total asset withdrawn
	AssetWithdrawn *string `json:"assetWithdrawn,omitempty"`

	// Count of buy swaps
	BuyCount *int64 `json:"buyCount,omitempty"`

	// Sum of "rune_amount" of buy swap events
	BuyVolume *string `json:"buyVolume,omitempty"`

	// Total amount of rune, paid by the network to neutralize "gasUsed" changes
	GasReplenished *string `json:"gasReplenished,omitempty"`

	// Total amount of asset used as gas for network transactions (e.g. BNB.BNB, ETH.ETH)
	GasUsed *string `json:"gasUsed,omitempty"`

	// buyVolume + sellVolume
	PoolVolume *string `json:"poolVolume,omitempty"`

	// Asset price in rune at the end of current time bucket
	Price *string `json:"price,omitempty"`

	// Sum of "rewards" events in rune
	Reward *string `json:"reward,omitempty"`

	// Total changes in rune depth at this time bucket
	RuneChanges *string `json:"runeChanges,omitempty"`

	// Depth of rune at the end of current time bucket
	RuneDepth *string `json:"runeDepth,omitempty"`

	// Total rune staked
	RuneStaked *string `json:"runeStaked,omitempty"`

	// Total rune withdrawn
	RuneWithdrawn *string `json:"runeWithdrawn,omitempty"`

	// Count of sell swaps
	SellCount *int64 `json:"sellCount,omitempty"`

	// Sum of "rune_amount" of sell swap events
	SellVolume *string `json:"sellVolume,omitempty"`

	// Count of stake events
	StakeCount *int64 `json:"stakeCount,omitempty"`

	// Determining end of current time bucket in unix timestamp
	Time *int64 `json:"time,omitempty"`

	// Total changes in pool units (stakes/withdraws)
	UnitsChanges *string `json:"unitsChanges,omitempty"`

	// Count of withdraw events
	WithdrawCount *int64 `json:"withdrawCount,omitempty"`
}

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	Asset *Asset `json:"asset,omitempty"`

	// Total current Asset balance
	AssetDepth *string `json:"assetDepth,omitempty"`

	// Amount of pool asset balance changed by fee, gas and assset donation
	AssetEarned *string `json:"assetEarned,omitempty"`

	// Total Asset staked
	AssetStakedTotal *string `json:"assetStakedTotal,omitempty"`

	// Number of RUNE->ASSET transactions
	BuyAssetCount *string `json:"buyAssetCount,omitempty"`

	// Average sell Asset fee size for RUNE->ASSET (in ASSET)
	BuyFeeAverage *string `json:"buyFeeAverage,omitempty"`

	// Total fees (in Asset)
	BuyFeesTotal *string `json:"buyFeesTotal,omitempty"`

	// Average trade slip for RUNE->ASSET in %
	BuySlipAverage *string `json:"buySlipAverage,omitempty"`

	// Average Asset buy transaction size for (RUNE->ASSET) (in ASSET)
	BuyTxAverage *string `json:"buyTxAverage,omitempty"`

	// Total Asset buy volume (RUNE->ASSET) (in RUNE)
	BuyVolume *string `json:"buyVolume,omitempty"`

	// (1 + (poolEarned/poolDepth)) ^ 12 -1
	PoolAPY *string `json:"poolAPY,omitempty"`

	// Total depth of both sides (in RUNE)
	PoolDepth *string `json:"poolDepth,omitempty"`

	// (assetEarned * price) + runeEarned
	PoolEarned *string `json:"poolEarned,omitempty"`

	// Average pool fee
	PoolFeeAverage *string `json:"poolFeeAverage,omitempty"`

	// Total fees
	PoolFeesTotal *string `json:"poolFeesTotal,omitempty"`

	// Average pool slip
	PoolSlipAverage *string `json:"poolSlipAverage,omitempty"`

	// Rune value staked Total
	PoolStakedTotal *string `json:"poolStakedTotal,omitempty"`

	// Average pool transaction
	PoolTxAverage *string `json:"poolTxAverage,omitempty"`

	// Total pool units outstanding
	PoolUnits *string `json:"poolUnits,omitempty"`

	// Two-way volume of all-time (in RUNE)
	PoolVolume *string `json:"poolVolume,omitempty"`

	// Two-way volume in 24hrs (in RUNE)
	PoolVolume24hr *string `json:"poolVolume24hr,omitempty"`

	// Price of Asset (in RUNE).
	Price *string `json:"price,omitempty"`

	// Total current Rune balance
	RuneDepth *string `json:"runeDepth,omitempty"`

	// Amount of pool rune balance changed by fee,reward, deficit, gas and rune donation
	RuneEarned *string `json:"runeEarned,omitempty"`

	// Total RUNE staked
	RuneStakedTotal *string `json:"runeStakedTotal,omitempty"`

	// Number of ASSET->RUNE transactions
	SellAssetCount *string `json:"sellAssetCount,omitempty"`

	// Average buy Asset fee size for ASSET->RUNE (in RUNE)
	SellFeeAverage *string `json:"sellFeeAverage,omitempty"`

	// Total fees (in RUNE)
	SellFeesTotal *string `json:"sellFeesTotal,omitempty"`

	// Average trade slip for ASSET->RUNE in %
	SellSlipAverage *string `json:"sellSlipAverage,omitempty"`

	// Average Asset sell transaction size (ASSET>RUNE) (in RUNE)
	SellTxAverage *string `json:"sellTxAverage,omitempty"`

	// Total Asset sell volume (ASSET>RUNE) (in RUNE).
	SellVolume *string `json:"sellVolume,omitempty"`

	// Number of stake transactions
	StakeTxCount *string `json:"stakeTxCount,omitempty"`

	// Number of unique stakers
	StakersCount *string `json:"stakersCount,omitempty"`

	// Number of stake & withdraw transactions
	StakingTxCount *string `json:"stakingTxCount,omitempty"`
	Status         *string `json:"status,omitempty"`

	// Number of unique swappers interacting with pool
	SwappersCount *string `json:"swappersCount,omitempty"`

	// Number of swapping transactions in the pool (buys and sells)
	SwappingTxCount *string `json:"swappingTxCount,omitempty"`

	// Number of withdraw transactions
	WithdrawTxCount *string `json:"withdrawTxCount,omitempty"`
}

// PoolEarningDetail defines model for PoolEarningDetail.
type PoolEarningDetail struct {

	// number of days that pool was enabled in past 30 days
	LastMonthActiveDays *string `json:"lastMonthActiveDays,omitempty"`

	// sum of asset donated to the pool by add event in past 30 days
	LastMonthAssetDonation *string `json:"lastMonthAssetDonation,omitempty"`

	// sum of buy fee in rune in past 30 days
	LastMonthBuyFee *string `json:"lastMonthBuyFee,omitempty"`

	// sum of gas paid from asset of this pool in past 30 days
	LastMonthGasPaid *string `json:"lastMonthGasPaid,omitempty"`

	// sum of gas reimbursed to rune of this pool in past 30 days
	LastMonthGasReimbursed *string `json:"lastMonthGasReimbursed,omitempty"`

	// sum of pool deficit in reward event in past 30 days
	LastMonthPoolDeficit *string `json:"lastMonthPoolDeficit,omitempty"`

	// sum of donation to this pool in past 30 days (lastMonthAssetDonation*price + lastMonthRuneDonation)
	LastMonthPoolDonation *string `json:"lastMonthPoolDonation,omitempty"`

	// sum of pool Earning in past 30 days (lastMonthPoolDonation + lastMonthPoolFee + lastMonthReward + lastMonthPoolDeficit + lastMonthGasReimbursed - (lastMonthGasPaid * price))
	LastMonthPoolEarning *string `json:"lastMonthPoolEarning,omitempty"`

	// sum of pool sell fee in rune in past 30 days (lastMonthBuyFee+lastMonthSellFee)
	LastMonthPoolFee *string `json:"lastMonthPoolFee,omitempty"`

	// sum of rewards in reward event in past 30 days
	LastMonthReward *string `json:"lastMonthReward,omitempty"`

	// sum of rune donated to the pool by add event in past 30 days
	LastMonthRuneDonation *string `json:"lastMonthRuneDonation,omitempty"`

	// sum of sell fee in rune in past 30 days
	LastMonthSellFee *string `json:"lastMonthSellFee,omitempty"`

	// lastMonthPoolEarning/poolDepth (lastMonthPoolEarning may extrapolate if pool was active less than 30 days)
	PeriodicRate *string `json:"periodicRate,omitempty"`

	// pool name
	Pool *string `json:"pool,omitempty"`

	// (1 + periodicRate ) ^ 12 -1
	PoolAPY *string `json:"poolAPY,omitempty"`

	// pool depth (2 * rune depth)
	PoolDepth *string `json:"poolDepth,omitempty"`

	// pool price in rune
	Price *string `json:"price,omitempty"`

	// sum of asset donated to the pool by add event
	TotalAssetDonation *string `json:"totalAssetDonation,omitempty"`

	// sum of buy fee in rune
	TotalBuyFee *string `json:"totalBuyFee,omitempty"`

	// sum of gas paid from asset of this pool
	TotalGasPaid *string `json:"totalGasPaid,omitempty"`

	// sum of gas reimbursed to rune of this pool
	TotalGasReimbursed *string `json:"totalGasReimbursed,omitempty"`

	// sum of pool deficit in reward event
	TotalPoolDeficit *string `json:"totalPoolDeficit,omitempty"`

	// sum of donation to this pool (totalAssetDonation*price + totalRuneDonation)
	TotalPoolDonation *string `json:"totalPoolDonation,omitempty"`

	// sum of pool Earning (totalPoolDonation+totalPoolFee + totalReward + totalPoolDeficit + totalGasReimbursed - (totalGasPaid * price))
	TotalPoolEarning *string `json:"totalPoolEarning,omitempty"`

	// sum of pool sell fee in rune (sellFee+buyFee)
	TotalPoolFee *string `json:"totalPoolFee,omitempty"`

	// sum of rewards in reward event
	TotalReward *string `json:"totalReward,omitempty"`

	// sum of rune donated to the pool by add event
	TotalRuneDonation *string `json:"totalRuneDonation,omitempty"`

	// sum of sell fee in rune
	TotalSellFee *string `json:"totalSellFee,omitempty"`
}

// Stakers defines model for Stakers.
type Stakers string

// StakersAddressData defines model for StakersAddressData.
type StakersAddressData struct {
	PoolsArray *[]Asset `json:"poolsArray,omitempty"`

	// Total value of earnings (in RUNE) across all pools.
	TotalEarned *string `json:"totalEarned,omitempty"`

	// Average of all pool ROIs.
	TotalROI *string `json:"totalROI,omitempty"`

	// Total staked (in RUNE) across all pools.
	TotalStaked *string `json:"totalStaked,omitempty"`
}

// StakersAssetData defines model for StakersAssetData.
type StakersAssetData struct {
	Asset *Asset `json:"asset,omitempty"`

	// Total of assets staked
	AssetStaked *string `json:"assetStaked,omitempty"`

	// Total of assets withdrawn
	AssetWithdrawn   *string `json:"assetWithdrawn,omitempty"`
	DateFirstStaked  *int64  `json:"dateFirstStaked,omitempty"`
	HeightLastStaked *int64  `json:"heightLastStaked,omitempty"`

	// Total of rune staked
	RuneStaked *string `json:"runeStaked,omitempty"`

	// Total of rune withdrawn
	RuneWithdrawn *string `json:"runeWithdrawn,omitempty"`

	// Represents ownership of a pool.
	Units *string `json:"units,omitempty"`
}

// StatsData defines model for StatsData.
type StatsData struct {

	// Daily active users (unique addresses interacting)
	DailyActiveUsers *string `json:"dailyActiveUsers,omitempty"`

	// Daily transactions
	DailyTx *string `json:"dailyTx,omitempty"`

	// Monthly active users
	MonthlyActiveUsers *string `json:"monthlyActiveUsers,omitempty"`

	// Monthly transactions
	MonthlyTx *string `json:"monthlyTx,omitempty"`

	// Number of active pools
	PoolCount *string `json:"poolCount,omitempty"`

	// Total buying transactions
	TotalAssetBuys *string `json:"totalAssetBuys,omitempty"`

	// Total selling transactions
	TotalAssetSells *string `json:"totalAssetSells,omitempty"`

	// Total RUNE balances
	TotalDepth *string `json:"totalDepth,omitempty"`

	// Total earned (in RUNE Value).
	TotalEarned *string `json:"totalEarned,omitempty"`

	// Total staking transactions
	TotalStakeTx *string `json:"totalStakeTx,omitempty"`

	// Total staked (in RUNE Value).
	TotalStaked *string `json:"totalStaked,omitempty"`

	// Total transactions
	TotalTx *string `json:"totalTx,omitempty"`

	// Total unique swappers & stakers
	TotalUsers *string `json:"totalUsers,omitempty"`

	// Total (in RUNE Value) of all assets swapped since start.
	TotalVolume *string `json:"totalVolume,omitempty"`

	// Total (in RUNE Value) of all assets swapped in 24hrs
	TotalVolume24hr *string `json:"totalVolume24hr,omitempty"`

	// Total withdrawing transactions
	TotalWithdrawTx *string `json:"totalWithdrawTx,omitempty"`
}

// ThorchainBooleanConstants defines model for ThorchainBooleanConstants.
type ThorchainBooleanConstants struct {
	StrictBondStakeRatio *bool `json:"StrictBondStakeRatio,omitempty"`
}

// ThorchainConstants defines model for ThorchainConstants.
type ThorchainConstants struct {
	BoolValues   *ThorchainBooleanConstants `json:"bool_values,omitempty"`
	Int64Values  *ThorchainInt64Constants   `json:"int_64_values,omitempty"`
	StringValues *ThorchainStringConstants  `json:"string_values,omitempty"`
}

// ThorchainEndpoint defines model for ThorchainEndpoint.
type ThorchainEndpoint struct {
	Address *string `json:"address,omitempty"`
	Chain   *string `json:"chain,omitempty"`
	PubKey  *string `json:"pub_key,omitempty"`
}

// ThorchainEndpoints defines model for ThorchainEndpoints.
type ThorchainEndpoints struct {
	Current *[]ThorchainEndpoint `json:"current,omitempty"`
}

// ThorchainInt64Constants defines model for ThorchainInt64Constants.
type ThorchainInt64Constants struct {
	BadValidatorRate                *int64 `json:"BadValidatorRate,omitempty"`
	BlocksPerYear                   *int64 `json:"BlocksPerYear,omitempty"`
	DesireValidatorSet              *int64 `json:"DesireValidatorSet,omitempty"`
	DoubleSignMaxAge                *int64 `json:"DoubleSignMaxAge,omitempty"`
	EmissionCurve                   *int64 `json:"EmissionCurve,omitempty"`
	FailKeySignSlashPoints          *int64 `json:"FailKeySignSlashPoints,omitempty"`
	FailKeygenSlashPoints           *int64 `json:"FailKeygenSlashPoints,omitempty"`
	FundMigrationInterval           *int64 `json:"FundMigrationInterval,omitempty"`
	JailTimeKeygen                  *int64 `json:"JailTimeKeygen,omitempty"`
	JailTimeKeysign                 *int64 `json:"JailTimeKeysign,omitempty"`
	LackOfObservationPenalty        *int64 `json:"LackOfObservationPenalty,omitempty"`
	MinimumBondInRune               *int64 `json:"MinimumBondInRune,omitempty"`
	MinimumNodesForBFT              *int64 `json:"MinimumNodesForBFT,omitempty"`
	MinimumNodesForYggdrasil        *int64 `json:"MinimumNodesForYggdrasil,omitempty"`
	NewPoolCycle                    *int64 `json:"NewPoolCycle,omitempty"`
	ObserveSlashPoints              *int64 `json:"ObserveSlashPoints,omitempty"`
	OldValidatorRate                *int64 `json:"OldValidatorRate,omitempty"`
	RotatePerBlockHeight            *int64 `json:"RotatePerBlockHeight,omitempty"`
	RotateRetryBlocks               *int64 `json:"RotateRetryBlocks,omitempty"`
	SigningTransactionPeriod        *int64 `json:"SigningTransactionPeriod,omitempty"`
	StakeLockUpBlocks               *int64 `json:"StakeLockUpBlocks,omitempty"`
	TransactionFee                  *int64 `json:"TransactionFee,omitempty"`
	ValidatorRotateInNumBeforeFull  *int64 `json:"ValidatorRotateInNumBeforeFull,omitempty"`
	ValidatorRotateNumAfterFull     *int64 `json:"ValidatorRotateNumAfterFull,omitempty"`
	ValidatorRotateOutNumBeforeFull *int64 `json:"ValidatorRotateOutNumBeforeFull,omitempty"`
	WhiteListGasAsset               *int64 `json:"WhiteListGasAsset,omitempty"`
	YggFundLimit                    *int64 `json:"YggFundLimit,omitempty"`
}

// ThorchainLastblock defines model for ThorchainLastblock.
type ThorchainLastblock struct {
	Chain          *string `json:"chain,omitempty"`
	Lastobservedin *int64  `json:"lastobservedin,omitempty"`
	Lastsignedout  *int64  `json:"lastsignedout,omitempty"`
	Thorchain      *int64  `json:"thorchain,omitempty"`
}

// ThorchainQueue defines model for ThorchainQueue.
type ThorchainQueue struct {
	Outbound *int64 `json:"outbound,omitempty"`
	Swap     *int64 `json:"swap,omitempty"`
}

// ThorchainStringConstants defines model for ThorchainStringConstants.
type ThorchainStringConstants struct {
	DefaultPoolStatus *string `json:"DefaultPoolStatus,omitempty"`
}

// TotalVolChanges defines model for TotalVolChanges.
type TotalVolChanges struct {

	// Sum of "rune_amount" of buy swap events
	BuyVolume *string `json:"buyVolume,omitempty"`

	// Sum of "rune_amount" of sell swap events
	SellVolume *string `json:"sellVolume,omitempty"`

	// Determining end of current time bucket in unix timestamp
	Time *int64 `json:"time,omitempty"`

	// buyVolume + sellVolume
	TotalVolume *string `json:"totalVolume,omitempty"`
}

// TxDetails defines model for TxDetails.
type TxDetails struct {
	Date    *int64  `json:"date,omitempty"`
	Events  *Event  `json:"events,omitempty"`
	Gas     *Gas    `json:"gas,omitempty"`
	Height  *string `json:"height,omitempty"`
	In      *Tx     `json:"in,omitempty"`
	Options *Option `json:"options,omitempty"`
	Out     *[]Tx   `json:"out,omitempty"`
	Pool    *Asset  `json:"pool,omitempty"`
	Status  *string `json:"status,omitempty"`
	Type    *string `json:"type,omitempty"`
}

// Asset defines model for asset.
type Asset string

// Coin defines model for coin.
type Coin struct {
	Amount *string `json:"amount,omitempty"`
	Asset  *Asset  `json:"asset,omitempty"`
}

// Coins defines model for coins.
type Coins []Coin

// Event defines model for event.
type Event struct {
	Fee        *string `json:"fee,omitempty"`
	Slip       *string `json:"slip,omitempty"`
	StakeUnits *string `json:"stakeUnits,omitempty"`
}

// Gas defines model for gas.
type Gas struct {
	Amount *string `json:"amount,omitempty"`
	Asset  *Asset  `json:"asset,omitempty"`
}

// Option defines model for option.
type Option struct {
	Asymmetry           *string `json:"asymmetry,omitempty"`
	PriceTarget         *string `json:"priceTarget,omitempty"`
	Reason              *string `json:"reason,omitempty"`
	WithdrawBasisPoints *string `json:"withdrawBasisPoints,omitempty"`
}

// Tx defines model for tx.
type Tx struct {
	Address *string `json:"address,omitempty"`
	Coins   *Coins  `json:"coins,omitempty"`
	Memo    *string `json:"memo,omitempty"`
	TxID    *string `json:"txID,omitempty"`
}

// AssetsDetailedResponse defines model for AssetsDetailedResponse.
type AssetsDetailedResponse []AssetDetail

// GeneralErrorResponse defines model for GeneralErrorResponse.
type GeneralErrorResponse Error

// GetPoolAggChangesResponse defines model for GetPoolAggChangesResponse.
type GetPoolAggChangesResponse []PoolAggChanges

// GetPoolEarningDetailResponse defines model for GetPoolEarningDetailResponse.
type GetPoolEarningDetailResponse PoolEarningDetail

// HealthResponse defines model for HealthResponse.
type HealthResponse struct {
	CatchingUp    *bool  `json:"catching_up,omitempty"`
	Database      *bool  `json:"database,omitempty"`
	ScannerHeight *int64 `json:"scannerHeight,omitempty"`
}

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse NetworkInfo

// NodeKeyResponse defines model for NodeKeyResponse.
type NodeKeyResponse []NodeKey

// PoolsDetailedResponse defines model for PoolsDetailedResponse.
type PoolsDetailedResponse []PoolDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse []Asset

// StakersAddressDataResponse defines model for StakersAddressDataResponse.
type StakersAddressDataResponse StakersAddressData

// StakersAssetDataResponse defines model for StakersAssetDataResponse.
type StakersAssetDataResponse []StakersAssetData

// StakersResponse defines model for StakersResponse.
type StakersResponse []Stakers

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// ThorchainConstantsResponse defines model for ThorchainConstantsResponse.
type ThorchainConstantsResponse ThorchainConstants

// ThorchainEndpointsResponse defines model for ThorchainEndpointsResponse.
type ThorchainEndpointsResponse ThorchainEndpoints

// ThorchainLastblockResponse defines model for ThorchainLastblockResponse.
type ThorchainLastblockResponse ThorchainLastblock

// ThorchainQueueResponse defines model for ThorchainQueueResponse.
type ThorchainQueueResponse ThorchainQueue

// TotalVolChangesResponse defines model for TotalVolChangesResponse.
type TotalVolChangesResponse []TotalVolChanges

// TxsResponse defines model for TxsResponse.
type TxsResponse struct {
	Count *int64       `json:"count,omitempty"`
	Txs   *[]TxDetails `json:"txs,omitempty"`
}

// GetAssetInfoParams defines parameters for GetAssetInfo.
type GetAssetInfoParams struct {

	// One or more comma separated unique asset (CHAIN.SYMBOL)
	Asset string `json:"asset"`
}

// GetPoolAggChangesParams defines parameters for GetPoolAggChanges.
type GetPoolAggChangesParams struct {

	// Pool asset name
	Pool string `json:"pool"`

	// Interval of calculations
	Interval string `json:"interval"`

	// Start time of the query as unix timestamp
	From int64 `json:"from"`

	// End time of the query as unix timestamp
	To int64 `json:"to"`
}

// GetTotalVolChangesParams defines parameters for GetTotalVolChanges.
type GetTotalVolChangesParams struct {

	// Interval of calculations
	Interval string `json:"interval"`

	// Start time of the query as unix timestamp
	From int64 `json:"from"`

	// End time of the query as unix timestamp
	To int64 `json:"to"`
}

// GetPoolsParams defines parameters for GetPools.
type GetPoolsParams struct {

	// Pool status
	Status *string `json:"status,omitempty"`
}

// GetPoolsDetailsParams defines parameters for GetPoolsDetails.
type GetPoolsDetailsParams struct {

	// Specifies the returning view
	View *string `json:"view,omitempty"`

	// One or more comma separated unique asset (CHAIN.SYMBOL)
	Asset string `json:"asset"`
}

// GetStakersAddressAndAssetDataParams defines parameters for GetStakersAddressAndAssetData.
type GetStakersAddressAndAssetDataParams struct {

	// One or more comma separated unique asset (CHAIN.SYMBOL)
	Asset string `json:"asset"`
}

// GetTxDetailsParams defines parameters for GetTxDetails.
type GetTxDetailsParams struct {

	// Address of sender or recipient of any in/out tx in event
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx in event
	Txid *string `json:"txid,omitempty"`

	// Any asset used in event (CHAIN.SYMBOL)
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of event
	Type *string `json:"type,omitempty"`

	// pagination offset
	Offset int64 `json:"offset"`

	// pagination limit
	Limit int64 `json:"limit"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get Asset Information
	// (GET /v1/assets)
	GetAssetInfo(ctx echo.Context, params GetAssetInfoParams) error
	// Get Documents
	// (GET /v1/doc)
	GetDocs(ctx echo.Context) error
	// Get Health
	// (GET /v1/health)
	GetHealth(ctx echo.Context) error
	// Get Pool Aggregated Changes
	// (GET /v1/history/pools)
	GetPoolAggChanges(ctx echo.Context, params GetPoolAggChangesParams) error
	// Get Total Volume Changes
	// (GET /v1/history/total_volume)
	GetTotalVolChanges(ctx echo.Context, params GetTotalVolChangesParams) error
	// Get Network Data
	// (GET /v1/network)
	GetNetworkData(ctx echo.Context) error
	// Get Node public keys
	// (GET /v1/nodes)
	GetNodes(ctx echo.Context) error
	// Get Asset Pools
	// (GET /v1/pools)
	GetPools(ctx echo.Context, params GetPoolsParams) error
	// Get Pools Details
	// (GET /v1/pools/detail)
	GetPoolsDetails(ctx echo.Context, params GetPoolsDetailsParams) error
	// Get Pool Earning Detail
	// (GET /v1/pools/details/{pool}/earnings)
	GetEarningDetail(ctx echo.Context, pool string) error
	// Get Stakers
	// (GET /v1/stakers)
	GetStakersData(ctx echo.Context) error
	// Get Staker Data
	// (GET /v1/stakers/{address})
	GetStakersAddressData(ctx echo.Context, address string) error
	// Get Staker Pool Data
	// (GET /v1/stakers/{address}/pools)
	GetStakersAddressAndAssetData(ctx echo.Context, address string, params GetStakersAddressAndAssetDataParams) error
	// Get Global Stats
	// (GET /v1/stats)
	GetStats(ctx echo.Context) error
	// Get Swagger
	// (GET /v1/swagger.json)
	GetSwagger(ctx echo.Context) error
	// Get the Proxied THORChain Constants
	// (GET /v1/thorchain/constants)
	GetThorchainProxiedConstants(ctx echo.Context) error
	// Get the Proxied THORChain Lastblock
	// (GET /v1/thorchain/lastblock)
	GetThorchainProxiedLastblock(ctx echo.Context) error
	// Get the Proxied Pool Addresses
	// (GET /v1/thorchain/pool_addresses)
	GetThorchainProxiedEndpoints(ctx echo.Context) error
	// Get the Proxied THORChain Queue
	// (GET /v1/thorchain/queue)
	GetThorchainProxiedQueue(ctx echo.Context) error
	// Get details of a tx by address, asset or tx-id
	// (GET /v1/txs)
	GetTxDetails(ctx echo.Context, params GetTxDetailsParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetAssetInfo converts echo context to params.
func (w *ServerInterfaceWrapper) GetAssetInfo(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAssetInfoParams
	// ------------- Required query parameter "asset" -------------

	err = runtime.BindQueryParameter("form", true, true, "asset", ctx.QueryParams(), &params.Asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAssetInfo(ctx, params)
	return err
}

// GetDocs converts echo context to params.
func (w *ServerInterfaceWrapper) GetDocs(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDocs(ctx)
	return err
}

// GetHealth converts echo context to params.
func (w *ServerInterfaceWrapper) GetHealth(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetHealth(ctx)
	return err
}

// GetPoolAggChanges converts echo context to params.
func (w *ServerInterfaceWrapper) GetPoolAggChanges(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPoolAggChangesParams
	// ------------- Required query parameter "pool" -------------

	err = runtime.BindQueryParameter("form", true, true, "pool", ctx.QueryParams(), &params.Pool)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pool: %s", err))
	}

	// ------------- Required query parameter "interval" -------------

	err = runtime.BindQueryParameter("form", true, true, "interval", ctx.QueryParams(), &params.Interval)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter interval: %s", err))
	}

	// ------------- Required query parameter "from" -------------

	err = runtime.BindQueryParameter("form", true, true, "from", ctx.QueryParams(), &params.From)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter from: %s", err))
	}

	// ------------- Required query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, true, "to", ctx.QueryParams(), &params.To)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter to: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPoolAggChanges(ctx, params)
	return err
}

// GetTotalVolChanges converts echo context to params.
func (w *ServerInterfaceWrapper) GetTotalVolChanges(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTotalVolChangesParams
	// ------------- Required query parameter "interval" -------------

	err = runtime.BindQueryParameter("form", true, true, "interval", ctx.QueryParams(), &params.Interval)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter interval: %s", err))
	}

	// ------------- Required query parameter "from" -------------

	err = runtime.BindQueryParameter("form", true, true, "from", ctx.QueryParams(), &params.From)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter from: %s", err))
	}

	// ------------- Required query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, true, "to", ctx.QueryParams(), &params.To)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter to: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTotalVolChanges(ctx, params)
	return err
}

// GetNetworkData converts echo context to params.
func (w *ServerInterfaceWrapper) GetNetworkData(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNetworkData(ctx)
	return err
}

// GetNodes converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodes(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodes(ctx)
	return err
}

// GetPools converts echo context to params.
func (w *ServerInterfaceWrapper) GetPools(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPoolsParams
	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", ctx.QueryParams(), &params.Status)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter status: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPools(ctx, params)
	return err
}

// GetPoolsDetails converts echo context to params.
func (w *ServerInterfaceWrapper) GetPoolsDetails(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPoolsDetailsParams
	// ------------- Optional query parameter "view" -------------

	err = runtime.BindQueryParameter("form", true, false, "view", ctx.QueryParams(), &params.View)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter view: %s", err))
	}

	// ------------- Required query parameter "asset" -------------

	err = runtime.BindQueryParameter("form", true, true, "asset", ctx.QueryParams(), &params.Asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPoolsDetails(ctx, params)
	return err
}

// GetEarningDetail converts echo context to params.
func (w *ServerInterfaceWrapper) GetEarningDetail(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "pool" -------------
	var pool string

	err = runtime.BindStyledParameter("simple", false, "pool", ctx.Param("pool"), &pool)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pool: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetEarningDetail(ctx, pool)
	return err
}

// GetStakersData converts echo context to params.
func (w *ServerInterfaceWrapper) GetStakersData(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStakersData(ctx)
	return err
}

// GetStakersAddressData converts echo context to params.
func (w *ServerInterfaceWrapper) GetStakersAddressData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStakersAddressData(ctx, address)
	return err
}

// GetStakersAddressAndAssetData converts echo context to params.
func (w *ServerInterfaceWrapper) GetStakersAddressAndAssetData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetStakersAddressAndAssetDataParams
	// ------------- Required query parameter "asset" -------------

	err = runtime.BindQueryParameter("form", true, true, "asset", ctx.QueryParams(), &params.Asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStakersAddressAndAssetData(ctx, address, params)
	return err
}

// GetStats converts echo context to params.
func (w *ServerInterfaceWrapper) GetStats(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStats(ctx)
	return err
}

// GetSwagger converts echo context to params.
func (w *ServerInterfaceWrapper) GetSwagger(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSwagger(ctx)
	return err
}

// GetThorchainProxiedConstants converts echo context to params.
func (w *ServerInterfaceWrapper) GetThorchainProxiedConstants(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetThorchainProxiedConstants(ctx)
	return err
}

// GetThorchainProxiedLastblock converts echo context to params.
func (w *ServerInterfaceWrapper) GetThorchainProxiedLastblock(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetThorchainProxiedLastblock(ctx)
	return err
}

// GetThorchainProxiedEndpoints converts echo context to params.
func (w *ServerInterfaceWrapper) GetThorchainProxiedEndpoints(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetThorchainProxiedEndpoints(ctx)
	return err
}

// GetThorchainProxiedQueue converts echo context to params.
func (w *ServerInterfaceWrapper) GetThorchainProxiedQueue(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetThorchainProxiedQueue(ctx)
	return err
}

// GetTxDetails converts echo context to params.
func (w *ServerInterfaceWrapper) GetTxDetails(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTxDetailsParams
	// ------------- Optional query parameter "address" -------------

	err = runtime.BindQueryParameter("form", true, false, "address", ctx.QueryParams(), &params.Address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Optional query parameter "txid" -------------

	err = runtime.BindQueryParameter("form", true, false, "txid", ctx.QueryParams(), &params.Txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	// ------------- Optional query parameter "asset" -------------

	err = runtime.BindQueryParameter("form", true, false, "asset", ctx.QueryParams(), &params.Asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// ------------- Optional query parameter "type" -------------

	err = runtime.BindQueryParameter("form", true, false, "type", ctx.QueryParams(), &params.Type)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter type: %s", err))
	}

	// ------------- Required query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, true, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Required query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, true, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTxDetails(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/v1/assets", wrapper.GetAssetInfo)
	router.GET("/v1/doc", wrapper.GetDocs)
	router.GET("/v1/health", wrapper.GetHealth)
	router.GET("/v1/history/pools", wrapper.GetPoolAggChanges)
	router.GET("/v1/history/total_volume", wrapper.GetTotalVolChanges)
	router.GET("/v1/network", wrapper.GetNetworkData)
	router.GET("/v1/nodes", wrapper.GetNodes)
	router.GET("/v1/pools", wrapper.GetPools)
	router.GET("/v1/pools/detail", wrapper.GetPoolsDetails)
	router.GET("/v1/pools/details/:pool/earnings", wrapper.GetEarningDetail)
	router.GET("/v1/stakers", wrapper.GetStakersData)
	router.GET("/v1/stakers/:address", wrapper.GetStakersAddressData)
	router.GET("/v1/stakers/:address/pools", wrapper.GetStakersAddressAndAssetData)
	router.GET("/v1/stats", wrapper.GetStats)
	router.GET("/v1/swagger.json", wrapper.GetSwagger)
	router.GET("/v1/thorchain/constants", wrapper.GetThorchainProxiedConstants)
	router.GET("/v1/thorchain/lastblock", wrapper.GetThorchainProxiedLastblock)
	router.GET("/v1/thorchain/pool_addresses", wrapper.GetThorchainProxiedEndpoints)
	router.GET("/v1/thorchain/queue", wrapper.GetThorchainProxiedQueue)
	router.GET("/v1/txs", wrapper.GetTxDetails)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"A/54+O8AAAD//zZKhhXaeAAA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}

