// Package http provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package http

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// AssetDetail defines model for AssetDetail.
type AssetDetail struct {
	Asset       *Asset  `json:"asset,omitempty"`
	DateCreated *int64  `json:"dateCreated,omitempty"`
	PriceRune   *string `json:"priceRune,omitempty"`
}

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward *string `json:"blockReward,omitempty"`
	BondReward  *string `json:"bondReward,omitempty"`
	StakeReward *string `json:"stakeReward,omitempty"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {

	// Average bond of active nodes
	AverageActiveBond *string `json:"averageActiveBond,omitempty"`

	// Average bond of standby nodes
	AverageStandbyBond *string `json:"averageStandbyBond,omitempty"`

	// Maxinum bond of active nodes
	MaximumActiveBond *string `json:"maximumActiveBond,omitempty"`

	// Maximum bond of standby nodes
	MaximumStandbyBond *string `json:"maximumStandbyBond,omitempty"`

	// Median bond of active nodes
	MedianActiveBond *string `json:"medianActiveBond,omitempty"`

	// Median bond of standby nodes
	MedianStandbyBond *string `json:"medianStandbyBond,omitempty"`

	// Minumum bond of active nodes
	MinimumActiveBond *string `json:"minimumActiveBond,omitempty"`

	// Minumum bond of standby nodes
	MinimumStandbyBond *string `json:"minimumStandbyBond,omitempty"`

	// Total bond of active nodes
	TotalActiveBond *string `json:"totalActiveBond,omitempty"`

	// Total bond of standby nodes
	TotalStandbyBond *string `json:"totalStandbyBond,omitempty"`
}

// Error defines model for Error.
type Error struct {
	Error string `json:"error"`
}

// NetworkInfo defines model for NetworkInfo.
type NetworkInfo struct {

	// Array of Active Bonds
	ActiveBonds *[]string `json:"activeBonds,omitempty"`

	// Number of Active Nodes
	ActiveNodeCount *int          `json:"activeNodeCount,omitempty"`
	BlockRewards    *BlockRewards `json:"blockRewards,omitempty"`
	BondMetrics     *BondMetrics  `json:"bondMetrics,omitempty"`

	// (1 + (bondReward * blocksPerMonth/totalActiveBond)) ^ 12 -1
	BondingAPY *string `json:"bondingAPY,omitempty"`
	BondingROI *string `json:"bondingROI,omitempty"`

	// (1 + (stakeReward * blocksPerMonth/totalDepth of active pools)) ^ 12 -1
	LiquidityAPY    *string `json:"liquidityAPY,omitempty"`
	NextChurnHeight *string `json:"nextChurnHeight,omitempty"`

	// The remaining time of pool activation (in blocks)
	PoolActivationCountdown *int64  `json:"poolActivationCountdown,omitempty"`
	PoolShareFactor         *string `json:"poolShareFactor,omitempty"`
	StakingROI              *string `json:"stakingROI,omitempty"`

	// Array of Standby Bonds
	StandbyBonds *[]string `json:"standbyBonds,omitempty"`

	// Number of Standby Nodes
	StandbyNodeCount *int `json:"standbyNodeCount,omitempty"`

	// Total left in Reserve
	TotalReserve *string `json:"totalReserve,omitempty"`

	// Total Rune Staked in Pools
	TotalStaked *string `json:"totalStaked,omitempty"`
}

// NodeKey defines model for NodeKey.
type NodeKey struct {

	// ed25519 public key
	Ed25519 *string `json:"ed25519,omitempty"`

	// secp256k1 public key
	Secp256k1 *string `json:"secp256k1,omitempty"`
}

// PoolAggChanges defines model for PoolAggChanges.
type PoolAggChanges struct {

	// Total changes in asset depth at this time bucket
	AssetChanges *string `json:"assetChanges,omitempty"`

	// Depth of asset at the end of current time bucket
	AssetDepth *string `json:"assetDepth,omitempty"`

	// Total asset staked
	AssetStaked *string `json:"assetStaked,omitempty"`

	// Total asset withdrawn
	AssetWithdrawn *string `json:"assetWithdrawn,omitempty"`

	// Count of buy swaps
	BuyCount *int64 `json:"buyCount,omitempty"`

	// Sum of "rune_amount" of buy swap events
	BuyVolume *string `json:"buyVolume,omitempty"`

	// Total amount of rune, paid by the network to neutralize "gasUsed" changes
	GasReplenished *string `json:"gasReplenished,omitempty"`

	// Total amount of asset used as gas for network transactions (e.g. BNB.BNB, ETH.ETH)
	GasUsed *string `json:"gasUsed,omitempty"`

	// buyVolume + sellVolume
	PoolVolume *string `json:"poolVolume,omitempty"`

	// Asset price in rune at the end of current time bucket
	Price *string `json:"price,omitempty"`

	// Sum of "rewards" events in rune
	Reward *string `json:"reward,omitempty"`

	// Total changes in rune depth at this time bucket
	RuneChanges *string `json:"runeChanges,omitempty"`

	// Depth of rune at the end of current time bucket
	RuneDepth *string `json:"runeDepth,omitempty"`

	// Total rune staked
	RuneStaked *string `json:"runeStaked,omitempty"`

	// Total rune withdrawn
	RuneWithdrawn *string `json:"runeWithdrawn,omitempty"`

	// Count of sell swaps
	SellCount *int64 `json:"sellCount,omitempty"`

	// Sum of "rune_amount" of sell swap events
	SellVolume *string `json:"sellVolume,omitempty"`

	// Count of stake events
	StakeCount *int64 `json:"stakeCount,omitempty"`

	// Determining end of current time bucket in unix timestamp
	Time *int64 `json:"time,omitempty"`

	// Total changes in pool units (stakes/withdraws)
	UnitsChanges *string `json:"unitsChanges,omitempty"`

	// Count of withdraw events
	WithdrawCount *int64 `json:"withdrawCount,omitempty"`
}

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	Asset *Asset `json:"asset,omitempty"`

	// Total current Asset balance
	AssetDepth *string `json:"assetDepth,omitempty"`

	// Amount of pool asset changed by fee and gas
	AssetEarned *string `json:"assetEarned,omitempty"`

	// Asset return on investment
	AssetROI *string `json:"assetROI,omitempty"`

	// Total Asset staked
	AssetStakedTotal *string `json:"assetStakedTotal,omitempty"`

	// Number of RUNE->ASSET transactions
	BuyAssetCount *string `json:"buyAssetCount,omitempty"`

	// Average sell Asset fee size for RUNE->ASSET (in ASSET)
	BuyFeeAverage *string `json:"buyFeeAverage,omitempty"`

	// Total fees (in Asset)
	BuyFeesTotal *string `json:"buyFeesTotal,omitempty"`

	// Average trade slip for RUNE->ASSET in %
	BuySlipAverage *string `json:"buySlipAverage,omitempty"`

	// Average Asset buy transaction size for (RUNE->ASSET) (in ASSET)
	BuyTxAverage *string `json:"buyTxAverage,omitempty"`

	// Total Asset buy volume (RUNE->ASSET) (in RUNE)
	BuyVolume *string `json:"buyVolume,omitempty"`

	// (1 + (poolEarned/poolDepth)) ^ 12 -1
	PoolAPY *string `json:"poolAPY,omitempty"`

	// Total depth of both sides (in RUNE)
	PoolDepth *string `json:"poolDepth,omitempty"`

	// (assetChanges * price) + runeEarned
	PoolEarned *string `json:"poolEarned,omitempty"`

	// Average pool fee
	PoolFeeAverage *string `json:"poolFeeAverage,omitempty"`

	// Total fees
	PoolFeesTotal *string `json:"poolFeesTotal,omitempty"`

	// Pool ROI (average of RUNE and Asset ROI)
	PoolROI *string `json:"poolROI,omitempty"`

	// Pool ROI over 12 months
	PoolROI12 *string `json:"poolROI12,omitempty"`

	// Average pool slip
	PoolSlipAverage *string `json:"poolSlipAverage,omitempty"`

	// Rune value staked Total
	PoolStakedTotal *string `json:"poolStakedTotal,omitempty"`

	// Average pool transaction
	PoolTxAverage *string `json:"poolTxAverage,omitempty"`

	// Total pool units outstanding
	PoolUnits *string `json:"poolUnits,omitempty"`

	// Two-way volume of all-time (in RUNE)
	PoolVolume *string `json:"poolVolume,omitempty"`

	// Two-way volume in 24hrs (in RUNE)
	PoolVolume24hr *string `json:"poolVolume24hr,omitempty"`

	// Price of Asset (in RUNE).
	Price *string `json:"price,omitempty"`

	// Total current Rune balance
	RuneDepth *string `json:"runeDepth,omitempty"`

	// Amount of pool rune changed by fee,reward and gas
	RuneEarned *string `json:"runeEarned,omitempty"`

	// RUNE return on investment
	RuneROI *string `json:"runeROI,omitempty"`

	// Total RUNE staked
	RuneStakedTotal *string `json:"runeStakedTotal,omitempty"`

	// Number of ASSET->RUNE transactions
	SellAssetCount *string `json:"sellAssetCount,omitempty"`

	// Average buy Asset fee size for ASSET->RUNE (in RUNE)
	SellFeeAverage *string `json:"sellFeeAverage,omitempty"`

	// Total fees (in RUNE)
	SellFeesTotal *string `json:"sellFeesTotal,omitempty"`

	// Average trade slip for ASSET->RUNE in %
	SellSlipAverage *string `json:"sellSlipAverage,omitempty"`

	// Average Asset sell transaction size (ASSET>RUNE) (in RUNE)
	SellTxAverage *string `json:"sellTxAverage,omitempty"`

	// Total Asset sell volume (ASSET>RUNE) (in RUNE).
	SellVolume *string `json:"sellVolume,omitempty"`

	// Number of stake transactions
	StakeTxCount *string `json:"stakeTxCount,omitempty"`

	// Number of unique stakers
	StakersCount *string `json:"stakersCount,omitempty"`

	// Number of stake & withdraw transactions
	StakingTxCount *string `json:"stakingTxCount,omitempty"`
	Status         *string `json:"status,omitempty"`

	// Number of unique swappers interacting with pool
	SwappersCount *string `json:"swappersCount,omitempty"`

	// Number of swapping transactions in the pool (buys and sells)
	SwappingTxCount *string `json:"swappingTxCount,omitempty"`

	// Number of withdraw transactions
	WithdrawTxCount *string `json:"withdrawTxCount,omitempty"`
}

// Stakers defines model for Stakers.
type Stakers string

// StakersAddressData defines model for StakersAddressData.
type StakersAddressData struct {
	PoolsArray *[]Asset `json:"poolsArray,omitempty"`

	// Total value of earnings (in RUNE) across all pools.
	TotalEarned *string `json:"totalEarned,omitempty"`

	// Average of all pool ROIs.
	TotalROI *string `json:"totalROI,omitempty"`

	// Total staked (in RUNE) across all pools.
	TotalStaked *string `json:"totalStaked,omitempty"`
}

// StakersAssetData defines model for StakersAssetData.
type StakersAssetData struct {
	Asset *Asset `json:"asset,omitempty"`

	// Total of assets staked
	AssetStaked *string `json:"assetStaked,omitempty"`

	// Total of assets withdrawn
	AssetWithdrawn   *string `json:"assetWithdrawn,omitempty"`
	DateFirstStaked  *int64  `json:"dateFirstStaked,omitempty"`
	HeightLastStaked *int64  `json:"heightLastStaked,omitempty"`

	// Total of rune staked
	RuneStaked *string `json:"runeStaked,omitempty"`

	// Total of rune withdrawn
	RuneWithdrawn *string `json:"runeWithdrawn,omitempty"`

	// Represents ownership of a pool.
	Units *string `json:"units,omitempty"`
}

// StatsData defines model for StatsData.
type StatsData struct {

	// Daily active users (unique addresses interacting)
	DailyActiveUsers *string `json:"dailyActiveUsers,omitempty"`

	// Daily transactions
	DailyTx *string `json:"dailyTx,omitempty"`

	// Monthly active users
	MonthlyActiveUsers *string `json:"monthlyActiveUsers,omitempty"`

	// Monthly transactions
	MonthlyTx *string `json:"monthlyTx,omitempty"`

	// Number of active pools
	PoolCount *string `json:"poolCount,omitempty"`

	// Total buying transactions
	TotalAssetBuys *string `json:"totalAssetBuys,omitempty"`

	// Total selling transactions
	TotalAssetSells *string `json:"totalAssetSells,omitempty"`

	// Total RUNE balances
	TotalDepth *string `json:"totalDepth,omitempty"`

	// Total earned (in RUNE Value).
	TotalEarned *string `json:"totalEarned,omitempty"`

	// Total staking transactions
	TotalStakeTx *string `json:"totalStakeTx,omitempty"`

	// Total staked (in RUNE Value).
	TotalStaked *string `json:"totalStaked,omitempty"`

	// Total transactions
	TotalTx *string `json:"totalTx,omitempty"`

	// Total unique swappers & stakers
	TotalUsers *string `json:"totalUsers,omitempty"`

	// Total (in RUNE Value) of all assets swapped since start.
	TotalVolume *string `json:"totalVolume,omitempty"`

	// Total (in RUNE Value) of all assets swapped in 24hrs
	TotalVolume24hr *string `json:"totalVolume24hr,omitempty"`

	// Total withdrawing transactions
	TotalWithdrawTx *string `json:"totalWithdrawTx,omitempty"`
}

// ThorchainBooleanConstants defines model for ThorchainBooleanConstants.
type ThorchainBooleanConstants struct {
	StrictBondStakeRatio *bool `json:"StrictBondStakeRatio,omitempty"`
}

// ThorchainConstants defines model for ThorchainConstants.
type ThorchainConstants struct {
	BoolValues   *ThorchainBooleanConstants `json:"bool_values,omitempty"`
	Int64Values  *ThorchainInt64Constants   `json:"int_64_values,omitempty"`
	StringValues *ThorchainStringConstants  `json:"string_values,omitempty"`
}

// ThorchainEndpoint defines model for ThorchainEndpoint.
type ThorchainEndpoint struct {
	Address *string `json:"address,omitempty"`
	Chain   *string `json:"chain,omitempty"`
	PubKey  *string `json:"pub_key,omitempty"`
}

// ThorchainEndpoints defines model for ThorchainEndpoints.
type ThorchainEndpoints struct {
	Current *[]ThorchainEndpoint `json:"current,omitempty"`
}

// ThorchainInt64Constants defines model for ThorchainInt64Constants.
type ThorchainInt64Constants struct {
	BadValidatorRate                *int64 `json:"BadValidatorRate,omitempty"`
	BlocksPerYear                   *int64 `json:"BlocksPerYear,omitempty"`
	DesireValidatorSet              *int64 `json:"DesireValidatorSet,omitempty"`
	DoubleSignMaxAge                *int64 `json:"DoubleSignMaxAge,omitempty"`
	EmissionCurve                   *int64 `json:"EmissionCurve,omitempty"`
	FailKeySignSlashPoints          *int64 `json:"FailKeySignSlashPoints,omitempty"`
	FailKeygenSlashPoints           *int64 `json:"FailKeygenSlashPoints,omitempty"`
	FundMigrationInterval           *int64 `json:"FundMigrationInterval,omitempty"`
	JailTimeKeygen                  *int64 `json:"JailTimeKeygen,omitempty"`
	JailTimeKeysign                 *int64 `json:"JailTimeKeysign,omitempty"`
	LackOfObservationPenalty        *int64 `json:"LackOfObservationPenalty,omitempty"`
	MinimumBondInRune               *int64 `json:"MinimumBondInRune,omitempty"`
	MinimumNodesForBFT              *int64 `json:"MinimumNodesForBFT,omitempty"`
	MinimumNodesForYggdrasil        *int64 `json:"MinimumNodesForYggdrasil,omitempty"`
	NewPoolCycle                    *int64 `json:"NewPoolCycle,omitempty"`
	ObserveSlashPoints              *int64 `json:"ObserveSlashPoints,omitempty"`
	OldValidatorRate                *int64 `json:"OldValidatorRate,omitempty"`
	RotatePerBlockHeight            *int64 `json:"RotatePerBlockHeight,omitempty"`
	RotateRetryBlocks               *int64 `json:"RotateRetryBlocks,omitempty"`
	SigningTransactionPeriod        *int64 `json:"SigningTransactionPeriod,omitempty"`
	StakeLockUpBlocks               *int64 `json:"StakeLockUpBlocks,omitempty"`
	TransactionFee                  *int64 `json:"TransactionFee,omitempty"`
	ValidatorRotateInNumBeforeFull  *int64 `json:"ValidatorRotateInNumBeforeFull,omitempty"`
	ValidatorRotateNumAfterFull     *int64 `json:"ValidatorRotateNumAfterFull,omitempty"`
	ValidatorRotateOutNumBeforeFull *int64 `json:"ValidatorRotateOutNumBeforeFull,omitempty"`
	WhiteListGasAsset               *int64 `json:"WhiteListGasAsset,omitempty"`
	YggFundLimit                    *int64 `json:"YggFundLimit,omitempty"`
}

// ThorchainLastblock defines model for ThorchainLastblock.
type ThorchainLastblock struct {
	Chain          *string `json:"chain,omitempty"`
	Lastobservedin *int64  `json:"lastobservedin,omitempty"`
	Lastsignedout  *int64  `json:"lastsignedout,omitempty"`
	Thorchain      *int64  `json:"thorchain,omitempty"`
}

// ThorchainStringConstants defines model for ThorchainStringConstants.
type ThorchainStringConstants struct {
	DefaultPoolStatus *string `json:"DefaultPoolStatus,omitempty"`
}

// TotalVolChanges defines model for TotalVolChanges.
type TotalVolChanges struct {

	// Sum of "rune_amount" of buy swap events
	BuyVolume *string `json:"buyVolume,omitempty"`

	// Sum of "rune_amount" of sell swap events
	SellVolume *string `json:"sellVolume,omitempty"`

	// Determining end of current time bucket in unix timestamp
	Time *int64 `json:"time,omitempty"`

	// buyVolume + sellVolume
	TotalVolume *string `json:"totalVolume,omitempty"`
}

// TxDetails defines model for TxDetails.
type TxDetails struct {
	Date    *int64  `json:"date,omitempty"`
	Events  *Event  `json:"events,omitempty"`
	Gas     *Gas    `json:"gas,omitempty"`
	Height  *string `json:"height,omitempty"`
	In      *Tx     `json:"in,omitempty"`
	Options *Option `json:"options,omitempty"`
	Out     *[]Tx   `json:"out,omitempty"`
	Pool    *Asset  `json:"pool,omitempty"`
	Status  *string `json:"status,omitempty"`
	Type    *string `json:"type,omitempty"`
}

// Asset defines model for asset.
type Asset string

// Coin defines model for coin.
type Coin struct {
	Amount *string `json:"amount,omitempty"`
	Asset  *Asset  `json:"asset,omitempty"`
}

// Coins defines model for coins.
type Coins []Coin

// Event defines model for event.
type Event struct {
	Fee        *string `json:"fee,omitempty"`
	Slip       *string `json:"slip,omitempty"`
	StakeUnits *string `json:"stakeUnits,omitempty"`
}

// Gas defines model for gas.
type Gas struct {
	Amount *string `json:"amount,omitempty"`
	Asset  *Asset  `json:"asset,omitempty"`
}

// Option defines model for option.
type Option struct {
	Asymmetry           *string `json:"asymmetry,omitempty"`
	PriceTarget         *string `json:"priceTarget,omitempty"`
	WithdrawBasisPoints *string `json:"withdrawBasisPoints,omitempty"`
}

// Tx defines model for tx.
type Tx struct {
	Address *string `json:"address,omitempty"`
	Coins   *Coins  `json:"coins,omitempty"`
	Memo    *string `json:"memo,omitempty"`
	TxID    *string `json:"txID,omitempty"`
}

// AssetsDetailedResponse defines model for AssetsDetailedResponse.
type AssetsDetailedResponse []AssetDetail

// GeneralErrorResponse defines model for GeneralErrorResponse.
type GeneralErrorResponse Error

// GetPoolAggChangesResponse defines model for GetPoolAggChangesResponse.
type GetPoolAggChangesResponse []PoolAggChanges

// HealthResponse defines model for HealthResponse.
type HealthResponse struct {
	CatchingUp    *bool  `json:"catching_up,omitempty"`
	Database      *bool  `json:"database,omitempty"`
	ScannerHeight *int64 `json:"scannerHeight,omitempty"`
}

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse NetworkInfo

// NodeKeyResponse defines model for NodeKeyResponse.
type NodeKeyResponse []NodeKey

// PoolsDetailedResponse defines model for PoolsDetailedResponse.
type PoolsDetailedResponse []PoolDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse []Asset

// StakersAddressDataResponse defines model for StakersAddressDataResponse.
type StakersAddressDataResponse StakersAddressData

// StakersAssetDataResponse defines model for StakersAssetDataResponse.
type StakersAssetDataResponse []StakersAssetData

// StakersResponse defines model for StakersResponse.
type StakersResponse []Stakers

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// ThorchainConstantsResponse defines model for ThorchainConstantsResponse.
type ThorchainConstantsResponse ThorchainConstants

// ThorchainEndpointsResponse defines model for ThorchainEndpointsResponse.
type ThorchainEndpointsResponse ThorchainEndpoints

// ThorchainLastblockResponse defines model for ThorchainLastblockResponse.
type ThorchainLastblockResponse ThorchainLastblock

// TotalVolChangesResponse defines model for TotalVolChangesResponse.
type TotalVolChangesResponse []TotalVolChanges

// TxsResponse defines model for TxsResponse.
type TxsResponse struct {
	Count *int64       `json:"count,omitempty"`
	Txs   *[]TxDetails `json:"txs,omitempty"`
}

// GetAssetInfoParams defines parameters for GetAssetInfo.
type GetAssetInfoParams struct {

	// One or more comma separated unique asset (CHAIN.SYMBOL)
	Asset string `json:"asset"`
}

// GetPoolAggChangesParams defines parameters for GetPoolAggChanges.
type GetPoolAggChangesParams struct {

	// Pool asset name
	Pool string `json:"pool"`

	// Interval of calculations
	Interval string `json:"interval"`

	// Start time of the query as unix timestamp
	From int64 `json:"from"`

	// End time of the query as unix timestamp
	To int64 `json:"to"`
}

// GetTotalVolChangesParams defines parameters for GetTotalVolChanges.
type GetTotalVolChangesParams struct {

	// Interval of calculations
	Interval string `json:"interval"`

	// Start time of the query as unix timestamp
	From int64 `json:"from"`

	// End time of the query as unix timestamp
	To int64 `json:"to"`
}

// GetPoolsDetailsParams defines parameters for GetPoolsDetails.
type GetPoolsDetailsParams struct {

	// Specifies the returning view
	View *string `json:"view,omitempty"`

	// One or more comma separated unique asset (CHAIN.SYMBOL)
	Asset string `json:"asset"`
}

// GetStakersAddressAndAssetDataParams defines parameters for GetStakersAddressAndAssetData.
type GetStakersAddressAndAssetDataParams struct {

	// One or more comma separated unique asset (CHAIN.SYMBOL)
	Asset string `json:"asset"`
}

// GetTxDetailsParams defines parameters for GetTxDetails.
type GetTxDetailsParams struct {

	// Address of sender or recipient of any in/out tx in event
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx in event
	Txid *string `json:"txid,omitempty"`

	// Any asset used in event (CHAIN.SYMBOL)
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of event
	Type *string `json:"type,omitempty"`

	// pagination offset
	Offset int64 `json:"offset"`

	// pagination limit
	Limit int64 `json:"limit"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get Asset Information
	// (GET /v1/assets)
	GetAssetInfo(ctx echo.Context, params GetAssetInfoParams) error
	// Get Documents
	// (GET /v1/doc)
	GetDocs(ctx echo.Context) error
	// Get Health
	// (GET /v1/health)
	GetHealth(ctx echo.Context) error
	// Get Pool Aggregated Changes
	// (GET /v1/history/pools)
	GetPoolAggChanges(ctx echo.Context, params GetPoolAggChangesParams) error
	// Get Total Volume Changes
	// (GET /v1/history/total_volume)
	GetTotalVolChanges(ctx echo.Context, params GetTotalVolChangesParams) error
	// Get Network Data
	// (GET /v1/network)
	GetNetworkData(ctx echo.Context) error
	// Get Node public keys
	// (GET /v1/nodes)
	GetNodes(ctx echo.Context) error
	// Get Asset Pools
	// (GET /v1/pools)
	GetPools(ctx echo.Context) error
	// Get Pools Details
	// (GET /v1/pools/detail)
	GetPoolsDetails(ctx echo.Context, params GetPoolsDetailsParams) error
	// Get Stakers
	// (GET /v1/stakers)
	GetStakersData(ctx echo.Context) error
	// Get Staker Data
	// (GET /v1/stakers/{address})
	GetStakersAddressData(ctx echo.Context, address string) error
	// Get Staker Pool Data
	// (GET /v1/stakers/{address}/pools)
	GetStakersAddressAndAssetData(ctx echo.Context, address string, params GetStakersAddressAndAssetDataParams) error
	// Get Global Stats
	// (GET /v1/stats)
	GetStats(ctx echo.Context) error
	// Get Swagger
	// (GET /v1/swagger.json)
	GetSwagger(ctx echo.Context) error
	// Get the Proxied THORChain Constants
	// (GET /v1/thorchain/constants)
	GetThorchainProxiedConstants(ctx echo.Context) error
	// Get the Proxied THORChain Lastblock
	// (GET /v1/thorchain/lastblock)
	GetThorchainProxiedLastblock(ctx echo.Context) error
	// Get the Proxied Pool Addresses
	// (GET /v1/thorchain/pool_addresses)
	GetThorchainProxiedEndpoints(ctx echo.Context) error
	// Get details of a tx by address, asset or tx-id
	// (GET /v1/txs)
	GetTxDetails(ctx echo.Context, params GetTxDetailsParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetAssetInfo converts echo context to params.
func (w *ServerInterfaceWrapper) GetAssetInfo(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAssetInfoParams
	// ------------- Required query parameter "asset" -------------

	err = runtime.BindQueryParameter("form", true, true, "asset", ctx.QueryParams(), &params.Asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAssetInfo(ctx, params)
	return err
}

// GetDocs converts echo context to params.
func (w *ServerInterfaceWrapper) GetDocs(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDocs(ctx)
	return err
}

// GetHealth converts echo context to params.
func (w *ServerInterfaceWrapper) GetHealth(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetHealth(ctx)
	return err
}

// GetPoolAggChanges converts echo context to params.
func (w *ServerInterfaceWrapper) GetPoolAggChanges(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPoolAggChangesParams
	// ------------- Required query parameter "pool" -------------

	err = runtime.BindQueryParameter("form", true, true, "pool", ctx.QueryParams(), &params.Pool)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pool: %s", err))
	}

	// ------------- Required query parameter "interval" -------------

	err = runtime.BindQueryParameter("form", true, true, "interval", ctx.QueryParams(), &params.Interval)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter interval: %s", err))
	}

	// ------------- Required query parameter "from" -------------

	err = runtime.BindQueryParameter("form", true, true, "from", ctx.QueryParams(), &params.From)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter from: %s", err))
	}

	// ------------- Required query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, true, "to", ctx.QueryParams(), &params.To)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter to: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPoolAggChanges(ctx, params)
	return err
}

// GetTotalVolChanges converts echo context to params.
func (w *ServerInterfaceWrapper) GetTotalVolChanges(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTotalVolChangesParams
	// ------------- Required query parameter "interval" -------------

	err = runtime.BindQueryParameter("form", true, true, "interval", ctx.QueryParams(), &params.Interval)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter interval: %s", err))
	}

	// ------------- Required query parameter "from" -------------

	err = runtime.BindQueryParameter("form", true, true, "from", ctx.QueryParams(), &params.From)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter from: %s", err))
	}

	// ------------- Required query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, true, "to", ctx.QueryParams(), &params.To)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter to: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTotalVolChanges(ctx, params)
	return err
}

// GetNetworkData converts echo context to params.
func (w *ServerInterfaceWrapper) GetNetworkData(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNetworkData(ctx)
	return err
}

// GetNodes converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodes(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodes(ctx)
	return err
}

// GetPools converts echo context to params.
func (w *ServerInterfaceWrapper) GetPools(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPools(ctx)
	return err
}

// GetPoolsDetails converts echo context to params.
func (w *ServerInterfaceWrapper) GetPoolsDetails(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPoolsDetailsParams
	// ------------- Optional query parameter "view" -------------

	err = runtime.BindQueryParameter("form", true, false, "view", ctx.QueryParams(), &params.View)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter view: %s", err))
	}

	// ------------- Required query parameter "asset" -------------

	err = runtime.BindQueryParameter("form", true, true, "asset", ctx.QueryParams(), &params.Asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPoolsDetails(ctx, params)
	return err
}

// GetStakersData converts echo context to params.
func (w *ServerInterfaceWrapper) GetStakersData(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStakersData(ctx)
	return err
}

// GetStakersAddressData converts echo context to params.
func (w *ServerInterfaceWrapper) GetStakersAddressData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStakersAddressData(ctx, address)
	return err
}

// GetStakersAddressAndAssetData converts echo context to params.
func (w *ServerInterfaceWrapper) GetStakersAddressAndAssetData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetStakersAddressAndAssetDataParams
	// ------------- Required query parameter "asset" -------------

	err = runtime.BindQueryParameter("form", true, true, "asset", ctx.QueryParams(), &params.Asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStakersAddressAndAssetData(ctx, address, params)
	return err
}

// GetStats converts echo context to params.
func (w *ServerInterfaceWrapper) GetStats(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStats(ctx)
	return err
}

// GetSwagger converts echo context to params.
func (w *ServerInterfaceWrapper) GetSwagger(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSwagger(ctx)
	return err
}

// GetThorchainProxiedConstants converts echo context to params.
func (w *ServerInterfaceWrapper) GetThorchainProxiedConstants(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetThorchainProxiedConstants(ctx)
	return err
}

// GetThorchainProxiedLastblock converts echo context to params.
func (w *ServerInterfaceWrapper) GetThorchainProxiedLastblock(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetThorchainProxiedLastblock(ctx)
	return err
}

// GetThorchainProxiedEndpoints converts echo context to params.
func (w *ServerInterfaceWrapper) GetThorchainProxiedEndpoints(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetThorchainProxiedEndpoints(ctx)
	return err
}

// GetTxDetails converts echo context to params.
func (w *ServerInterfaceWrapper) GetTxDetails(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTxDetailsParams
	// ------------- Optional query parameter "address" -------------

	err = runtime.BindQueryParameter("form", true, false, "address", ctx.QueryParams(), &params.Address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Optional query parameter "txid" -------------

	err = runtime.BindQueryParameter("form", true, false, "txid", ctx.QueryParams(), &params.Txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	// ------------- Optional query parameter "asset" -------------

	err = runtime.BindQueryParameter("form", true, false, "asset", ctx.QueryParams(), &params.Asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// ------------- Optional query parameter "type" -------------

	err = runtime.BindQueryParameter("form", true, false, "type", ctx.QueryParams(), &params.Type)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter type: %s", err))
	}

	// ------------- Required query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, true, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Required query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, true, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTxDetails(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/v1/assets", wrapper.GetAssetInfo)
	router.GET("/v1/doc", wrapper.GetDocs)
	router.GET("/v1/health", wrapper.GetHealth)
	router.GET("/v1/history/pools", wrapper.GetPoolAggChanges)
	router.GET("/v1/history/total_volume", wrapper.GetTotalVolChanges)
	router.GET("/v1/network", wrapper.GetNetworkData)
	router.GET("/v1/nodes", wrapper.GetNodes)
	router.GET("/v1/pools", wrapper.GetPools)
	router.GET("/v1/pools/detail", wrapper.GetPoolsDetails)
	router.GET("/v1/stakers", wrapper.GetStakersData)
	router.GET("/v1/stakers/:address", wrapper.GetStakersAddressData)
	router.GET("/v1/stakers/:address/pools", wrapper.GetStakersAddressAndAssetData)
	router.GET("/v1/stats", wrapper.GetStats)
	router.GET("/v1/swagger.json", wrapper.GetSwagger)
	router.GET("/v1/thorchain/constants", wrapper.GetThorchainProxiedConstants)
	router.GET("/v1/thorchain/lastblock", wrapper.GetThorchainProxiedLastblock)
	router.GET("/v1/thorchain/pool_addresses", wrapper.GetThorchainProxiedEndpoints)
	router.GET("/v1/txs", wrapper.GetTxDetails)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"T98N3g0CJcDyu3AM+PL0PwEAAP//PD9R6c5oAAA=",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}

